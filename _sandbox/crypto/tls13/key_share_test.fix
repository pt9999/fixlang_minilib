module Main;

import Debug;

import Minilib.Crypto.Tls13.KeyShare;
import Minilib.Crypto.Tls13.Types;
import Minilib.Encoding.Binary;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_key_share_entry: TestCase;
test_key_share_entry = (
    make_test("test_key_share_entry") $ |_|
    let kse = KeyShareEntry::make(
        0x0017_U16, [ 0x01_U8, 0x02_U8, 0x03_U8 ]
    );
    let bytes = marshal_to_bytes(kse);
    let expected = "00170003010203";
    let actual = bytes.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("bytes", expected, actual);
    let kse2 = *unmarshal_from_bytes(bytes).from_result;
    eval *assert_true("kse", kse == kse2);
    pure()
);

test_key_share_client_hello: TestCase;
test_key_share_client_hello = (
    make_test("test_key_share_client_hello") $ |_|
    let kse = KeyShareEntry::make(
        0x0017_U16, [ 0x01_U8, 0x02_U8, 0x03_U8 ]
    );
    let ksc = KeyShareClientHello::make([kse]);
    let bytes = marshal_to_bytes(ksc);
    let expected = "00170003010203";
    let actual = bytes.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("bytes", expected, actual);
    let ksc2 = *unmarshal_from_bytes(bytes).from_result;
    eval *assert_true("ksc", ksc.@client_shares == ksc2.@client_shares);
    pure()
);

main: IO ();
main = (
    [
        test_key_share_entry,
        test_key_share_client_hello,
    ]
    .run_test_driver
);

