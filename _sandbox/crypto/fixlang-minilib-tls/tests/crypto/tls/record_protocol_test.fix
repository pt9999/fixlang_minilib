module Main;

import Minilib.Crypto.Tls.Types;
import Minilib.Crypto.Tls.RecordProtocol;


import Minilib.Encoding.Binary;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_tls_plaintext_marshal_unmarshal: TestCase;
test_tls_plaintext_marshal_unmarshal = (
    make_test("test_tls_plaintext_marshal_unmarshal") $ |_|
    let pt = TLSPlaintext::empty.set_content_type(application_data()).set_fragment("abc".get_bytes);
    let bytes = marshal_to_bytes(pt);
    let expected = "170303000461626300";
    let actual = bytes.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("marshal1", expected, actual);

    let pt2: TLSPlaintext = *unmarshal_from_bytes(bytes).from_result;
    let bytes2 = marshal_to_bytes(pt2);
    let actual = bytes2.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("marshal2", expected, actual);
    pure()
);

test_tls_ciphertext_marshal_unmarshal: TestCase;
test_tls_ciphertext_marshal_unmarshal = (
    make_test("test_tls_ciphertext_marshal_unmarshal") $ |_|
    let ct = TLSCiphertext::empty.set_encrypted_record("abc".get_bytes);
    let bytes = marshal_to_bytes(ct);
    let expected = "170303000461626300";
    let actual = bytes.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("marshal1", expected, actual);

    let ct2: TLSCiphertext = *unmarshal_from_bytes(bytes).from_result;
    let bytes2 = marshal_to_bytes(ct2);
    let actual = bytes2.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("marshal2", expected, actual);
    pure()
);


main: IO ();
main = (
    [
        test_tls_plaintext_marshal_unmarshal,
        test_tls_ciphertext_marshal_unmarshal,
    ]
    .run_test_driver
);
