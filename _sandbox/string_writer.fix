module Main;

import StringEx;

//-------------------------------------------------------
// State Monad
//-------------------------------------------------------

type State s a = unbox struct { _data: s -> (a, s) };

namespace State {
    make_state_monad: (s -> (a, s)) -> State s a;
    make_state_monad = |f| State { _data: f };

    run_state: s -> State s a -> (a, s);
    run_state = |s, ma| (ma.@_data) (s);

    get_state: State s s;
    get_state = make_state_monad $ |s| (s, s);

    put_state: s -> State s ();
    put_state = |s| make_state_monad $ |_| ((), s);
}

impl State s: Monad {
    pure = |a| make_state_monad $ |s| (a, s);
    bind = |f, ma| make_state_monad $ |s|
        let (a, ss) = ma.run_state(s);
        let mb = f(a);
        mb.run_state(ss) 
    ;
}
//---------------------------------
// StringWriter
//---------------------------------

type StringWriter = State String ();

namespace StringWriter {
    write: [a: ToString] a -> StringWriter;
    write = |a| (
        put_state(*get_state + a.to_string)
    );

    collect_string: StringWriter -> String;
    collect_string = |w| (
        let (_, str) = w.run_state("");
        str
    );
}

namespace Tuple2 {
    concat_str: [a: ToString, b: ToString] (a,b) -> String;
    concat_str = |(a,b)| a.to_string + b.to_string;
}

namespace Tuple3 {
    concat_str: [a: ToString, b: ToString, c:ToString] (a,b,c) -> String;
    concat_str = |(a,b,c)| a.to_string + b.to_string + c.to_string;
}

namespace Tuple4 {
    concat_str: [a: ToString, b: ToString, c:ToString, d:ToString] (a,b,c,d) -> String;
    concat_str = |(a,b,c,d)| a.to_string + b.to_string + c.to_string + d.to_string;
}


test_string_writer: IO ();
test_string_writer = (
    let text = collect_string $ do {
        let _ = *write("hello ");
        let _ = *write("world");
        let _ = *write(((" ", 1).concat_str, " ", 2.2, "\n").concat_str);
        pure()
    };
    println (text)
);

main: IO ();
main = test_string_writer;

