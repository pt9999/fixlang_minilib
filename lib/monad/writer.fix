// Writer monad.
//
// For details, see [blog post: The Reader and Writer Monads and Comonads](https://www.olivierverdier.com/posts/2014/12/31/reader-writer-monad-comonad/).
module Minilib.Monad.Writer;

import Minilib.Monad.Identity;
import Minilib.Monad.Trans;
import Minilib.Monad.Error;
import Minilib.Monad.IO;
import Minilib.Trait.Monoid;
import Minilib.Trait.Semigroup;

// A trait for the interface of generic writer monads.
trait MonadWriter = Monad + MonadWriterIF;

// A trait for generic writer monads that manages the internal environment.
trait [wm: * -> *] wm: MonadWriterIF {
    // The type of the environment.
    type EnvType wm;
    // Tells specified value to the internal environment.
    tell: EnvType wm -> wm ();
    // Listens the internal environment.
    listen: wm a -> wm (EnvType wm, a);
    // Provide a writer transformer which changes internals of the written object.
    pass: wm (EnvType wm -> EnvType wm, a) -> wm a;
}

// Writer monad wraps a pair of an environment and a value.
// `e` is a type of an environment.
// `m` is a type of an underlyind monad.
// `a` is a type of a value.
type [m: * -> *] WriterT e m a = unbox struct {
    data: m (e, a)
};

type Writer e a = WriterT e Identity a;

// Creates a generic writer monad from an enviroment and a value.
writer_t: [m: Monad] m (e, a) -> WriterT e m a;
writer_t = |ea| WriterT { data: ea };

// Creates a writer monad from an enviroment and a value.
writer: e -> a -> Writer e a;
writer = |e, a| writer_t $ Identity::make $ (e, a);

// Runs a generic writer monad to get an enviroment and a value.
run_writer_t: [m: Monad] WriterT e m a -> m (e, a);
run_writer_t = @data;

// Runs a writer monad to get an enviroment and a value.
run_writer: Writer e a -> (e, a);
run_writer = run_writer_t >> Identity::get;

// Creates a writer monad that appends to the environment.
write: [e: Monoid, m: Monad] e -> WriterT e m ();
write = |e| writer_t $ pure $ (e, ());

// Gets the envirionment from a generic writer monad.
get_env_t: [m: Monad] WriterT e m a -> m e;
get_env_t = |ma| ma.@data.bind(@0 >> pure);

// Gets the envirionment from a writer monad.
get_env: Writer e a -> e;
get_env = |ma| ma.get_env_t.get;

// Gets the value from a generic writer monad.
get_value_t: [m: Monad] WriterT e m a -> m a;
get_value_t = |ma| ma.@data.bind(@1 >> pure);

// Gets the value from a writer monad.
get_value: Writer e a -> a;
get_value = |ma| ma.get_value_t.get;

// Maps an underlying monad and a value using the specified function.
map_writer_t: [m: Monad, n: Monad] (m (e, a) -> n (e1, b)) -> WriterT e m a -> WriterT e1 n b;
map_writer_t = |f, ma| writer_t $ f(ma.run_writer_t);

// Lifts an underlyind monad to a writer monad.
lift_writer: [e: Monoid, m: Monad] m a -> WriterT e m a;
lift_writer = |ma| writer_t $ ma.bind(|a| pure $ (mempty, a));

impl [m: Monad] WriterT e m: Functor {
    map = |f, ma| writer_t $ do {
        let (e, a) = *ma.run_writer_t;
        pure $ (e, f(a))
    };
}

impl [e: Monoid, m: Monad] WriterT e m: Monad {
    pure = |a| writer_t $ pure $ (mempty, a);
    bind = |f, wma| writer_t $ do {
        let (e1, a) = *wma.run_writer_t;
        let wmb = f(a);
        let (e2, b) = *wmb.run_writer_t;
        let e = e1.sappend(e2);
        pure $ (e, b)
    };
}

impl [e: Monoid, m: Monad] WriterT e m: MonadWriterIF {
    // The type of the environment.
    type EnvType (WriterT e m) = e;
    // Tells specified value to the internal environment.
    tell = write;
    // Listens the internal environment.
    listen = |wma| writer_t $ do {
        let (e, x) = *wma.run_writer_t;
        pure $ (e, (e, x))
    };
    // Provide a writer transformer which changes internals of the written object.
    pass = |wmfa| writer_t $ do {
        let (e, (f, a)) = *wmfa.run_writer_t;
        pure $ (f(e), a)
    };
}

impl [e: Monoid] WriterT e: MonadTrans {
    lift_t = lift_writer;
}

impl [e: Monoid, m: MonadError] WriterT e m: MonadErrorIF {
    error = lift_t << error;
    catch = |handler, wma| (
        writer_t $
        wma.run_writer_t.catch(
            handler >> run_writer_t
        )
    );
}

impl [m: MonadIO, e: Monoid] WriterT e m: MonadIOIF {
    lift_io = lift_t << lift_io;
}

impl [m: MonadIOFail, e: Monoid] WriterT e m: MonadIOFailIF {
    lift_iofail = lift_t << lift_iofail;
}
