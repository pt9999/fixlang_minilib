module AesGcmTest;


import Minilib.Encoding.Binary;
import Minilib.Crypto.AES;
import Minilib.Crypto.AES.GCM;
import Minilib.Monad.FunctorM;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

// testcases extracted from AES-GCM test vectors.
// for details, see _sandbox/crypto/aes_gcmvs.fix.
test_aes_gcmvs: TestCase;
test_aes_gcmvs = (
    make_table_test("test_aes_gcmvs",
        [
            // 128,96,256,128,120,0
            "9ef362289bf33f7da3b9b4f7ab29f33b,0909451a28a7fa31d52ae092,00de8cb9b946977f03b1a2c0bb40ac6a8269f11fb5a4d52d64b0c7722871d167,5f3a7c466f2f52dd757886a145aa58c7,46e2291a45589cc6560e49da5142e3e2544f1e784d10cfc4c33d7a6b83531f9a,8c2f35869d4072a29fc28a0e4fab46",
            // 128,96,408,0,112,0
            "c5e15665689d356f659afed4e8396012,1e8aa807c2209cd3b47013a4,5abe38b6060ed4094a81bc5baedb3445036912ed1c764bd4ea61a0c06c0af94a5c7b5f115d239264efda1b99ed652314265621,,9af1aceab7e891cc32aee982b857b4c9a80d0bd0901de1a5f66b7ed7d84a013972f6cf3892b6061adaad686ff5ba46175f5181,2b800be8a4c7df943596709e2103",
            // 128,8,0,0,128,0
            "1672c3537afa82004c6b8a46f6f0d026,05,,,,8e2ad721f9455f74d8b53d3141f27e8e",
            // 128,1024,408,720,128,0
            "c7d9358af0fd737b118dbf4347fd252a,83de9fa52280522b55290ebe3b067286d87690560179554153cb3341a04e15c5f35390602fa07e5b5f16dc38cf082b11ad6dd3fab8552d2bf8d9c8981bbfc5f3b57e5e3066e3df23f078fa25bce63d3d6f86ce9fbc2c679655b958b09a991392eb93b453ba6e7bf8242f8f61329e3afe75d0f8536aa7e507d75891e540fb1d7e,422f46223fddff25fc7a6a897d20dc8af6cc8a37828c90bd95fa9b943f460eb0a26f29ffc483592efb64835774160a1bb5c0cd,5d2b9a4f994ffaa03000149956c8932e85b1a167294514e388b73b10808f509ea73c075ecbf43cecfec13c202afed62110dabf8026d237f4e765853bc078f3afe081d0a1f8d8f7556b8e42acc3cce888262185048d67c55b2df1,86eba4911578ac72ac30c25fe424da9ab625f29b5c00e36d2c24a2733dc40123dc57a8c9f17a24a26c09c73ad4efbcba3bab5b,492305190344618cab8b40f006a57186",
            ""
        ],
        |testdata|
        if testdata == "" { pure() };
        let bytes_arr: Array (Array U8) = (*testdata.split(",").map_m(from_string_hex).from_result).to_array;
        let key = bytes_arr.@(0);
        let iv = bytes_arr.@(1);
        let plaintext = bytes_arr.@(2);
        let auth_data = bytes_arr.@(3);
        let ciphertext = bytes_arr.@(4);
        let tag = bytes_arr.@(5);
        let len_t = tag.get_size * 8;
        let aes = AES::make(key);
        let cipher = _to_cipher(aes);
        let (c, t) = gcm_ae(cipher, iv, plaintext, auth_data, len_t);
        let _ = *assert_equal("ciphertext", ciphertext, c);
        let _ = *assert_equal("tag", tag, t);
        let res = gcm_ad(cipher, iv, c, auth_data, t, len_t);
        let _ = *assert_equal("plaintext", ok $ plaintext, res);
        pure()
    )
);

main: IO ();
main = (
    [
        test_aes_gcmvs,
        TestCase::empty
    ]
    .run_test_driver
);

