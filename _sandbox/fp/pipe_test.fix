module Main;

import Minilib.Monad.Pipe;
/*
import Minilib.Monad.State;
import Minilib.Monad.IO;
import Minilib.Monad.Error;
import Minilib.Monad.Trans;
*/
import Minilib.Trait.Traversable;
import Minilib.Testing.UnitTest;

my_pipe1: Pipe Void I64 ();
my_pipe1 = (
    pure();;
    loop_m(
        (), |_|
        write(1);;
        write(2);;
        write(3);;
        continue_m $ ()
    )
);

my_pipe2: Pipe I64 String ();
my_pipe2 = (
    pure();;
    loop_m(
        (), |_|
        let a: I64 = *read;
        let b: I64 = *read;
        write((a,b).to_string);;
        continue_m $ ()
    )
);

my_pipe3: Pipe String (Array String) ();
my_pipe3 = (
    pure();;
    Iterator::range(0, 5).foreach_m(|_|
        let a: String = *read;
        let b: String = *read;
        write([a, b]);;
        pure()
    )
);

main: IO ();
main = (
    let pipe: Pipe Void (Array String) () = comp(comp(my_pipe1, my_pipe2), my_pipe3);
    let xs = pipe.to_iter.to_array;
    println(xs.to_string);;
    pure()
);
