module Main;

import HashMap;
import AsyncTask;

import IOEx;
import Request;
import UnitTest;

open_string_reader: String -> IOFail (IOHandle, IOTask ());
open_string_reader = |str| (
    let (read_fh, write_fh) = *open_pipe;
    let writer_task = AsyncIOTask::make $ do {
        let _ = *write_string(write_fh, str);
        let _ = *close_file(write_fh).lift;
        pure()
    }.try(|err| eprintln("writer_task: "+ err));
    pure $ (read_fh, writer_task)
);

open_string_writer: () -> IOFail (IOHandle, IOTask String);
open_string_writer = |_| (
    let (read_fh, write_fh) = *open_pipe;
    let reader_task = AsyncIOTask::make $ do {
        let str = *read_string(read_fh);
        let _ = *close_file(read_fh).lift;
        pure $ str
    }.try(|err| 
        let _ = *eprintln("reader_task: "+ err);
        pure $ ""
    );
    pure $ (write_fh, reader_task)
);

test_request_simple: TestCase;
test_request_simple = (
    let testname = "test_request_simple";
    make_test(testname) $ |_|
    let text = "GET /index.html HTTP/1.1\r\n"
    + "Accept: text/html\r\n"
    + "\r\n"
    ;
    let (read_fh, writer_task) = *open_string_reader(text);
    let req = *Request::parse(read_fh, "192.168.10.10:65432");
    let _ = *close_file(read_fh).lift;
    let _ = *writer_task.get.lift;
    let _ = *assert_equal("remote_addr", "192.168.10.10:65432", req.@remote_addr);
    let _ = *assert_equal("method", "GET", req.@method);
    let _ = *assert_equal("request_target", "/index.html", req.@request_target);
    let _ = *assert_equal("http_version", "HTTP/1.1", req.@http_version);
    let _ = *assert_equal("headers[Accept]", some("text/html"), req.@headers.find("Accept"));
    pure()
);

test_response_simple: TestCase;
test_response_simple = (
    let testname = "test_response_simple";
    make_test(testname) $ |_|
    let text = "GET /index.html HTTP/1.1\r\n"
    + "Accept: text/html\r\n"
    + "\r\n"
    ;
    let (read_fh, writer_task) = *open_string_reader(text);
    let req = *Request::parse(read_fh, "192.168.10.10:65432");
    let _ = *close_file(read_fh).lift;
    let _ = *writer_task.get.lift;

    let (write_fh, reader_task) = *open_string_writer();
    let req = req.set_connection(write_fh);
    let res = Response::make(req);
    let res = *res.write_str("Hello world");
    let res = *res.end;
    let _ = *close_file(write_fh).lift;
    let actual_output = *reader_task.get.lift;
    let expected_output = "HTTP/1.1 200 OK\r\n"
    + "Content-Type: text/plain\r\n"
    + "\r\n"
    + "Hello world"
    ;
    let _ = *assert_equal("output", expected_output, actual_output);
    pure()
);

main: IO ();
main = (
    [
        test_request_simple,
        test_response_simple,
        TestCase::empty
    ]
    .run_test_driver
);