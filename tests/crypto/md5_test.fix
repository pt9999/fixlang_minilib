module Md5Test;

import Random;

import Minilib.Crypto.MD5;
import Minilib.Common.RandomEx;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;
import Minilib.Testing.UnitTest;

make_random_bytes: I64 -> I64 -> Array U8;
make_random_bytes = |size, seed| (
    Random::init_by_seed(seed.to_U64).generate_array(size, generate_U8).@1
);

test_digest: TestCase;
test_digest = (
    make_table_test("test_digest",
        [
            ("empty", [], "d41d8cd98f00b204e9800998ecf8427e"),
            ("abcdefg", "abcdefg".get_bytes.pop_back, "7ac66c0f148de9519b8bd264312c4d64"),
            ("0-255", Array::from_map(256, |i| i.to_U8), "e2c865db4162bed963bfaa9ef6ac18f0"),
            ("random_567", make_random_bytes(100000, 567), "93e1786a485e1dcfa6b46b98069f3b93")
        ],
        |(name, bytes, expected)|
        //let _ = *write_file_bytes(Path::parse("tmp." + name).as_some, bytes);
        let actual = MD5::digest(bytes).to_string_hex;
        assert_equal("eq", expected, actual)
    )
);

// RFC1321 A.5 Test suite
test_rfc1321: TestCase;
test_rfc1321 = (
    make_table_test("test_rfc1321",
        [
            ("", "d41d8cd98f00b204e9800998ecf8427e"),
            ("a", "0cc175b9c0f1b6a831c399e269772661"),
            ("abc", "900150983cd24fb0d6963f7d28e17f72"),
            ("message digest", "f96b697d7cb7938d525a2f31aaf161d0"),
            ("abcdefghijklmnopqrstuvwxyz", "c3fcd3d76192e4007dfb496cca67e13b"),
            ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
             "d174ab98d277d9f5a5611c2c9f419d9f"),
            ("12345678901234567890123456789012345678901234567890123456789012345678901234567890",
             "57edf4a22be3c955ac49da2e2107b67a")
        ],
        |(str, expected)|
        let bytes = str.get_bytes.pop_back;
        let actual = MD5::digest(bytes).to_string_hex;
        assert_equal("eq", expected, actual)
    )
);

main: IO ();
main = (
    [
        test_digest,
        test_rfc1321,
        TestCase::empty
    ]
    .run_test_driver
);

