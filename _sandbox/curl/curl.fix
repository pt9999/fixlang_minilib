module Minilib.Net.Curl;

import Debug;

type Easy = box struct {
    dtor: Destructor Ptr
};

type WriteFunction = Array U8 -> IOFail I64;


namespace Easy {

    make: IOFail Easy;
    make = (
        eval *pure();
        eval debug_eprintln("curl_easy_init");
        let handle = FFI_CALL[Ptr curl_easy_init()];
        let easy = Easy {
            dtor: Destructor::make(handle, |handle|
                eval debug_eprintln("curl_easy_cleanup");
                FFI_CALL[() curl_easy_cleanup(Ptr), handle]
            )
        };
        pure $ easy
    );

/*
    url: String -> Easy -> IOFail ();

    write_function: WriteFunction -> Easy -> IOFail ();
    write_function = |func, easy| (
        // func: Array U8 -> IOFail I64, a fix value
        // how to get a fix value from _callback_write_function?
    );

    _callback_write_function: Ptr -> CSizeT -> CSizeT -> Ptr -> Array I64 -> ();
    _callback_write_function = |ptr, size, nmemb, userdata, result| (

    );

    perform: Easy -> IOFail ();
    perform = |easy| (
        eval *pure();


    );
*/
}
