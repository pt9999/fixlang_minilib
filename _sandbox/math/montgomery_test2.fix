module Main;

import Minilib.Common.Assert;
import Minilib.Math.BigInt;
import Minilib.Math.BigNat;
import Minilib.Math.Euclid;
import Minilib.Math.Types;
import Minilib.Math.Montgomery;
import Minilib.Text.Hex;

namespace ECInt {
    from_string_hex: String -> Result ErrMsg BigInt;
    from_string_hex = |str| (
        let bytes: Array U8 = *FromStringHex::from_string_hex(str);
        from_bytes(bytes)
    );
}

scheme_1: MontScheme;
scheme_1 = (
    let n: BigInt = from_string("688150649").as_ok;
    let r_log_base = 1_U64;
    MontScheme::make(r_log_base, n)
);

scheme_secp256r1_p: MontScheme;
scheme_secp256r1_p = (
    //let n = ECInt::from_string_hex("FFFFFFFF 00000000 FFFFFFFF FFFFFFFF BCE6FAAD A7179E84 F3B9CAC2 FC632551").as_ok;
    let p = ECInt::from_string_hex("FFFFFFFF 00000001 00000000 00000000 00000000 FFFFFFFF FFFFFFFF FFFFFFFF").as_ok;
    let r_log_base = 8_U64;
    MontScheme::make(r_log_base, p)
);

test_mont: IOFail ();
test_mont = (
    let s = scheme_secp256r1_p;
    let a: BigInt = from_string("12345").as_ok;
    let a: Mont = from_BigInt(a, s);
    let b: BigInt = from_string("78911").as_ok;
    let b: Mont = from_BigInt(b, s);
    println("a="+a.to_string).lift;;
    println("b="+b.to_string).lift;;
    println("a+b="+(a+b).to_string).lift;;
    println("a-b="+(a-b).to_string).lift;;
    println("a-b+b="+(a-b+b).to_string).lift;;
    println("a*b="+(a*b).to_string).lift;;
    println("a/b="+(a/b).to_string).lift;;
    println("a/b*b="+(a/b*b).to_string).lift;;
    println("a*b/b="+(a*b/b).to_string).lift;;
    pure()
);

test_montgomery: IOFail ();
test_montgomery = (
    let s = scheme_secp256r1_p;
    let a: BigInt = from_string("12345").as_ok;
    let a: Montgomery = from_BigInt(a, s);
    let b: Montgomery = from_I64(3);
    println("a="+a.to_string).lift;;
    println("b="+b.to_string).lift;;
    println("a+b="+(a+b).to_string).lift;;
    println("a-b="+(a-b).to_string).lift;;
    println("a-b+b="+(a-b+b).to_string).lift;;
    println("a*b="+(a*b).to_string).lift;;
    println("a/b="+(a/b).to_string).lift;;
    println("a/b*b="+(a/b*b).to_string).lift;;
    println("a*b/b="+(a*b/b).to_BigInt.to_string).lift;;
    pure()
);

main: IO ();
main = do {
    //test_mont
    test_montgomery
}.try(eprintln);
