// https://en.wikipedia.org/wiki/ASN.1
// https://en.wikipedia.org/wiki/X.690
module Minilib.Crypto.Asn1.Der;

import Minilib.Crypto.Asn1;
import Minilib.Encoding.Binary;
import Minilib.Monad.State;
import Minilib.Monad.Error;
import Minilib.Monad.FunctorM;

trait MonadReadByte = Functor + Monad + MonadErrorIF + MonadReadByteIF;

trait [m: * -> *] m: MonadReadByteIF {
    read_byte: m U8;
}

impl [m: MonadError] StateT ByteBuffer m: MonadReadByteIF {
    read_byte = do {
        let buf = *get_state;
        let res: Result ErrMsg (U8, ByteBuffer) = buf.unmarshal;
        if res.is_err {
            error $ res.as_err
        };
        let (u8, buf) = res.as_ok;
        eval *put_state(buf);
        pure $ u8
    };
}

type Identifier = unbox struct {
    tag_class: TagClass,
    constructed: Bool,
    tag: Tag
}; 

namespace Identifier {
    make: TagClass -> Bool -> Tag -> Identifier;
    make = |tag_class, constructed, tag| Identifier {
        tag_class: tag_class,
        constructed: constructed,
        tag: tag
    };

    assert_tag: [m: MonadError] Tag -> Identifier -> m ();
    assert_tag = |tag, identifier| (
        if identifier.@tag != tag {
            error $ [tag, identifier.@tag].format("tag mismatch: expected={} actual={}")
        };
        pure $ ()
    );
}

impl Identifier: Eq {
    eq = |a, b| (
        a.@tag_class == b.@tag_class &&
        a.@constructed == b.@constructed &&
        a.@tag == b.@tag
    );
}

impl Identifier: ToString {
    to_string = |obj| (
        "Identifier {" +
        " tag_class=" + obj.@tag_class.to_string +
        " constructed=" + obj.@constructed.to_string +
        " tag=" + obj.@tag.to_string +
        " }"
    );
}

decode_identifier: [m: MonadReadByte] m Identifier;
decode_identifier = (
    let u8 = *read_byte;
    let tag_class = u8.shift_right(6_U8).bit_and(3_U8);
    let constructed = (u8.bit_and(0x20_U8) != 0_U8);
    let tag_type = u8.bit_and(31_U8);
    let tag_type = *(
        if tag_type < 31_U8 { pure $ tag_type };
        loop_m(
            0_U8, |tag_type|
            let u8 = *read_byte;
            let tag_type = tag_type.shift_left(7_U8).bit_or(u8.bit_and(0x3f_U8));
            if u8.bit_and(0x80_U8) == 0_U8 { break_m $ tag_type };
            continue_m $ tag_type
        )
    );
    pure $ Identifier {
        tag_class: tag_class,
        constructed: constructed,
        tag: tag_type
    }
);

decode_length: [m: MonadReadByte] m I64;
decode_length = (
    let u8 = *read_byte;
    if u8.bit_and(0x80_U8) == 0_U8 {
        pure $ u8.to_I64
    };
    let n = u8.bit_and(0x3F_U8).to_I64;
    if n == 0 {
        error $ "der does not allow indefinite length"
    };
    if n == 127 {
        error $ "der does not allow reserved length"
    };
    loop_m(
        (0, 0), |(length, i)|
        if i >= n { break_m $ length };
        let u8 = *read_byte;
        let length = length.shift_left(8).bit_or(u8.to_I64); 
        continue_m $ (length, i + 1)
    )
);

decode_n_bytes: [m: MonadReadByte] I64 -> m (Array U8);
decode_n_bytes = |length| (
    Array::fill(length, read_byte).map_m(|x| x)
);

decode_primitive: [m: MonadReadByte] m (Identifier, Array U8);
decode_primitive = (
    let identifier = *decode_identifier;
    if identifier.@constructed {
        error $ "not a primitive"
    };
    let length = *decode_length;
    let contents = *decode_n_bytes(length);
    pure $ (identifier, contents)
);

choice: [m: MonadError] Array (m a) -> m a;
choice = |mas| (
    let inner = fix $ |inner, i| (
        if i >= mas.get_size - 1 { mas.@(i) };
        mas.@(i).catch(|err| inner(i + 1))
    );
    inner(0)
);

trait a: DecodeDer {
    decode_der: [m: MonadReadByte] m a;
}


impl Asn1::Integer: DecodeDer {
    decode_der = (
        let (identifier, contents) = *decode_primitive;
        eval *assert_tag(tag_integer, identifier);
        if contents.get_size > 8 {
            error $ "too large integer"
        };
        let u64 = contents.to_iter.fold(
            0_U64, |u64, u8|
            u64.shift_left(8_U64).bit_or(u8.to_U64)
        );
        pure $ u64.to_I64
    );
}

// ITU-T Rec. X.680 (02/2021)
// p.63 38	The time type
decode_time: [m: MonadReadByte] m String;
decode_time = (
    let (identifier, contents) = *decode_primitive;
    eval *assert_tag(tag_time, identifier);
    // contents = hh:mm:ss
    pure $ contents._unsafe_to_string
);

decode_generalized_time: [m: MonadReadByte] m String;
decode_generalized_time = (
    let (identifier, contents) = *decode_primitive;
    eval *assert_tag(tag_generalized_time, identifier);
    // contents = ????
    pure $ contents._unsafe_to_string
);

decode_utc_time: [m: MonadReadByte] m String;
decode_utc_time = (
    let (identifier, contents) = *decode_primitive;
    eval *assert_tag(tag_utc_time, identifier);
    // contents = YYMMDDhhmm(ss)?(z|[+-]hhmm)
    pure $ contents._unsafe_to_string
);

impl Time::Time: DecodeDer {
    decode_der = (
        let (identifier, contents) = *decode_primitive;
        eval *choice([
            assert_tag(tag_time, identifier),
            assert_tag(tag_time, identifier),
            assert_tag(tag_time, identifier),

        ]);
        if contents.get_size > 8 {
            error $ "too large integer"
        };
        let u64 = contents.to_iter.fold(
            0_U64, |u64, u8|
            u64.shift_left(8_U64).bit_or(u8.to_U64)
        );
        pure $ u64.to_I64
    );
}
