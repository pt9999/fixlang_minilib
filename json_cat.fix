module Main;

import Debug;
import HashMap;

import SimpleParser;
import Json;
import JsonEncoder;
import JsonDecoder;

perf_decode: I64 -> String -> Result ErrMsg Json;
perf_decode = |count, text| (
    let (res, consumed_time) = ().consumed_time_while(|_|
        Iterator::count_up(0).take(count).fold(
            ok $ null(), |_,_|
            JsonDecoder::decode(text)
        )
    );
    eval debug_eprintln("Total time: " + consumed_time.to_string);
    eval debug_eprintln("Time per loop: " + (consumed_time / count.to_F64).to_string);
    res
);

main: IO ();
main = (
    do {
        let text = *(read_string(stdin));
        let json = *(from_result $ JsonDecoder::decode(text));
        //let json = *(from_result $ perf_decode(1000, text));
        let text2 = JsonEncoder::encode_pretty(json);
        let _ = *(text2.write_string(stdout));
        pure $ ()
    }.try (|err| eprintln("error: " + err))
);