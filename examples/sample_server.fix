module Main;

import Debug;
import AsyncTask;

import Tcp;

_usleep: I64 -> I64;
_usleep = |usec| (
    CALL_C[I32 usleep(U32), usec.to_U32].to_I64
);


echo: Socket -> IOFail ();
echo = |socket| (
    let _ = *(lift $ eprintln ("Echo session start: socket=" + socket.to_string));
    let bufsock = BufferedSocket::make(socket);
    let bufsock = *(bufsock.write_str("> "));
    let bufsock = *(bufsock.flush);
    loop_m(
        bufsock, |bufsock|
        //let _ = *(lift $ eprintln ("recv start"));
        let (line, bufsock) = *(bufsock.read_line);
        eval _usleep(1000);
        //let _ = *(lift $ eprintln ("read_line end: size=" + line.get_size.to_string));
        if line.get_size == 0 {
            let _ = *(lift $ eprintln ("Echo session end"));
            break_m $ ()
        };
        let _ = *(lift $ eprint("> " + line));
        //let _ = *(lift $ eprintln ("send start"));
        let bufsock = *(bufsock.write_str(line));
        let bufsock = *(bufsock.write_str("> "));
        let bufsock = *(bufsock.flush);
        //let _ = *(lift $ eprintln ("send end"));
        continue_m $ bufsock
    )
);

server_test: IO ();
server_test = (
    do {
        let _ = *(lift $ eprintln ("Server started"));
        let server_host_port = "127.0.0.1:2525";
        let socket = *(listen_tcp_server(server_host_port, 10));
        let _ = *(lift $ eprintln ("Listening on " + server_host_port));
        loop_m(
            (), |_|
            let _ = *(lift $ eprintln ("Accepting connections"));
            let (accepted_socket, addr) = *(socket.accept);
            let _ = *(lift $ eprintln ("Accepted new connection: addr=" + addr.to_string));
            //let _ = *echo(accepted_socket);
            if false {
                let _ = *echo(accepted_socket);
                continue_m $ ()
            } else {
                let _ = *(lift $ eprintln ("creating task"));
                let task_policy = TaskPolicy::run_after_destructed.bit_or(
                    TaskPolicy::on_dedicated_thread
                );
                let task = *AsyncIOTask::make(
                    task_policy,
                    echo(accepted_socket)
                    .try(|err| eprintln("error: " + err))
                ).lift;
                let _ = *(lift $ eprintln ("creating task done"));
                continue_m $ ()
            }
        )
    }
    .try(|err| eprintln (err))
);

main: IO ();
main = server_test;
