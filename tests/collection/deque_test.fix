module Main;

import Debug;

import Deque;
import StringEx;
import UnitTest;

test_get_size_ok: (Array I64, Array I64, I64) -> TestCase;
test_get_size_ok = |(front, back, expected)| (
    let testname = "test_get_size_ok (" + front.to_string + "," + back.to_string + ")";
    make_test(testname) $ |_|
    let q = Deque { front: front, back: back };
    let actual = q.get_size;
    assert_equal("equal", expected, actual)
);

test_get_size: TestCase;
test_get_size = (
    [
        test_get_size_ok $ ([], [], 0),
        test_get_size_ok $ ([1], [], 1),
        test_get_size_ok $ ([2, 1], [], 2),
        test_get_size_ok $ ([], [3], 1),
        test_get_size_ok $ ([2, 1], [3], 3),
        TestCase::empty
    ]
    .run_tests
);

test_get_front_ok: (Array I64, Array I64, Option I64) -> TestCase;
test_get_front_ok = |(front, back, expected)| (
    let testname = "test_get_front_ok (" + front.to_string + "," + back.to_string + ")";
    make_test(testname) $ |_|
    let q = Deque { front: front, back: back };
    let actual = q.get_front;
    assert_equal("equal", expected, actual)
);

test_get_front: TestCase;
test_get_front = (
    [
        test_get_front_ok $ ([], [], none()),
        test_get_front_ok $ ([1], [], some(1)),
        test_get_front_ok $ ([], [1], some(1)),
        test_get_front_ok $ ([2, 1], [], some(1)),
        test_get_front_ok $ ([], [1, 2], some(1)),
        test_get_front_ok $ ([1], [2], some(1)),
        TestCase::empty
    ]
    .run_tests
);

test_get_back_ok: (Array I64, Array I64, Option I64) -> TestCase;
test_get_back_ok = |(front, back, expected)| (
    let testname = "test_get_back_ok (" + front.to_string + "," + back.to_string + ")";
    make_test(testname) $ |_|
    let q = Deque { front: front, back: back };
    let actual = q.get_back;
    assert_equal("equal", expected, actual)
);

test_get_back: TestCase;
test_get_back = (
    [
        test_get_back_ok $ ([], [], none()),
        test_get_back_ok $ ([1], [], some(1)),
        test_get_back_ok $ ([], [1], some(1)),
        test_get_back_ok $ ([2, 1], [], some(2)),
        test_get_back_ok $ ([], [1, 2], some(2)),
        test_get_back_ok $ ([1], [2], some(2)),
        TestCase::empty
    ]
    .run_tests
);

test_push_front_ok: ((Array I64, Array I64), I64, (Array I64, Array I64)) -> TestCase;
test_push_front_ok = |((front, back), value, (expected_front, expected_back))| (
    let testname = "test_push_front_ok (" + front.to_string + "," + back.to_string + ")";
    make_test(testname) $ |_|
    let q = Deque { front: front, back: back };
    let q = q.push_front(value);
    let _ = *assert_equal("front", expected_front, q.@front);
    let _ = *assert_equal("back", expected_back, q.@back);
    pure()
);

test_push_front: TestCase;
test_push_front = (
    [
        test_push_front_ok $ (([], []), 1, ([1], [])),
        test_push_front_ok $ (([2], []), 1, ([2, 1], [])),
        test_push_front_ok $ (([], [2]), 1, ([1], [2])),
        test_push_front_ok $ (([2], [3]), 1, ([2, 1], [3])),
        test_push_front_ok $ (([], [2, 3]), 1, ([1], [2, 3])),
        TestCase::empty
    ]
    .run_tests
);

test_push_back_ok: ((Array I64, Array I64), I64, (Array I64, Array I64)) -> TestCase;
test_push_back_ok = |((front, back), value, (expected_front, expected_back))| (
    let testname = "test_push_back_ok (" + front.to_string + "," + back.to_string + ")";
    make_test(testname) $ |_|
    let q = Deque { front: front, back: back };
    let q = q.push_back(value);
    let _ = *assert_equal("front", expected_front, q.@front);
    let _ = *assert_equal("back", expected_back, q.@back);
    pure()
);

test_push_back: TestCase;
test_push_back = (
    [
        test_push_back_ok $ (([], []), 1, ([], [1])),
        test_push_back_ok $ (([1], []), 2, ([1], [2])),
        test_push_back_ok $ (([], [1]), 2, ([], [1, 2])),
        test_push_back_ok $ (([1], [2]), 3, ([1], [2, 3])),
        test_push_back_ok $ (([], [1, 2]), 3, ([], [1, 2, 3])),
        TestCase::empty
    ]
    .run_tests
);

test_pop_front_ok: ((Array I64, Array I64), (Array I64, Array I64)) -> TestCase;
test_pop_front_ok = |((front, back), (expected_front, expected_back))| (
    let testname = "test_pop_front_ok (" + front.to_string + "," + back.to_string + ")";
    make_test(testname) $ |_|
    let q = Deque { front: front, back: back };
    let q = q.pop_front;
    let _ = *assert_equal("front", expected_front, q.@front);
    let _ = *assert_equal("back", expected_back, q.@back);
    pure()
);

test_pop_front: TestCase;
test_pop_front = (
    [
        test_pop_front_ok $ (([], []), ([], [])),
        test_pop_front_ok $ (([1], []), ([], [])),
        test_pop_front_ok $ (([], [1]), ([], [])),
        test_pop_front_ok $ (([2, 1], []), ([2], [])),
        test_pop_front_ok $ (([1], [2]), ([], [2])),
        test_pop_front_ok $ (([], [1, 2]), ([2], [])),
        test_pop_front_ok $ (([3, 2, 1], []), ([3, 2], [])),
        test_pop_front_ok $ (([2, 1], [3]), ([2], [3])),
        test_pop_front_ok $ (([1], [2, 3]), ([], [2, 3])),
        test_pop_front_ok $ (([], [1, 2, 3]), ([3, 2], [])),
        TestCase::empty
    ]
    .run_tests
);

test_pop_back_ok: ((Array I64, Array I64), (Array I64, Array I64)) -> TestCase;
test_pop_back_ok = |((front, back), (expected_front, expected_back))| (
    let testname = "test_pop_back_ok (" + front.to_string + "," + back.to_string + ")";
    make_test(testname) $ |_|
    let q = Deque { front: front, back: back };
    let q = q.pop_back;
    let _ = *assert_equal("front", expected_front, q.@front);
    let _ = *assert_equal("back", expected_back, q.@back);
    pure()
);

test_pop_back: TestCase;
test_pop_back = (
    [
        test_pop_back_ok $ (([], []), ([], [])),
        test_pop_back_ok $ (([1], []), ([], [])),
        test_pop_back_ok $ (([], [1]), ([], [])),
        test_pop_back_ok $ (([2, 1], []), ([], [1])),
        test_pop_back_ok $ (([1], [2]), ([1], [])),
        test_pop_back_ok $ (([], [1, 2]), ([], [1])),
        test_pop_back_ok $ (([3, 2, 1], []), ([], [1, 2])),
        test_pop_back_ok $ (([2, 1], [3]), ([2, 1], [])),
        test_pop_back_ok $ (([1], [2, 3]), ([1], [2])),
        test_pop_back_ok $ (([], [1, 2, 3]), ([], [1, 2])),

        test_pop_front_ok $ (([], []), ([], [])),
        test_pop_front_ok $ (([1], []), ([], [])),
        test_pop_front_ok $ (([], [1]), ([], [])),
        test_pop_front_ok $ (([2, 1], []), ([2], [])),
        test_pop_front_ok $ (([1], [2]), ([], [2])),
        test_pop_front_ok $ (([], [1, 2]), ([2], [])),
        test_pop_front_ok $ (([3, 2, 1], []), ([3, 2], [])),
        test_pop_front_ok $ (([1], [2, 3]), ([], [2, 3])),
        test_pop_front_ok $ (([], [1, 2, 3]), ([3, 2], [])),
        TestCase::empty
    ]
    .run_tests
);

test_reverse_array_ok: (Array I64, Array I64) -> TestCase;
test_reverse_array_ok = |(arr, expected)| (
    let testname = "test_reverse_array_ok (" + arr.to_string + ")";
    make_test(testname) $ |_|
    let actual = arr._reverse_array;
    assert_equal("equal", expected, actual)
);

test_reverse_array: TestCase;
test_reverse_array = (
    [
        test_reverse_array_ok $ ([], []),
        test_reverse_array_ok $ ([1], [1]),
        test_reverse_array_ok $ ([1, 2], [2, 1]),
        test_reverse_array_ok $ ([1, 2, 3], [3, 2, 1]),
        TestCase::empty
    ]
    .run_tests
);

main: IO ();
main = (
    [
        test_get_size,
        test_get_front,
        test_get_back,
        test_push_front,
        test_push_back,
        test_pop_front,
        test_pop_back,
        test_reverse_array,
        TestCase::empty
    ]
    .run_test_driver
);
