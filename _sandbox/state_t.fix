module Sandbox.StateT;

type [m: *->*] StateT m s a = unbox struct {
    data: s -> m (a, s)
};

namespace StateT {
    // Creates a State monad from a function.
    make_state_monad: [m: Monad] (s -> m (a, s)) -> StateT m s a;
    make_state_monad = |f| StateT { data: f };

    // Runs a State monad with the supplied initial state.
    run_state: [m: Monad] s -> StateT m s a -> m (a, s);
    run_state = |s, ma| (ma.@data)(s);

    // A State monad that returns the current state as a value.
    get_state: [m: Monad] StateT m s s;
    get_state = make_state_monad $ |s| pure $ (s, s);

    // Creates a State monad of the specified state.
    put_state: [m: Monad] s -> StateT m s ();
    put_state = |s| make_state_monad $ |_| pure $ ((), s);

    // Creates a State monad that changes the state with the specified function.
    mod_state: [m: Monad] (s -> s) -> StateT m s ();
    mod_state = |f| put_state $ f $ *get_state;

    // Converts an underlying monad to a State monad.
    to_state: [m: Monad] m a -> StateT m s a;
    to_state = |ma| (
        make_state_monad $ |s|
        let a = *ma;
        pure $ (a, s)
    );

//    // Lifts the underlying monad to an another monad.
//    lift_state: [m: Monad, m2: Monad] (m (a, s) -> m2 (a, s)) -> StateT m s a -> StateT m2 s a;
//    lift_state = |lift, ma| (
//        make_state_monad $ |s|
//        ma.run_state(s).lift
//    );
}

impl [m: Monad] StateT m s: Functor {
    map = |f, ma| make_state_monad $ |s| (
        let (a, ss) = *ma.run_state(s);
        pure $ (f(a), ss)
    );
}

impl [m: Monad] StateT m s: Monad
{
    pure = |a| StateT { data: |s| pure((a, s)) };
    bind = |f, ma| StateT { data: |s|
        let (a,s) = *ma.run_state(s);
        f(a).run_state(s)
    };
}

//------------------------------------------------------------------------

type Identity a = unbox struct {
    data: a
};

namespace Identity {
    get: Identity a -> a;
    get = @data;
}

impl Identity: Functor {
    map = |f, a| Identity { data : f(a) };
}

impl Identity: Monad {
    pure = |a| Identity { data : a };
    bind = |f, ma| f(ma.@data);
}

//------------------------------------------------------------------------
/*
increment_counter: [m: Monad] StateT m I64 ();
increment_counter = do {
    let counter = *get_state;
    put_state(counter + 1)
};

print_counter: StateT IO I64 ();
print_counter = do {
    let counter = *get_state;
    lift $ println(counter.to_string)
};

main: IO ();
main = (
    let f = inc_counter;
    let action_io = do {
        eval *print_counter;
        eval *increment_counter;
        eval *print_counter;
        pure()
    };
    let ((), counter) = *action_io.run_state(3);
    eval *println("counter="+counter.to_string);
    pure()
);
*/
