module Main;

import RBTree;
import StringEx;

namespace TreeMap {
    trait TreeMapKey = RBNodeElem;

    // TODO: not to use Option
    type Entry k v = (k, Option v);

    namespace Entry {
        make: k -> v -> Entry k v;
        make = |k, v| (k, some(v));

        from_key: k -> Entry k v;
        from_key = |k| (k, none());

        _less_than: [k: LessThan] Entry k v -> Entry k v -> Bool;
        _less_than = _lift_lt(RBNode::_less_than);

        _lift_lt: (k -> k -> Bool) -> Entry k v -> Entry k v -> Bool;
        _lift_lt = |less_than, e1, e2| (
            less_than(e1.@0, e2.@0)
        );
        
    }

    type TreeMap k v = unbox struct {
        root: RBNode (Entry k v),
        less_than: Entry k v -> Entry k v -> Bool
    };

    make: [k: LessThan, k: TreeMapKey] () -> TreeMap k v;
    make = |_| (
        make_lt(RBNode::_less_than)
    );

    make_lt: [k: TreeMapKey] (k -> k -> Bool) -> TreeMap k v;
    make_lt = |less_than| (
        TreeMap {
            root: RBNode::empty(),
            less_than: _lift_lt(less_than)
        }
    );
    
    insert: [k: TreeMapKey] k -> v -> TreeMap k v -> TreeMap k v;
    insert = |k, v, ts| (
       ts.mod_root(insert_lt((k, v), ts.@less_than))
    );

    insert_all: [k: TreeMapKey] Iterator (Entry k v) -> TreeMap k v -> TreeMap k v;
    insert_all = |iter, ts| (
        iter.fold(
            ts, |ts, ent|
            ts.mod_root(insert_lt(ent, ts.@less_than))
        )
    );

    erase: [k: TreeMapKey] k -> TreeMap k v -> TreeMap k v;
    erase = |k, ts| (
       ts.mod_root(remove_lt(Entry::from_key(k), ts.@less_than))
    );

    erase_all: [k: TreeMapKey] Iterator k -> TreeMap k v -> TreeMap k v;
    erase_all = |iter, ts| (
        iter.fold(
            ts, |ts, k|
            ts.erase(k)
        )
    );

    is_empty: [k: TreeMapKey] TreeMap k v -> Bool;
    is_empty = |ts| (
        ts.@root.is_empty
    );

    contains_key: [k: TreeMapKey] k -> TreeMap k v -> Bool;
    contains_key = |k, ts| (
        let (path, node) = ts.lookup(Entry::from_key(k), ts.@less_than);
        !node.is_empty
    );

    find: [k: TreeMapKey] k -> TreeMap k v -> Option v;
    find = |k, ts| (
        let (path, node) = ts.lookup(Entry::from_key(k), ts.@less_than);
        if node.is_empty { none() };
        let (left, elem, right) = node.get_triplet;
        elem.@1     // must be some()
    );

    to_iter: [k: TreeMapKey] TreeMap k v -> Iterator (k, v);
    to_iter = |ts| (
        ts.@root.to_iter.map(|e| (e.@0, e.@1.as_some))
    );

    from_iter_lt: [k: TreeMapKey] (k -> k -> Bool) -> Iterator (k, v) -> TreeMap k v;
    from_iter_lt = |less_than, iter| (
        let iter = iter.map(|(k,v)| Entry::make(k, v));
        let less_than = _lift_lt(less_than);
        TreeMap {
            root: RBNode::from_iter_lt(less_than, iter),
            less_than: less_than
        }
    );

    from_iter: [k: LessThan, k: TreeMapKey] Iterator (k, v) -> TreeMap k v;
    from_iter = |iter| (
        TreeMap::from_iter_lt(RBNode::_less_than, iter) 
    );
}

impl [k: TreeMapKey, v: ToString] TreeMap k v: ToString {
    to_string = |ts| (
        "TreeMap{" + ts.to_iter.map(to_string).join(",") + "}"
    );
}

main: IO ();
main = (
    let ts = TreeMap::from_iter(Iterator::range(0, 10).map(|k| (k, k*2)));
    let _ = *println(ts.to_string);
    let ts = ts.erase_all(Iterator::range(0, 10));
    let _ = *println(ts.to_string);
    pure() 
);
