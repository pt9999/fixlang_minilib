module ModularTest;

import Math;

import Minilib.Math.Modular;
import Minilib.Math.Types;
import Minilib.Testing.UnitTest;
import Minilib.Text.StringEx;

to_tuple: Modular a -> (a, a);
to_tuple = |m| (m.@value, m.@modulus);

test_make: TestCase;
test_make = (
    make_table_test("test_make",
        [
            ((1, 6), (1, 6)),
            ((7, 6), (1, 6)),
            ((-11, 6), (-5, 6)),
            ((1, -6), (1, -6)),
            ((7, -6), (1, -6)),
            ((-11, -6), (-5, -6)),
            ((1, 0), (1, 0))
        ],
        |(a, expected)|
        let m = Modular::make(a.@0, a.@1);
        assert_equal("expected", expected, m.to_tuple)
    )
);

test_modulo: TestCase;
test_modulo = (
    make_table_test("test_modulo",
        [
            ((1, 6), (1, 6)),
            ((7, 6), (1, 6)),
            ((-11, 6), (-5, 6)),
            ((1, -6), (1, -6)),
            ((7, -6), (1, -6)),
            ((-11, -6), (-5, -6)),
            ((1, 0), (1, 0))
        ],
        |(a, expected)|
        let m = modulo(a.@0, a.@1);
        assert_equal("expected", expected, m.to_tuple)
    )
);

test_get_modulus: TestCase;
test_get_modulus = (
    make_table_test("test_get_modulus",
        [
            ((1,6), (2,6), 6),
            ((1,6), (2,0), 6),
            ((1,0), (2,6), 6),
            ((1,0), (2,0), 0)
        ],
        |(a, b, expected)|
        let ma = Modular::make(a.@0, a.@1);
        let mb = Modular::make(b.@0, b.@1);
        assert_equal("expected", expected, _get_modulus(ma,mb))
    )
);

test_nonneg: TestCase;
test_nonneg = (
    make_table_test("test_nonneg",
        [
            ((1,6), (1,6)),
            ((14,6), (2,6)),
            ((-1,6), (5,6)),
            ((-14,6), (4,6)),
            ((1,-6), (1,6)),
            ((14,-6), (2,6)),
            ((-1,-6), (5,6)),
            ((-14,-6), (4,6)),
            ((1,0), (1,0)),
            ((-1,0), (-1,0))
        ],
        |(a, expected)|
        let ma = Modular::make(a.@0, a.@1);
        let ma = ma.nonneg;
        assert_equal("expected", expected, ma.to_tuple)
    )
);

test_to_string: TestCase;
test_to_string = (
    make_table_test("test_to_string",
        [
            ((1,6), "1"),
            ((14,6), "2"),
            ((-1,6), "-1"),
            ((-14,6), "-2"),
            ((0,0), "0")
        ],
        |(a, expected)|
        let ma = Modular::make(a.@0, a.@1);
        assert_equal("expected", expected, ma.to_string)
    )
);

test_eq: TestCase;
test_eq = (
    make_table_test("test_eq",
        [
            ((1,6), (1,6), true),
            ((14,6), (2,6), true),
            ((14,6), (3,6), false),
            ((14,0), (2,6), true),
            ((-1,6), (5,6), true),
            ((-14,6), (-8,6), true),
            ((7,6), (1,0), true),
            ((4,6), (1,0), false),
            ((1,0), (0,0), false),
            ((0,0), (0,0), true)
        ],
        |(a, b, expected)|
        let ma = Modular::make(a.@0, a.@1);
        let mb = Modular::make(b.@0, b.@1);
        assert_equal("eq", expected, ma == mb)
    )
);

test_zero: TestCase;
test_zero = (
    make_test("test_zero") $ |_|
    assert_equal("expected", (0, 0), zero.to_tuple)
);

test_one: TestCase;
test_one = (
    make_test("test_one") $ |_|
    assert_equal("expected", (1, 0), one.to_tuple)
);

test_neg: TestCase;
test_neg = (
    make_table_test("test_neg",
        [
            ((14,6), (-2,6)),
            ((-14,6), (2,6)),
            ((14,-6), (-2,-6)),
            ((-14,-6), (2,-6)),
            ((1,0), (-1,0)),
            ((-1,0), (1,0)),
            ((0,0), (0,0))
        ],
        |(a, expected)|
        let ma = Modular::make(a.@0, a.@1);
        assert_equal("expected", expected, (-ma).to_tuple)
    )
);

test_add: TestCase;
test_add = (
    make_table_test("test_add",
        [
            ((2,6), (4,6), (0,6)),
            ((14,6), (15,6), (5,6)),
            ((-14,6), (-15,6), (-5,6)),
            ((-17,6), (2,6), (-3,6)),
            ((17,6), (-2,6), (3,6)),
            ((2,-6), (4,-6), (0,-6)),
            ((14,-6), (15,-6), (5,-6)),
            ((-14,-6), (-15,-6), (-5,-6)),
            ((-17,-6), (2,-6), (-3,-6)),
            ((2,0), (-5,0), (-3,0)),
            ((0,0), (0,0), (0,0))
        ],
        |(a, b, expected)|
        let ma = Modular::make(a.@0, a.@1);
        let mb = Modular::make(b.@0, b.@1);
        assert_equal("eq", expected, (ma + mb).to_tuple)
    )
);

test_sub: TestCase;
test_sub = (
    make_table_test("test_sub",
        [
            ((2,6), (-4,6), (0,6)),
            ((14,6), (-15,6), (5,6)),
            ((-14,6), (15,6), (-5,6)),
            ((-17,6), (-2,6), (-3,6)),
            ((17,6), (2,6), (3,6)),
            ((2,-6), (-4,-6), (0,-6)),
            ((14,-6), (-15,-6), (5,-6)),
            ((-14,-6), (15,-6), (-5,-6)),
            ((-17,-6), (-2,-6), (-3,-6)),
            ((2,0), (5,0), (-3,0)),
            ((0,0), (0,0), (0,0))
        ],
        |(a, b, expected)|
        let ma = Modular::make(a.@0, a.@1);
        let mb = Modular::make(b.@0, b.@1);
        assert_equal("eq", expected, (ma - mb).to_tuple)
    )
);

test_mul_div: TestCase;
test_mul_div = (
    make_table_test("test_mul_div",
        [
            ((2,7), (4,7), (1,7)),
            ((2,7), (-4,7), (-1,7)),
            ((8,7), (18,7), (4,7)),
            ((-8,7), (18,7), (-4,7)),
            ((14,7), (15,7), (0,7)),
            ((2,-7), (4,-7), (1,-7)),
            ((2,-7), (-4,-7), (-1,-7)),
            ((8,-7), (18,-7), (4,-7)),
            ((-8,-7), (18,-7), (-4,-7)),
            ((14,-7), (15,-7), (0,-7)),
            ((1,0), (1,0), (1,0))
        ],
        |(a, b, c)|
        let ma = Modular::make(a.@0, a.@1);
        let mb = Modular::make(b.@0, b.@1);
        let mc = Modular::make(c.@0, c.@1);
        let _ = *assert_equal("c == a * b", mc, ma * mb);
        let _ = *if mb == zero { pure() } else {
            assert_equal("a == c / b", ma, mc / mb)
        };
        let _ = *if ma == zero { pure() } else {
            assert_equal("b == c / a", mb, mc / ma)
        };
        pure()
    )
);


main: IO ();
main = (
    [
        test_make,
        test_modulo,
        test_get_modulus,
        test_nonneg,
        test_to_string,
        test_eq,
        test_zero,
        test_one,
        test_neg,
        test_add,
        test_sub,
        test_mul_div,
        TestCase::empty
    ]
    .run_test_driver
);


