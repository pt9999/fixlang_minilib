module Main;

//import Debug;

import Minilib.Crypto.Cert.Asn1;
import Minilib.Crypto.Cert.Asn1Der;
import Minilib.Crypto.Cert.CACertificates;
import Minilib.Crypto.Cert.CRL;
import Minilib.Crypto.Cert.X509;
import Minilib.Crypto.Cert.X509Path;
import Minilib.Crypto.Cert.X509Policy;
import Minilib.Crypto.Cert.X509DnsName;
import Minilib.Crypto.Cert.Pem;
import Minilib.Encoding.Binary;
import Minilib.Monad.State;
import Minilib.Monad.Error;
import Minilib.Monad.Trans;
import Minilib.Monad.FunctorM;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;
import Minilib.Common.TimeEx;
import Minilib.Testing.UnitTest;


perf_certificates_pem: Path -> IOFail (Array Certificate);
perf_certificates_pem = |path| (
    let contents = *read_file_string(path);
    let _ = *timeit(
        "parse", |_|
        let _: Result ErrMsg () = do {
            let entries = *parse_pem_entries(contents);
            let certificates: Array Certificate = *entries.map_m(|entry|
                from_bytes(entry.@bytes)
            );
            pure()
        };
        ()
    ).lift;
    pure $ []
);


test_dump_triplets: IOFail ();
test_dump_triplets = (
    let path = Path::parse(".local/tmp.cert_0.cer").as_some;
    let path = Path::parse(".local/DigiCertGlobalRootG2.crl").as_some;
    let bytes = *read_file_bytes(path);
    //let bytes: Array U8 = *from_string_hex("3010820e7777772e676f6f676c652e636f6d").from_result;
    let res: Result ErrMsg String = dump_der_triplets(bytes);
    //let res: Result ErrMsg String = ok $ "xxx";
    let text: String = *res.from_result;
    //let text: String = *pure("xxx");
    println(text).lift
);

test_cert_path: IOFail ();
test_cert_path = (
    let certs = *Iterator::range(0, 3).to_array.map_m(|i|
        let path = Path::parse((i,).format(".local/tmp.cert_{}.cer")).as_some;
        read_certificate_from_file(path)
    );
    let ca_certs = *CACertificates::make;
    let path = *CertificatePath::make(certs, ca_certs);
    println(path.to_string).lift
);

print_subject_alt_name: Certificate -> IOFail ();
print_subject_alt_name = |certificate| (
    let extn = certificate.find_extension(match_name("id-ce-subjectAltName"));
    if extn.is_none {
        println("subjectAltName not found").lift
    };
    let bytes = extn.as_some.@extn_value.to_bytes;
    //eval *println("bytes="+bytes.to_string_hex).lift;
    let subjectAltName: SubjectAltName = *decode_der_from_bytes(bytes).from_result;
    println("subjectAltName=" + subjectAltName.to_string).lift
);

print_certificate_policies: Certificate -> IOFail ();
print_certificate_policies = |certificate| (
    let opt = certificate.find_certificate_policies;
    if opt.is_none { pure () };
    let policies = opt.as_some;
    println(policies.to_string).lift
);

test_read_certificates_from_file: IOFail ();
test_read_certificates_from_file = (
    let path = Path::parse(".local/tmp.cert_0.cer").as_some;
    //let path = Path::parse("/etc/ssl/certs/ca-certificates.crt").as_some;
    //let path = Path::parse("/etc/ssl/certs/Amazon_Root_CA_3.pem").as_some;
    let path = Path::parse("/etc/ssl/certs/DigiCert_Global_Root_G2.pem").as_some;

    let args = *IO::get_args.lift;
    let path = if args.get_size >= 2 { Path::parse(args.@(1)).as_some } else { path };

    let certificates = *read_certificates_from_file(path);
    certificates.foreach_m(|certificate|
        eval *println(certificate.to_string).lift;
        //eval *print_subject_alt_name(certificate);
        eval *print_certificate_policies(certificate);
        //eval *verify_certificate_identity(certificate, "example.com").from_result;
        println("").lift
    )
);

test_read_crl_from_file: IOFail ();
test_read_crl_from_file = (
    let path = Path::parse(".local/DigiCertGlobalRootG2.crl").as_some;
    let path = Path::parse(".local/DigiCertGlobalG2TLSRSASHA2562020CA1-1.crl").as_some;
    let path = Path::parse(".local/r2m03.crl").as_some;
    let bytes = *read_file_bytes(path);
    let cert_list: CRL::CertificateList = *decode_der_from_bytes(bytes).from_result;
    eval debug_eprintln("decode success");
    eval *println(cert_list.to_string).lift;
    //eval *timeit("cert_list.to_string", |_| let s = cert_list.to_string; ()).lift;
    pure()
);

main: IO ();
main = (
    do {
        //eval *test_dump_triplets;
        //eval *test_cert_path;
        eval *test_read_certificates_from_file;
        //eval *test_read_crl_from_file;
        pure()
    }.try(eprintln)
);
