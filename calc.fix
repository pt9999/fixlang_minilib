module Main;

import Character;
import Debug;

type Value = I64;

// box を書かないと stack overflow になる
type Expr = box union {
    ex_value: Value,
    ex_add: (Expr, Expr),
    ex_sub: (Expr, Expr),
    ex_mul: (Expr, Expr),
    ex_div: (Expr, Expr)
};

skip_whitespaces: Iterator U8 -> Iterator U8;
skip_whitespaces = |itor| (
    let res = itor.advance;
    if res.is_none {
        itor
    };
    let (ch, next) = res.as_some;
    if (not(is_space(ch))) {
        itor
    };
    skip_whitespaces (next)
);


take_while: (Array a, Iterator a) -> (a -> Bool) -> (Array a, Iterator a);
take_while = |(arr, itor), filter| (
    loop((arr, itor), |(arr, itor)| (
        let next = itor.advance;
        if next.is_none {
            break $ (arr, itor)
        };
        let (a, next) = next.as_some;
        if (not (filter(a))) {
            break $ (arr, itor)
        };
        let arr = arr.push_back (a);
        continue $ (arr, next)
    ))
);

impl Array U8: ToString {
    to_string = |arr| String::_unsafe_from_c_str(arr.push_back(0_U8));
}

impl Iterator U8: ToString {
    to_string = |itor| itor.to_array.to_string;
}


parse_value: Iterator U8 -> Result ErrMsg (Expr, Iterator U8);
parse_value = |itor| (
    let itor = skip_whitespaces (itor);
    let (arr, itor) = take_while(([], itor), is_digit);
    let str = arr.to_string;
    // eval debug_println ("str=" + str+" itor="+itor.to_string);
    let res : Result ErrMsg I64 = from_string(str);
    if res.is_err {
        err (res.as_err.to_string + ": `" + str + "`")
    };
    let value : I64 = res.as_ok;
    ok((ex_value(value), itor))
);

parse_mul_div: Iterator U8 -> Result ErrMsg (Expr, Iterator U8);
parse_mul_div = |itor| (
    let (expr, itor) = *parse_value (itor);
    let itor = skip_whitespaces (itor);
    let next = itor.advance;
    if next.is_none {
        ok((expr, itor))
    };
    let (op, next) = next.as_some;
    if (op != '*' && op != '/') {
        ok((expr, itor))
    };
    // これでは右結合になってしまう。。。
    let (expr2, itor) = *parse_mul_div(next);
    if (op == '*') {
        ok((ex_mul((expr, expr2)), itor))
    } else {
        ok((ex_div((expr, expr2)), itor))
    }
);

parse_add_sub: Iterator U8 -> Result ErrMsg (Expr, Iterator U8);
parse_add_sub = |itor| (
    let (expr, itor) = *parse_mul_div (itor);
    let itor = skip_whitespaces (itor);
    let next = itor.advance;
    if next.is_none {
        ok((expr, itor))
    };
    let (op, next) = next.as_some;
    if (op != '+' && op != '-') {
        ok((expr, itor))
    };
    // これでは右結合になってしまう。。。
    let (expr2, itor) = *parse_add_sub(next);
    if (op == '+') {
        ok((ex_add((expr, expr2)), itor))
    } else {
        ok((ex_sub((expr, expr2)), itor))
    }
);

evaluate: Expr -> Value;
evaluate = |expr| (
    if expr.is_ex_add {
        let (a, b) = expr.as_ex_add;
        evaluate(a) + evaluate(b)
    };
    if expr.is_ex_sub {
        let (a, b) = expr.as_ex_sub;
        evaluate(a) - evaluate(b)
    };
    if expr.is_ex_mul {
        let (a, b) = expr.as_ex_mul;
        evaluate(a) * evaluate(b)
    };
    if expr.is_ex_div {
        let (a, b) = expr.as_ex_div;
        evaluate(a) / evaluate(b)
    };
    expr.as_ex_value
);

calc: String -> String;
calc = |line| (
    let res = parse_add_sub (line.get_bytes.to_iter);
    if res.is_err {
        "Error: " + res.as_err.to_string
    };
    let (expr, itor) = res.as_ok;
    let value = evaluate(expr);
    value.to_string
);

flush : IOHandle -> IOFail ();
flush = |handle| (
    let res = CALL_C[I32 fflush(Ptr), handle._file_ptr];
    if res < 0_I32 { 
        throw("flush failed!: some error occurred in fflush.")
    };
    pure()
);

main_loop : () -> IOFail ();
main_loop = |_| (
    let _ = *write_string(stdout, "Calc ver 0.10\n");
    loop_m ((), |_| 
        let _ = *write_string(stdout, ">> ");
        let _ = *flush(stdout);
        let line = *read_line(IO::stdin);
        if (line == "") {
            break_m $ ()
        };
        let line = calc(line) + "\n";
        let _ = *write_string (IO::stdout, line);
        continue_m $ ()
    )
);

main : IO ();
main = (
    let iofail = main_loop();
    iofail.try(|errmsg| eprintln(errmsg))
);