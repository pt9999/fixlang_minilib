// https://en.wikipedia.org/wiki/Heapsort

module Main;


heap_sort: (a -> a -> Bool) -> Array a -> Array a;
heap_sort = |less_than, a| (
    let a = a.heapify (less_than, a.get_size);
    loop((a, a.get_size), |(a, end)|
        if (end <= 1) {
            break $ a
        };
        let end = end - 1;
        let a = a.swap(0, end);
        let a = a.sift_down(less_than, 0, end);
        continue $ (a, end)
    )
);

heapify: (a -> a -> Bool) -> I64 -> Array a -> Array a;
heapify = |less_than, count, a| (
    let start = i_parent (count + 1);
    loop((start, a), |(start, a)|
        if (start <= 0) {
            break $ a
        };
        let start = start - 1;
        let a = a.sift_down(less_than, start, count);
        continue $ (start, a)
    )
);

sift_down: (a -> a -> Bool) -> I64 -> I64 -> Array a -> Array a;
sift_down = |less_than, root, end, a| (
    loop((root, a), |(root, a)|
        if (i_left_child (root) >= end) {
            break $ a
        };
        let child = i_left_child (root);
        let child = 
            if child + 1 < end && less_than(a.@(child), a.@(child + 1)) {
                child + 1
            } else { 
                child
            };
        if less_than(a.@(root), a.@(child)) {
            let a = a.swap(root, child);
            continue $ (child, a)
        } else {
            break $ a
        }
    )    
);

swap: I64 -> I64 -> Array a -> Array a;
swap = |i, j, a| (
    let tmp = a.@(i);
    let a = a.set(i, a.@(j));
    let a = a.set(j, tmp);
    a
);

i_left_child: I64 -> I64;
i_left_child = |i| 2 * i + 1;

i_right_child: I64 -> I64;
i_right_child = |i| 2 * i + 2;

i_parent: I64 -> I64;
i_parent = |i| (i - 1) / 2;

test1: IO ();
test1 = (
    let a = [2, 9, 4, 7, 5, 3, 6, 1, 8];
    let a = a.heap_sort(less_than);
    println $ a.to_iter.map(to_string).join(",")
);

test_perf: IO ();
test_perf = (
    let n = 1000000;
    let array = Iterator::range(0, n).map(|i| (i * 7) % n).to_array;
    let (sorted, time) = consumed_time_while(|_|
        array.sort_by(|(a,b)| a < b)
    , ());
    let _ = *println("sort_by: time=" + time.to_string);
    let (sorted2, time) = consumed_time_while(|_|
        array.heap_sort(less_than)
    , ());
    let _ = *println("heap_sort: time=" + time.to_string);
    eval assert(|_|"equal", sorted == sorted2);
    pure()
);

main: IO ();
main = test_perf;
