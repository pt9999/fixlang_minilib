module UnitTest;

import Debug;

// TestCase is a type that counts the number of successful and failed tests.
type TestCase = Lazy (IOFail (I64, I64));

namespace TestCase {
    empty: TestCase;
    empty = |_| pure $ (0, 0);
}

// Executes all test cases and prints the results (number of passes and number of failures).
run_test_driver: Array TestCase -> IO ();
run_test_driver = |tests| (
    do {
        let _ = *(lift $ eprintln ("Starting Test Driver"));
        let test: TestCase = tests.run_tests;
        let (ok, ng) = *(test());
        let _ = *(lift $ eprintln ("OK: " + ok.to_string + " NG: " + ng.to_string));
        pure()
    }.try(|err| eprintln ("FATAL ERROR: " + err))
);

// Execute all test cases and treat the results as one test case.
run_tests: Array (TestCase) -> TestCase;
run_tests = |tests, _| (
    tests.to_iter.fold_m(
        (0, 0), |(ok_total, ng_total), test|
        let (ok, ng) = *(test());
        pure $ (ok_total + ok, ng_total + ng)
    )
);

// Create a named test case from a lazy `IOFail ()`.
make_test: String -> Lazy (IOFail ()) -> TestCase;
make_test = |test_name, body, _| (
    eval *(lift $ eprintln ("=== " + test_name + " ==="));
    do {
        let _ = *(body());
        eval *(lift $ eprintln ("[OK] " + test_name));
        pure $ (1, 0)
    }.try(|err| 
        eval *(eprintln("error: " + err));
        eval *(eprintln("[NG] " + test_name));
        pure $ (0, 1)
    ).lift
);


//-------------------------
// Assertions for testcases
//-------------------------

assert_true : String -> Bool -> IOFail ();
assert_true = |msg, b| (
    if !b {
        throw $ "assert_true: " + msg
    };
    pure()
);

assert_equal : [a: Eq, a: ToString] String -> a -> a -> IOFail ();
assert_equal = |msg, lhs, rhs| (
    if lhs != rhs {
        throw $ "assert_equal: " + msg + ": lhs="+lhs.to_string+" rhs="+rhs.to_string
    };
    pure()
);

assert_not_equal : [a: Eq, a: ToString] String -> a -> a -> IOFail ();
assert_not_equal = |msg, lhs, rhs| (
    if lhs == rhs {
        throw $ "assert_equal: " + msg + ": lhs="+lhs.to_string+" rhs="+rhs.to_string
    };
    pure()
);
