module Main;

type WrappedString = unbox struct {
    dtor: Destructor String
};

impl WrappedString: ToString {
    to_string = |ws| ws.@dtor.borrow(|str| str);
}

namespace WrappedString {
    make: String -> WrappedString;
    make = |str| (
        eval debug_eprintln("creating " + str);
        WrappedString {
            dtor: Destructor::make(str, |str|
                eval debug_eprintln("destructing " + str);
                pure $ ""
            )
        }
    );
}

// Pushes back a (wrapped) string to a Fix array.
// `rp_str_array` is a retained pointer to a Fix array.
// Returns a retained pointer to a push-backed Fix array.
push_back_string: Ptr -> Ptr -> Ptr;
push_back_string = |rp_str_array, str| (
    let str: String = _unsafe_from_c_str_ptr(str);
    let str: WrappedString = WrappedString::make(str);
    let str_array: Array WrappedString = FFI::boxed_from_retained_ptr(rp_str_array);
    let str_array = str_array.push_back(str);
    FFI::boxed_to_retained_ptr(str_array)
);
FFI_EXPORT[push_back_string, push_back_string];


main: IO ();
main = (
    let str_array: Array WrappedString = [];
    let rp_str_array: Ptr = FFI::boxed_to_retained_ptr(str_array);
    let rp_str_array = *FFI_CALL_IO[Ptr push_back_string_test(Ptr), rp_str_array];
    let str_array: Array WrappedString = FFI::boxed_from_retained_ptr(rp_str_array);
    eprintln(str_array.to_string);;
    eval str_array;
    pure()
);
