
module Main;

import Minilib.Trait.Applicative;
import Minilib.Trait.TraversableA;
//import Minilib.Functor.ZipList;
import Minilib.Testing.UnitTest;

test_array_sequence_a: TestCase;
test_array_sequence_a = (
    make_test("test_array_sequence_a") $ |_|
    let arr: Array (Option I64) = [some(1),some(2),some(3)];
    let opt: Option (Array I64) = arr.sequence_a;
    assert_equal("eq", some $ [1, 2, 3], opt);;
    let arr: Array (Option I64) = [some(1),none(),some(3)];
    let opt: Option (Array I64) = arr.sequence_a;
    assert_equal("eq", none(), opt);;
    /*
    let arr: Array (ZipList I64) = [
        ZipList::from_array $ [1, 2],
        ZipList::from_array $ [3, 4, 5]
    ];
    let zl: ZipList (Array I64) = arr.sequence_a;
    assert_equal("eq", [[1], [3]], zl.to_array);;
    */
    pure()
);

test_array_traverse_a: TestCase;
test_array_traverse_a = (
    make_test("test_array_traverse_a") $ |_|
    let arr: Array I64 = [1,2,3];
    let opt: Option (Array I64) = arr.traverse_a(|i| some(i));
    assert_equal("eq", some $ [1, 2, 3], opt);;
    let arr: Array I64 = [1,2,3];
    let opt: Option (Array I64) = arr.traverse_a(|i| if i % 2 == 0 { none() } else { some(i) });
    assert_equal("eq", none(), opt);;
    pure()
);

test_iterator_sequence_a: TestCase;
test_iterator_sequence_a = (
    make_test("test_iterator_sequence_a") $ |_|
    let iter: DynIterator (Option I64) = [some(1),some(2),some(3)].to_iter.to_dyn;
    let opt: Option (DynIterator I64) = iter.sequence_a;
    assert_equal("eq", some $ [1, 2, 3], opt.map(to_array));;
    let iter: DynIterator (Option I64) = [some(1),none(),some(3)].to_iter.to_dyn;
    let opt: Option (DynIterator I64) = iter.sequence_a;
    assert_equal("eq", none(), opt.map(to_array));;
    pure()
);

// TODO: add tests

main: IO ();
main = (
    [
        test_array_sequence_a,
        test_array_traverse_a,
        test_iterator_sequence_a,
    ]
    .run_test_driver
);
