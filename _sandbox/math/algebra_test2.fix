module Main;

import Minilib.Math.Types;
import Minilib.Math.Ring;
import Minilib.Math.Polynomial;
import Minilib.Text.StringEx;

// 円分多項式(cyclotomic polynomial)
// φn(x) = x^n - Σ φd(x) / d
// d|n, d<n
test_cyclotomic_polynomial: IO ();
test_cyclotomic_polynomial = (
    println("=== test_cyclotomic_polynomial ===");;
    let _N = 20;
    let phi: Array (Polynomial I64) = Array::fill(_N + 1, zero);
    let x: Polynomial I64 = Polynomial::make([0, 1]);
    let ipow = |n: I64, x| x.pow_by_U64(n.to_U64);
    loop_m(
        (phi, 1), |(phi, n)|
        if n > _N { break_m $ () };
        let phi_n = (
            if n == 1 { x - one };  // φ1 = x - 1
            if n == 2 { x + one };  // φ2 = x + 1
            Iterator::range(1, n)
            .filter(|d| n % d == 0)
            .fold(
                x.ipow(n) - one, |d, f|
                f / phi.@(d)
            )
        );
        println((n, phi_n).format("phi_{} = {}"));;
        let phi = phi.set(n, phi_n);
        continue_m $ (phi, n + 1)
    )
);

main: IO ();
main = (
    test_cyclotomic_polynomial;;
    pure()
);