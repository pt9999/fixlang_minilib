module Main;

import Debug;

import Minilib.Monad.Except;
import Minilib.Monad.Trans;
import Minilib.Monad.Error;
import Minilib.Monad.FunctorM;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_except_t_functor: TestCase;
test_except_t_functor = (
    make_test("test_except_t_functor") $ |_|
    let ema: ExceptT ErrMsg IO I64 = except_t $ pure $ ok(2);
    let ema = ema.map(add(1));
    let ema = ema.map(to_string);
    assert_equal("eq", ok $ "3", *ema.run_except_t.lift)
);

test_except_t_monad: TestCase;
test_except_t_monad = (
    make_test("test_except_t_monad") $ |_|
    let ema: ExceptT ErrMsg IOFail String = do {
        let i = *pure(42);
        let i = *pure(i + 1);
        pure(i.to_string)
    };
    assert_equal("eq", ok $ "43", *ema.run_except_t)
);

test_except_t_catch: TestCase;
test_except_t_catch = (
    make_test("test_except_t_monad") $ |_|
    let check_number: I64 -> ExceptT ErrMsg IOFail String = |i| (
        if i == 0 { pure("pure") };
        if i == 1 { error("error") };
        if i == 2 { lift_t $ (throw("throw") : IOFail String) };
        pure $ "undefined"
    );
    let get_result: I64 -> IOFail String = |i| (
        let ema: ExceptT ErrMsg IOFail String = check_number(i).catch(
            |err| pure $ "catch:" + err
        );
        let iof: IOFail (Result ErrMsg String) = ema.run_except_t;
        let io: IO String = iof.map(to_string).try(|errmsg| pure $ "try:" + errmsg);
        io.lift
    );

    eval *assert_equal("pattern0", "ok(pure)", *get_result(0));
    eval *assert_equal("pattern1", "ok(catch:error)", *get_result(1));
    eval *assert_equal("pattern2", "try:throw", *get_result(2));
    pure()
);

main: IO ();
main = (
    [
        test_except_t_functor,
        test_except_t_monad,
        test_except_t_catch,
    ]
    .run_test_driver
);

