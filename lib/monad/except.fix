// Except monad transformer that implements `MonadErrorIF`.
module Minilib.Monad.Except;

import Minilib.Monad.Trans;
import Minilib.Monad.Error;

// Except monad wraps an operation result (success or error).
// `e` is a type of an error if the operation fails.
// `m` is a type of an underlying monad.
// `a` is a type of an operation result if operation is successful.
type [m: *->*] ExceptT e m a = unbox struct {
    data: m (Result e a)
};

// Creates an Except monad from an operation result.
except_t: [m: *->*] m (Result e a) -> ExceptT e m a;
except_t = |ma| ExceptT { data: ma };

// Gets the operation result.
run_except_t: [m: *->*] ExceptT e m a -> m (Result e a);
run_except_t = @data;

// Maps an underlying monad and an operation result using the specified function.
map_except_t: [m: *->*, n: *->*] (m (Result e a) -> n (Result e1 b)) -> ExceptT e m a -> ExceptT e1 n b;
map_except_t = |f| (
    except_t << f << run_except_t
);

// Lifts an underlying monad to an Except monad.
lift_except_t: [m: Monad] m a -> ExceptT e m a;
lift_except_t = |ma| except_t $ ma.bind(ok >> pure);

impl [m: Functor] ExceptT e m: Functor {
    map = |f, ema| except_t $ (
        ema.run_except_t.map(map(f))
    );
}

impl [m: Monad] ExceptT e m: Monad {
    pure = |a| except_t $ pure $ pure $ a;
    bind = |f, ema| except_t $ do {
        let res = *ema.run_except_t;
        if res.is_err { pure $ err(res.as_err) };
        let emb = f(res.as_ok);
        emb.run_except_t
    };
}

impl ExceptT e: MonadTrans {
    lift_t = lift_except_t;
}

impl [m: Monad] ExceptT ErrMsg m: MonadErrorIF {
    error = |e| except_t $ pure $ err(e);
    catch = |handler, ema| (
        except_t $ do {
            let res = *ema.run_except_t;
            if res.is_ok { pure $ res };
            handler(res.as_err).run_except_t
        }
    );
}
