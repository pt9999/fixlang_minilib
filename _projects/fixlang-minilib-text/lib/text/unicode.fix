// Unicode conversions (UTF8 <-> UTF32 <-> UTF16)
//
module Minilib.Text.Unicode;

// Convert UTF8 string to UTF32 string. Please specify the output destination buffer.
utf8_to_utf32: Array U8 -> Array U32 -> Array U32;
utf8_to_utf32 = |input, output| (
    loop(
        (output, 0, 0, 0_U32), |(output, i, n, u32)|
        if i >= input.get_size {
            // FIXME: add replacement character if n != 0
            break $ output
        };
        let u8 = input.@(i);
        //eval debug_eprintln("u8=" + u8.to_string + " n="+n.to_string+ " u32="+u32.to_string);
        if u8.bit_and(128_U8) == 0_U8 { // 0xxxxxxx
            let output = output.push_back(u8.to_U32);
            continue $ (output, i + 1, 0, 0_U32)
        };
        if u8.bit_and(64_U8) == 0_U8 {  // 10xxxxxx, Byte2 .. Byte4
            // FIXME: add replacement character if n == 0
            let u32 = u32.shift_left(6_U32).bit_or(u8.bit_and(63_U8).to_U32);
            if n <= 1 {
                let output = output.push_back(u32);
                continue $ (output, i + 1, 0, 0_U32)
            };
            continue $ (output, i + 1, n - 1, u32)
        };
        if u8.bit_and(32_U8) == 0_U8 {  // 110xxxxx, Byte 1 of 2-byte char
            let u32 = u8.bit_and(31_U8).to_U32;
            continue $ (output, i + 1, 1, u32)
        };
        if u8.bit_and(16_U8) == 0_U8 {  // 1110xxxx, Byte 1 of 3-byte char
            let u32 = u8.bit_and(15_U8).to_U32;
            continue $ (output, i + 1, 2, u32)
        };
        if u8.bit_and(8_U8) == 0_U8 {  // 11110xxx, Byte 1 of 4-byte char
            let u32 = u8.bit_and(7_U8).to_U32;
            continue $ (output, i + 1, 3, u32)
        };
        // 11111xxx, invalid code
        continue $ (output, i + 1, 0, 0_U32)
    )
);

// Encode a unicode code point to UTF-8
encode_code_point_to_utf8: U32 -> Array U8 -> Array U8;
encode_code_point_to_utf8 = |code_point, buf| (
    let code_point = (
        if 0_U32 <= code_point && code_point <= /* U+10FFFF =*/ 1114111_U32 {
            code_point
        } else {
            // code point out of range: replace to the replacement character ('�')
            /* 0xFFFD = */ 65533_U32
        }
    );

    if code_point <= 127_U32 {    // U+0000 .. U+007F
        buf
        .push_back(code_point.to_U8)
    };
    if code_point <= 2047_U32 {    // U+0080 .. U+07FF
        buf
        .push_back(192_U8.bit_or(code_point.shift_right(6_U32).to_U8))
        .push_back(128_U8.bit_or(code_point.bit_and(63_U32).to_U8))
    };
    if code_point <= 65535_U32 {    // U+0800 .. U+FFFF
        buf
        .push_back(224_U8.bit_or(code_point.shift_right(12_U32).to_U8))
        .push_back(128_U8.bit_or(code_point.shift_right(6_U32).bit_and(63_U32).to_U8))
        .push_back(128_U8.bit_or(code_point.bit_and(63_U32).to_U8))
    };
    if code_point <= 1114111_U32 {  // U+10000 .. U+10FFFF
        buf
        .push_back(240_U8.bit_or(code_point.shift_right(18_U32).to_U8))
        .push_back(128_U8.bit_or(code_point.shift_right(12_U32).bit_and(63_U32).to_U8))
        .push_back(128_U8.bit_or(code_point.shift_right(6_U32).bit_and(63_U32).to_U8))
        .push_back(128_U8.bit_or(code_point.bit_and(63_U32).to_U8))
    };
    // not reach here
    buf
);

// Convert UTF32 string to UTF8 string. Please specify the output destination buffer.
utf32_to_utf8: Array U32 -> Array U8 -> Array U8;
utf32_to_utf8 = |input, output| (
    loop(
        (output, 0), |(output, i)|
        if i >= input.get_size {
            break $ output
        };
        let output = encode_code_point_to_utf8(input.@(i), output);
        continue $ (output, i + 1)
    )
);

// Convert UTF16 string to UTF32 string.
utf16_to_utf32: Array U16 -> Array U32 -> Array U32;
utf16_to_utf32 = |input, output| (
    loop(
        (output, 0, 0_U16), |(output, i, surrogate_1st)|
        if i >= input.get_size {
            break $ output
        };
        let u16 = input.@(i);
        if (/* 0xDC00 = */ 56320_U16 <= u16 && u16 <= 57343_U16 /* = 0xDFFF */) {
            if surrogate_1st == 0_U16 {
                // Decode error: add the replacement character ('�')
                let output = output.push_back(/* 0xFFFD = */ 65533_U32);
                continue $ (output, i + 1, 0_U16)
            };
            let surrogate_2nd = u16;
            let w = surrogate_1st.shift_right(6_U16).bit_and(15_U16).to_U32;
            let y = surrogate_1st.bit_and(63_U16).to_U32;
            let x = surrogate_2nd.bit_and(/* 0x03FF= */ 1023_U16).to_U32;
            let u32 = (w + 1_U32).shift_left(16_U32)
                    .bit_or(y.shift_left(10_U32))
                    .bit_or(x);
            let output = output.push_back(u32);
            continue $ (output, i + 1, 0_U16)
        };
        let output = if surrogate_1st != 0_U16 {
            // Decode error: add the replacement character ('�')
            output.push_back(/* 0xFFFD = */ 65533_U32)
        } else {
            output
        };
        if (/* 0xD800 = */ 55296_U16 <= u16 && u16 <= 56319_U16 /* = 0xDBFF */) {
            let surrogate_1st = u16;
            continue $ (output, i + 1, surrogate_1st)
        };
        let output = output.push_back(u16.to_U32);
        continue $ (output, i + 1, 0_U16)
    )
);

// Convert UTF32 string to UTF16 string.
utf32_to_utf16: Array U32 -> Array U16 -> Array U16;
utf32_to_utf16 = |input, output| (
    loop(
        (output, 0), |(output, i)|
        if i >= input.get_size {
            break $ output
        };
        let u32 = input.@(i);
        if u32 <= 65535_U32 {    // U+0000 .. U+FFFF
            let output = output.push_back(u32.to_U16);
            continue $ (output, i + 1)
        };
        if u32 <= 1114111_U32 {  // U+10000 .. U+10FFFF
            let u = u32.shift_right(16_U32).to_U16;
            let y = u32.shift_right(10_U32).bit_and(63_U32).to_U16;
            let x = u32.bit_and(1023_U32).to_U16;
            let output = output.push_back( // surrogate 1st
                /* 0xD800 = */ 55296_U16
                .bit_or((u-1_U16).shift_left(6_U16))
                .bit_or(y));
            let output = output.push_back(  // surrogate 2nd
                /* 0xDC00 = */ 56320_U16
                .bit_or(x));
            continue $ (output, i + 1)
        };
        // code point is out of range: add the replacement character ('�')
        let output = output.push_back(/* 0xFFFD = */ 65533_U16);
        continue $ (output, i + 1)
    )
);
