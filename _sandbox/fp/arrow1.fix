module Main;

trait [m: *->*] m: Functor1 {
    map1: (a -> b) -> m a -> m b;
}

trait [m: *->*] m: Monad1 {
    pure1: a -> m a;
    bind1: (a -> m b) -> m a -> m b;
}

trait a: ToString1 {
    to_string1: a -> String;
}

impl Arrow e: Functor1 {
    map1 = |f, ma| ma >> f;
}

impl Arrow e: Monad1 {
    pure1 = |a, e| a;
    bind1 = |f, ma, e| f(ma(e), e);
}

impl [a: ToString] e -> a: ToString1 {
    to_string1 = |ma| "func";
}

main: IO ();
main = (
    let ar1: Arrow I64 I32 = |i| i.to_I32;
    let ar2: Arrow I64 String = ar1.map1(to_string);
    let ar3: Arrow I64 I16 = pure1(42_I16);
    let ar4: I64 -> String = ar3.bind1(|i16, i64| i16.to_string + "," + i64.to_string);
    let p: Arrow String (IO ()) = println;
    p(ar2(11));;
    p(ar4(22));;
    p(ar4.to_string1);;
    p("Hello");;
    pure ()
);
