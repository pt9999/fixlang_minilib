module Minilib.Functor.ZipList;

import Minilib.Trait.Applicative;

type ZipList a = unbox struct {
    data: Iterator a
};

make: Iterator a -> ZipList a;
make = |iter| ZipList { data: iter };

from_iter: Iterator a -> ZipList a;
from_iter = make;

to_iter: ZipList a -> Iterator a;
to_iter = @data;

from_array: Array a -> ZipList a;
from_array = Iterator::from_array >> ZipList::from_iter;

to_array: ZipList a -> Array a;
to_array = ZipList::to_iter >> Iterator::to_array;

impl ZipList: Functor {
    map = |f, zl| ZipList::make $ zl.@data.map(f);
}

impl ZipList: Applicative {
    pure_a = |x| ZipList::make $ pure $ x;
    app_a = |fs, xs| (
        ZipList::make $
        fs.to_iter.zip(xs.to_iter).map(|(f, x)| f(x))
    );
}
