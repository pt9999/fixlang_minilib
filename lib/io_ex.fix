// IO extensions
module IOEx;

import Debug;
import StringEx;

// Creates a new file or rewrites an existing one.
// For details, see Linux manual page for [creat()](https://man7.org/linux/man-pages/man3/creat.3p.html).
creat: String -> U32 -> IOFail I32;
creat = |path, mode| (
    let _ = *pure();    // make it lazy
    let fd = path.borrow_c_str(|p_path|
        CALL_C[I32 creat(Ptr, U32), p_path, mode]
    );
    if fd == -1_I32 {
        throw("creat failed!: some error occurred in creat.")
    };
    pure $ fd
);

// Deletes a name from the filesystem and possibly the file it refers to.
// For details, see Linux manual page for [unlink()](https://man7.org/linux/man-pages/man2/unlink.2.html).
unlink: String -> IOFail ();
unlink = |path| (
    let _ = *pure();    // make it lazy
    let res = path.borrow_c_str(|p_path|
        CALL_C[I32 unlink(Ptr), p_path]
    );
    if res == -1_I32 {
        throw("unlink failed!: some error occurred in unlink.")
    };
    pure()
);

// Flushes a file stream.
// For details, see Linux manual page for [fflush()](https://man7.org/linux/man-pages/man3/fflush.3.html).
fflush : IOHandle -> IOFail ();
fflush = |handle| (
    let _ = *pure();    // make it lazy
    let res = CALL_C[I32 fflush(Ptr), handle._file_ptr];
    if res < 0_I32 {
        throw("flush failed!: some error occurred in fflush.")
    };
    pure()
);

// Associates a stream with a file descriptor.
// For details, see Linux manual page for [fdopen()](https://man7.org/linux/man-pages/man3/fdopen.3p.html).
fdopen: I32 -> String -> IOFail IOHandle;
fdopen = |fd, mode| (
    let _ = *pure();    // make it lazy
    let file_ptr = mode.borrow_c_str(|p_mode|
        CALL_C[Ptr fdopen(I32, Ptr), fd, p_mode]
    );
    if file_ptr == nullptr {
        throw("fdopen failed!: some error occurred in fdopen.")
    };
    pure $ IOHandle::from_file_ptr $ file_ptr
);


// Creates a pipe. It returns `(read_fd, write_fd)` where `read_fd` is the file descriptor of
// read-end of the pipe, and `write_fd` is the file descriptor of write-end of the pipe.
// For details, see Linux manual page for [pipe()](https://man7.org/linux/man-pages/man2/pipe.2.html).
pipe: IOFail (I32, I32);
pipe = (
    let _ = *pure();    // make it lazy
    let pipefd: Array I32 = Array::fill(2, 0_I32);
    let res = pipefd.borrow_ptr(|p_pipefd|
        CALL_C[I32 pipe(Ptr), p_pipefd]
    );
    if res == -1_I32 {
        throw("pipe failed!: some error occurred in pipe.")
    };
    let read_fd = pipefd.@(0);
    let write_fd = pipefd.@(1);
    pure $ (read_fd, write_fd)
);

// Creates a pipe stream. It returns `(read_fh, write_fh)` where `read_fd` is the stream of
// read-end of the pipe, and `write_fd` is the stream of write-end of the pipe.
// For details, see Linux manual page for [pipe()](https://man7.org/linux/man-pages/man2/pipe.2.html).
open_pipe: IOFail (IOHandle, IOHandle);
open_pipe = (
    let (read_fd, write_fd) = *pipe;
    let read_fh = *fdopen(read_fd, "r");
    let write_fh = *fdopen(write_fd, "w");
    pure $ (read_fh, write_fh)
);

// Sleeps for specified micro-seconds.
// For details, see Linux manual page for [usleep()](https://man7.org/linux/man-pages/man3/usleep.3.html).
usleep: U32 -> IOFail ();
usleep = |usec| (
    let _ = *pure();    // make it lazy
    let res = CALL_C[I32 usleep(U32), usec];
    if res == -1_I32 {
        throw("usleep failed!: some error occurred in usleep.")
    };
    pure()
);

// Type of a directory handle (private)
type DirHandle = unbox struct {
    dtor: Destructor Ptr
};

_opendir: String -> IOFail DirHandle;
_opendir = |dir_path| (
    let _ = *pure();    // make it lazy
    let dirp = dir_path.borrow_c_str(|p_path|
        CALL_C[Ptr opendir(Ptr), p_path]
    );
    if dirp == nullptr {
        throw("unlink failed!: some error occurred in unlink.")
    };
    pure $ DirHandle {
        dtor: Destructor::make(dirp, |dirp|
            //eval debug_eprintln ("closing dir handle");
            eval CALL_C[I32 closedir(Ptr), dirp];
            ()
        )
    }
);

_readdir: DirHandle -> IOFail String;
_readdir = |dir_handle| (
    let dirent: Ptr = dir_handle.@dtor.borrow(|dirp|
        CALL_C[Ptr readdir(Ptr), dirp]
    );
    if dirent == nullptr {
        // The end of directory stream is reached (`errno` is not changed),
        // or an error occured (`errno` is set).
        // We cannot get or set `errno`, so simply ignore errors.
        pure $ ""
    };

    //   struct dirent {
    //       ino_t          d_ino;       /* Inode number */
    //       off_t          d_off;       /* Not an offset; see below */
    //       unsigned short d_reclen;    /* Length of this record */
    //       unsigned char  d_type;      /* Type of file; not supported
    //                                      by all filesystem types */
    //       char           d_name[256]; /* Null-terminated filename */
    //   };
    // (offset of d_name) = sizeof(ino_t) + sizeof(off_t) + 2 + 1
    //                    = 8 + 8 + 2 + 1 = 19
    let d_name: Ptr = dirent.add_offset(19);
    let name = String::_unsafe_from_c_str_ptr(d_name);
    pure $ name
);

// Lists a directory.
// Returns filenames in the specified directory.
// The filenames will be sorted in lexicographical order.
list_dir: String -> IOFail (Array String);
list_dir = |dirpath| (
    let _ = *pure();    // make it lazy
    let dir_handle = *_opendir(dirpath);
    let names: Array String = Array::empty(10);
    let names = *loop_m(
        names, |names|
        let name = *_readdir(dir_handle);
        if name == "" {
            break_m $ names
        };
        if name == "." || name == ".." {
            continue_m $ names
        };
        let names = names.push_back(name);
        continue_m $ names
    );
    let names = names.sort_by(string_less_than);
    pure $ names
);

// Returns true if the specified file exists.
file_exists: String -> IO Bool;
file_exists = |file_path| (
    let res = *stat(file_path).to_result;
    if res.is_err {
        pure $ false
    };
    let file_stat = res.as_ok;
    pure $ file_stat.is_file
);

// Returns true if the specified directory exists.
directory_exists: String -> IO Bool;
directory_exists = |dir_path| (
    let res = *stat(dir_path).to_result;
    if res.is_err {
        pure $ false
    };
    let file_stat = res.as_ok;
    pure $ file_stat.is_dir
);

// Type of file status
type FileStat = unbox struct {
    data: Array U8  // struct stat
};

namespace FileStat {
    // `stat(file_path)` retrieves information about the file pointed to by `file_path`.
    stat: String -> IOFail FileStat;
    stat = |file_path| (
        let statbuf: Array U8 = Array::fill(_def_struct_stat.@sizeof_struct_stat, 0_U8);
        let res = statbuf.borrow_ptr(|p_stat|
            file_path.borrow_c_str(|p_filepath|
                    CALL_C[I32 stat(Ptr, Ptr), p_filepath, p_stat]
            )
        );
        if res != 0_I32 {
            throw("stat failed!: some error occurred in stat.")
        };
        pure $ FileStat { data: statbuf }
    );

    // Returns true if it is a regular file.
    is_file: FileStat -> Bool;
    is_file = |file_stat| file_stat.st_mode.bit_and(/* 0o0170000 = */ 61440_U32) ==
                        /* 0o0100000 = */ 32768_U32;

    // Returns true if it is a directory.
    is_dir: FileStat -> Bool;
    is_dir = |file_stat| file_stat.st_mode.bit_and(/* 0o0170000 = */ 61440_U32) ==
                        /* 0o0040000 = */ 16384_U32;

    st_dev: FileStat -> U64;
    st_dev = |file_stat| decode_u64_le(file_stat.@data, _def_struct_stat.@offsetof_st_dev);

    st_ino: FileStat -> U64;
    st_ino = |file_stat| decode_u64_le(file_stat.@data, _def_struct_stat.@offsetof_st_ino);

    st_nlink: FileStat -> U64;
    st_nlink = |file_stat| decode_u64_le(file_stat.@data, _def_struct_stat.@offsetof_st_nlink);

    st_mode: FileStat -> U32;
    st_mode = |file_stat| decode_u32_le(file_stat.@data, _def_struct_stat.@offsetof_st_mode);

    st_uid: FileStat -> U32;
    st_uid = |file_stat| decode_u32_le(file_stat.@data, _def_struct_stat.@offsetof_st_uid);

    st_gid: FileStat -> U32;
    st_gid = |file_stat| decode_u32_le(file_stat.@data, _def_struct_stat.@offsetof_st_gid);

    st_rdev: FileStat -> U64;
    st_rdev = |file_stat| decode_u64_le(file_stat.@data, _def_struct_stat.@offsetof_st_rdev);

    st_size: FileStat -> I64;
    st_size = |file_stat| decode_u64_le(file_stat.@data, _def_struct_stat.@offsetof_st_size).to_I64;

    st_blksize: FileStat -> I64;
    st_blksize = |file_stat| decode_u64_le(file_stat.@data, _def_struct_stat.@offsetof_st_blksize).to_I64;

    st_blocks: FileStat -> U64;
    st_blocks = |file_stat| decode_u64_le(file_stat.@data, _def_struct_stat.@offsetof_st_blocks);

    st_atime: FileStat -> U64;
    st_atime = |file_stat| decode_u64_le(file_stat.@data, _def_struct_stat.@offsetof_st_atime);

    st_mtime: FileStat -> U64;
    st_mtime = |file_stat| decode_u64_le(file_stat.@data, _def_struct_stat.@offsetof_st_mtime);

    st_ctime: FileStat -> U64;
    st_ctime = |file_stat| decode_u64_le(file_stat.@data, _def_struct_stat.@offsetof_st_ctime);
}


// A type that represents size info of `struct stat`. 
// (private)
type DefStructStat = unbox struct {
    offsetof_st_dev: I64,
    offsetof_st_ino: I64,
    offsetof_st_nlink: I64,
    offsetof_st_mode: I64,
    offsetof_st_uid: I64,
    offsetof_st_gid: I64,
    offsetof_st_rdev: I64,
    offsetof_st_size: I64,
    offsetof_st_blksize: I64,
    offsetof_st_blocks: I64,
    offsetof_st_atime: I64,
    offsetof_st_mtime: I64,
    offsetof_st_ctime: I64,
    sizeof_struct_stat: I64
};

// NOTE: the system information does not change during program execution,
// so this variable is constant.
_def_struct_stat: DefStructStat;
_def_struct_stat = (
    let uts = uname;
    // aarch64-linux-gnu (ChromeBook, Debian 11)
    if uts.@sysname == "Linux" && uts.@machine == "aarch64" {
        // aarch64-linux-gnu
        DefStructStat {
            offsetof_st_dev: 0,
            offsetof_st_ino: 8,
            offsetof_st_nlink: 20,
            offsetof_st_mode: 16,
            offsetof_st_uid: 24,
            offsetof_st_gid: 28,
            offsetof_st_rdev: 32,
            offsetof_st_size: 48,
            offsetof_st_blksize: 56,
            offsetof_st_blocks: 64,
            offsetof_st_atime: 72,
            offsetof_st_mtime: 88,
            offsetof_st_ctime: 104,
            sizeof_struct_stat: 128
        }
    };
    eval assert (|_|
        "Currently this platform is not supported: sysname="+uts.@sysname+" machine=" + uts.@machine,
        uts.@sysname == "Linux" && uts.@machine == "x86_64"
    );
    // x86_64-linux-gnu (WSL 2, Ubuntu 22.04)
    DefStructStat {
        offsetof_st_dev: 0,
        offsetof_st_ino: 8,
        offsetof_st_nlink: 16,
        offsetof_st_mode: 24,
        offsetof_st_uid: 28,
        offsetof_st_gid: 32,
        offsetof_st_rdev: 40,
        offsetof_st_size: 48,
        offsetof_st_blksize: 56,
        offsetof_st_blocks: 64,
        offsetof_st_atime: 72,
        offsetof_st_mtime: 88,
        offsetof_st_ctime: 104,
        sizeof_struct_stat: 144
    }
);

// Decodes U8 from `array` at position `i` with little endian.
decode_u8_le: Array U8 -> I64 -> U8;
decode_u8_le = |array, i| (
    array.@(i)
);

// Decodes U16 from `array` at position `i` with little endian.
decode_u16_le: Array U8 -> I64 -> U16;
decode_u16_le = |array, i| (
    decode_u8_le(array, i).to_U16.bit_or (
        decode_u8_le(array, i + 1).to_U16.shift_left(8_U16)
    )
);

// Decodes U32 from `array` at position `i` with little endian.
decode_u32_le: Array U8 -> I64 -> U32;
decode_u32_le = |array, i| (
    decode_u16_le(array, i).to_U32.bit_or (
        decode_u16_le(array, i + 2).to_U32.shift_left(16_U32)
    )
);

// Decodes U64 from `array` at position `i` with little endian.
decode_u64_le: Array U8 -> I64 -> U64;
decode_u64_le = |array, i| (
    decode_u32_le(array, i).to_U64.bit_or (
        decode_u32_le(array, i + 4).to_U64.shift_left(32_U64)
    )
);


find_files: String -> IOFail (Array String);
find_files = |dir_path| (
    let dir_path = if dir_path.ends_with("/") { dir_path } else { dir_path + "/" };
    let output = Array::empty(10);
    let files = *list_dir(dir_path);
    files.to_iter.loop_iter_m(
        output, |output, file|
        let file_path = dir_path + file;
        if *directory_exists(file_path).lift {
            let output = output.append(*find_files(file_path));
            continue_m $ output
        };
        if *file_exists(file_path).lift {
            let output = output.push_back(file_path);
            continue_m $ output
        };
        continue_m $ output
    )
);


// `mkdir(path, mode)` creates a directory.
// If `mode` is `none()`, octal 0777 is used as a mode.
// This mode is modified by the process's umask in the usual way.
mkdir: String -> Option U32 -> IOFail ();
mkdir = |path, mode| (
    let _ = *pure();    // make it lazy
    let mode = if mode.is_some { mode.as_some } else { /* 0777 = */ 511_U32 };
    let res = path.borrow_c_str(|p_path|
        CALL_C[I32 mkdir(Ptr, U32), p_path, mode]
    );
    if res != 0_I32 {
        throw("mkdir failed!: some error occurred in mkdir.")
    };
    pure()
);

// `rmdir(path)` deletes a directory, which must be empty.
rmdir: String -> IOFail ();
rmdir = |path| (
    let _ = *pure();    // make it lazy
    let res = path.borrow_c_str(|p_path|
        CALL_C[I32 rmdir(Ptr), p_path]
    );
    if res != 0_I32 {
        throw("rmdir failed!: some error occurred in rmdir.")
    };
    pure()
);

make_dirs: String -> Option U32 -> IOFail ();
make_dirs = |dir_path, mode| (
    if *directory_exists(dir_path).lift {
        pure()
    };
    let parent_dir = dirname(dir_path);
    let _ = *if parent_dir == dir_path { 
        pure()  // avoid infinite loop
    } else {
        make_dirs(parent_dir, mode)
    };
    mkdir(dir_path, mode)
);

// A type of name and information of current kernel.
type UName = unbox struct {
    sysname: String,
    nodename: String,
    release: String,
    version: String,
    machine: String
};

// The name and information of current kernel.
// Calls POSIX C function `uname()`, and split the result by null characters.
// NOTE: The system information does not change during program execution,
// so this variable is constant.
uname: UName;
uname = (
    let buf = Array::fill(4096, 0_U8);
    let res = buf.borrow_ptr(|p_buf|
        CALL_C[I32 uname(Ptr), p_buf]
    );
    eval assert (|_| "uname failed!: some error occurred in uname.", res == 0_I32);
    /*
    let dump = buf.to_iter.zip(Iterator::count_up(0)).fold(
        Array::empty(0), |dump, (b, i)|
        let dump = dump.push_back(encode_hex_char(b.shift_left(4_U8).bit_and(15_U8)))
            .push_back(encode_hex_char(b.bit_and(15_U8)));
        if i % 16 == 15 { dump.push_back('\n') } else { dump }
    )._unsafe_to_string;
    eval debug_println(dump);
    */
    let find_from_start_by = |start, cond, arr| (
        let len = arr.Array::get_size;
        loop(start, |idx| (
            if idx == len { break $ Option::none $ () };
            if cond(arr.@(idx)) { break $ Option::some $ idx };
            continue $ idx + 1
        ))
    );
    let names = loop(
        ([], 0), |(names, start)|
        let start = buf.find_from_start_by(start, |b| b != 0_U8);
        if start.is_none {
            break $ names
        };
        let start = start.as_some;
        let end = buf.find_from_start_by(start, |b| b == 0_U8).map_or(
            buf.get_size,
            |end| end
        );
        let name = buf.get_sub(start, end)._unsafe_to_string;
        let names = names.push_back(name);
        continue $ (names, end)
    );
    // Probably splitted to `[sysname, nodename, release, version, machine]`.
    eval debug_println("uname="+names.to_string);

    UName {
        sysname: names.@(0),
        nodename: names.@(1),
        release: names.@(2),
        version: names.@(3),
        machine: names.@(4)
    }
);

