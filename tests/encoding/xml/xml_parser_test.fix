module Main;

import Minilib.Encoding.Xml;
import Minilib.Encoding.Xml.XmlParser;
import Minilib.Testing.UnitTest;
import Minilib.Text.SimpleParser;
import Minilib.Text.StringEx;

// trim err string like "Line 0, Column 13: XXXX"
trim_err: Result ErrMsg a -> Result ErrMsg a;
trim_err = |res| (
    if res.is_ok { res };
    let e = res.as_err;
    let (loc, e) = e.split_first(": ");
    if e == "" { res } else { err(e) }
);

// [1]   	document	   ::=   	( prolog element Misc* ) - ( Char* RestrictedChar Char* )
test_parse_document: TestCase;
test_parse_document = (
    let xml_decl_str = "<?xml version='1.1'?>";
    let doc = XmlDocument::empty;
    let xml_decl = XmlDeclaration { version: "1.1", encoding: none(), standalone: none() };
    let element = XmlElement::make;
    let text = XmlText::make >> text_node;
    make_table_test("test_parse_document",
        [
            (xml_decl_str + "<a/>", ok $ doc
                .set_xml_decl(xml_decl)
                .set_document_element(element("a"))),
            (xml_decl_str + " <a/> ", ok $ doc
                .set_xml_decl(xml_decl)
                .add_to_prolog(text(" "))
                .set_document_element(element("a"))
                .add_to_epilog(text(" "))),
            (xml_decl_str, err $ "NotMatch")
        ],
        |(input, expect)|
        let res = _parse_document.run_parser_str(input);
        let res = res.map(@0).trim_err;
        assert_equal("res", expect, res)
    )
);

// [4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] |
//              [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] |
//              [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] |
//              [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
// [4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] |
//                                   #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
// [5]   	Name	   ::=   	NameStartChar (NameChar)*
test_parse_name: TestCase;
test_parse_name = (
    make_table_test("test_parse_name",
        [
            // currently #x0080 or above are all matched to NameStartChar and NameChar
            ("abc", ok $ "abc"),
            ("ABC", ok $ "ABC"),
            ("あ漢", ok $ "あ漢"),
            (":AZ_az-.09あ漢", ok $ ":AZ_az-.09あ漢"),
            (":abc", ok $ ":abc"),
            ("_abc", ok $ "_abc"),
            ("-abc", err $ "NotMatch"),
            (".abc", err $ "NotMatch"),
            ("0abc", err $ "NotMatch"),
            ("$abc", err $ "NotMatch")
        ],
        |(input, expect)|
        let res = _parse_name.run_parser_str(input);
        let res = res.map(@0).trim_err;
        assert_equal("res", expect, res)
    )
);

// [14]   	CharData	   ::=   	[^<&]* - ([^<&]* ']]>' [^<&]*)
test_parse_char_data: TestCase;
test_parse_char_data = (
    make_table_test("test_parse_char_data",
        [
            ("abc", ok $ "abc"),
            ("a > b > c >'\"", ok $ "a > b > c >'\""),
            ("abc]>>>", ok $ "abc]>>>"),
            ("abc]]>>>", ok $ "abc"),
            ("abc]]]>>>", ok $ "abc]"),
            ("abc]]]]>>>", ok $ "abc]]"),
            ("]]>", ok $ "")
        ],
        |(input, expect)|
        let res = _parse_char_data.run_parser_str(input);
        let res = res.map(@0).trim_err;
        assert_equal("res", expect, res)
    )
);

// [15]   	Comment	   ::=   	'<!--' ((Char - '-') | ('-' (Char - '-')))* '-->'
test_parse_comment: TestCase;
test_parse_comment = (
    make_table_test("test_parse_comment",
        [
            ("<!--abc-->", ok("abc")),
            ("<!---a-a-aa-a-->", ok("-a-a-aa-a")),
            ("<!---a-a-aa-a--->", err("Missing end of comment"))
        ],
        |(input, expect)|
        let res = _parse_comment.run_parser_str(input);
        let res = res.map(|(node,_)| 
            if !node.is_comment_node { err $ "type" };
            ok $ node.as_comment_node.@content
        ).flatten.trim_err;
        assert_equal("res", expect, res)
    )
);

// [16]   	PI	   ::=   	'<?' PITarget (S (Char* - (Char* '?>' Char*)))? '?>'
test_parse_pi: TestCase;
test_parse_pi = (
    make_table_test("test_parse_pi",
        [
            ("<?target?>", ok("target")),
            ("<?:AZaz09-.?>", ok(":AZaz09-.")),
            ("<?_AZaz09-.?>", ok("_AZaz09-.")),
            ("<?_AZaz09$.?>", err("Missing '?>'")),
            ("<?_AZaz09 $.?>", ok("_AZaz09 $.")),
            ("<?target abc ???>", ok("target abc ??")),
            ("<?target abc ???", err("Missing '?>'")),
            ("<?xml version='1.1'?>", err("NotMatch")),
            ("<??>", err("NotMatch"))
        ],
        |(input, expect)|
        let res = _parse_pi.run_parser_str(input);
        let res = res.map(@0).trim_err;
        let expect = expect.map(XmlProcessingInstruction::make >> processing_instruction);
        assert_equal("res", expect, res)
    )
);

// [18]   	CDSect	   ::=   	CDStart CData CDEnd
// [19]   	CDStart	   ::=   	'<![CDATA['
// [20]   	CData	   ::=   	(Char* - (Char* ']]>' Char*))
// [21]   	CDEnd	   ::=   	']]>'
test_parse_cdsect: TestCase;
test_parse_cdsect = (
    make_table_test("test_parse_cdsect",
        [
            ("<![CDATA[abc]]>", ok("abc")),
            ("<![CDATA [abc]]>", err("NotMatch")),
            ("<![CDATA[ <a<b>> &amp;& <c>>  ]]]]>", ok(" <a<b>> &amp;& <c>>  ]]")),
            ("<![CDATA[<![CDATA[]>[][]]]]>", ok("<![CDATA[]>[][]]")),
            ("<![CDATA[abc]]", err("Missing ']]>'")),
            ("<![CDATA[]]>", ok(""))
        ],
        |(input, expect)|
        let res = _parse_cdsect.run_parser_str(input);
        let res = res.map(@0).trim_err;
        let expect = expect.map(XmlCDATASection::make >> cdata_section);
        assert_equal("res", expect, res)
    )
);

// [23]   	XMLDecl	   ::=   	'<?xml' VersionInfo EncodingDecl? SDDecl? S? '?>'
test_parse_xml_declaration: TestCase;
test_parse_xml_declaration = (
    make_table_test("test_parse_xml_declaration",
        let xmldecl = XmlDeclaration {
            version: "1.1",
            encoding: none(),
            standalone: none()
        };
        [
            ("<?xml?>", err("NotMatch")),
            ("<?xml version='1.1'?>", ok $ xmldecl),
            ("<?xml version='1.1'>", err("Missing end of xml declaration")),
            ("<?xmlversion='1.1'?>", err("NotMatch")),
            ("<? xml version='1.1'?>", err("NotMatch")),
            ("<?xml version='1.1' encoding='utf-8' ?>",
                ok $ xmldecl.set_encoding(some("utf-8"))),
            ("<?xml version='1.1' standalone='no' ?>", ok $ xmldecl.set_standalone(some("no"))),
            ("<?xml version='1.1' encoding='utf-8' standalone='yes' ?>",
                ok $ xmldecl.set_encoding(some("utf-8")).set_standalone(some("yes"))),
            ("<?xml version='1.1' standalone='yes' encoding='utf-8' ?>", err("Missing end of xml declaration")),
            ("<?xml encoding='utf-8' standalone='yes' ?>", err("NotMatch"))
        ],
        |(input, expect)|
        let res = _parse_xml_declaration.run_parser_str(input).map(@0).trim_err;
        assert_equal("res", expect, res)
    )
);

// [24]   	VersionInfo	   ::=   	S 'version' Eq ("'" VersionNum "'" | '"' VersionNum '"')
test_parse_version_info: TestCase;
test_parse_version_info = (
    make_table_test("test_parse_version_info",
        [
            (" version", err("NotMatch")),
            (" version=1.1", err("NotMatch")),
            (" version='1.1'", ok $ "1.1"),
            (" version=\"1.0\"", ok $ "1.0"),
            (" version='x.x'", err("NotMatch")),
            ("   version  =  '1.1'", ok $ "1.1"),
            ("   version  =  \"1.1\"", ok $ "1.1"),
            ("   version  =  \"1.1'", err("NotMatch"))
        ],
        |(input, expect)|
        let res = _parse_version_info.run_parser_str(input).map(@0).trim_err;
        assert_equal("res", expect, res)
    )
);
// 2.9 Standalone Document Declaration

// [32]   	SDDecl	   ::=   	S 'standalone' Eq (("'" ('yes' | 'no') "'") | ('"' ('yes' | 'no') '"'))
test_parse_sd_decl: TestCase;
test_parse_sd_decl = (
    make_table_test("test_parse_sd_decl",
        [
            (" standalone", err("NotMatch")),
            (" standalone=yes", err("NotMatch")),
            (" standalone='yes'", ok $ "yes"),
            (" standalone=\"no\"", ok $ "no"),
            (" standalone='xxx'", err("NotMatch")),
            ("   standalone  =  'yes'", ok $ "yes"),
            ("   standalone  =  \"no\"", ok $ "no"),
            ("   standalone  =  \"no'", err("NotMatch"))
        ],
        |(input, expect)|
        let res = _parse_sd_decl.run_parser_str(input).map(@0).trim_err;
        assert_equal("res", expect, res)
    )
);


// 3 Logical Structures

// [39]   	element	   ::=   	EmptyElemTag
//                              | STag content ETag
test_parse_element: TestCase;
test_parse_element = (
    let element = XmlElement::make;
    make_table_test("test_parse_element",
        [
            ("<a   x='1' >hello <b /> world</a>", ok $
                    element("a")
                    .attr("x", "1")
                    .text("hello ")
                    .add(element("b"))
                    .text(" world")),
            ("<a><b><c/></b></a>", ok $ element("a").add(element("b").add(element("c")))),
            ("<a><b><c/></b>", err $ "Missing end tag")
        ],
        |(input, expect)|
        let res = _parse_element.run_parser_str(input);
        let res = res.map(@0).trim_err;
        assert_equal("res", expect, res)
    )
);

// [40]   	STag	   ::=   	'<' Name (S Attribute)* S? '>'
test_parse_stag: TestCase;
test_parse_stag = (
    make_table_test("test_parse_stag",
        [
            ("<aaa  >", ok $ (false, XmlElement::make("aaa"))),
            ("<aaa a='1' b=\"&amp;\" >", ok $ (false, XmlElement::make("aaa").attr("b", "&").attr("a", "1"))),
            ("<aaa a b=\"&amp;\" >", err $ "Missing '='"),
            ("<aaa &a='1' >", err $ "Missing '>'"),
            ("<aaa <bbb>", err $ "Missing '>'"),
            ("<aaa  ", err $ "Missing '>'")
        ],
        |(input, expect)|
        let res = _parse_empty_elem_tag_or_stag.run_parser_str(input);
        let res = res.map(|((empty, elem), _)| (empty, elem)).trim_err;
        assert_equal("res", expect, res)
    )
);


// [41]   	Attribute	   ::=   	Name Eq AttValue
test_parse_attribute: TestCase;
test_parse_attribute = (
    make_table_test("test_parse_attribute",
        [
            (":Aa0.='bbb'", ok $ (":Aa0.", "bbb")),
            ("_:Aa0.-  =  \"bbb &#12354;&#x6F22;&lt;&gt;&amp;&apos;&quot;\"", ok $ ("_:Aa0.-", "bbb あ漢<>&'\"")),
            ("_:Aa0.-  =  bbb", err $ "Missing start quote"),
            ("_:Aa0.-  =  \"bbb", err $ "Missing end quote"),
            ("_:Aa0.-  =  \"bbb<\"", err $ "Missing end quote"),
            ("_:Aa0.-  =  \"bbb&\"", err $ "Missing end quote")
        ],
        |(input, expect)|
        let res = _parse_attribute.run_parser_str(input);
        let res = res.map(|(attr, _)|
            (attr.@name, attr.@value)
        ).trim_err;
        assert_equal("res", expect, res)
    )
);

// [43]   	content	   ::=   	CharData? ((element | Reference | CDSect | PI | Comment) CharData?)*
test_parse_content: TestCase;
test_parse_content = (
    let elem = XmlElement::make("a");
    make_table_test("test_parse_content",
        [
            ("abc<b/>", ok $ elem.text("abc").add(XmlElement::make("b"))),
            ("ab&amp;c", ok $ elem.text("ab&c")),
            ("ab<!--comment-->c", ok $ elem.text("ab")
                    .add_node(comment_node(XmlComment::make("comment")))
                    .text("c")),
            ("<![CDATA[a]]> <?t?>", ok $ elem
                    .add_node(cdata_section(XmlCDATASection::make("a")))
                    .text(" ")
                    .add_node(processing_instruction(XmlProcessingInstruction::make("t"))))
        ],
        |(input, expect)|
        let res = _parse_content(elem).run_parser_str(input);
        let res = res.map(@0).trim_err;
        assert_equal("res", expect, res)
    )
);

// [44]   	EmptyElemTag	   ::=   	'<' Name (S Attribute)* S? '/>'
test_parse_empty_elem: TestCase;
test_parse_empty_elem = (
    make_table_test("test_parse_empty_elem",
        [
            ("<aaa a='1' b=\"&amp;\" />", ok $ (true, XmlElement::make("aaa").attr("b", "&").attr("a", "1"))),
            ("<aaa a=1 b=\"&amp;\" />", err $ "Missing start quote"),
            ("<aaa/>", ok $ (true, XmlElement::make("aaa"))),
            ("<aaa/", err $ "Missing '>'")
        ],
        |(input, expect)|
        let res = _parse_empty_elem_tag_or_stag.run_parser_str(input);
        let res = res.map(|((empty, elem), _)| (empty, elem)).trim_err;
        assert_equal("res", expect, res)
    )
);

// 4 Physical Structures
// 4.1 Character and Entity References
// TODO
// [66]   	CharRef	   ::=   	'&#' [0-9]+ ';'
//                              | '&#x' [0-9a-fA-F]+ ';'
// [67]   	Reference	   ::=   	EntityRef | CharRef
// [68]   	EntityRef	   ::=   	'&' Name ';'

// 4.3.3 Character Encoding in Entities

// [80]   	EncodingDecl	   ::=   	S 'encoding' Eq ('"' EncName '"' | "'" EncName "'" )
test_parse_encoding_decl: TestCase;
test_parse_encoding_decl = (
    make_table_test("test_parse_encoding_decl",
        [
            ("encoding='utf-8'", err("NotMatch")),
            (" encoding='utf-8'", ok $ "utf-8"),
            (" encoding=' utf-8 '", err("NotMatch")),
            ("  encoding  =  \"UTF8\"", ok $ "UTF8"),
            ("  encoding  =  \"UTF8'", err("NotMatch"))
        ],
        |(input, expect)|
        let res = _parse_encoding_decl.run_parser_str(input).map(@0).trim_err;
        assert_equal("res", expect, res)
    )
);

// [81]   	EncName	   ::=   	[A-Za-z] ([A-Za-z0-9._] | '-')*
test_parse_enc_name: TestCase;
test_parse_enc_name = (
    make_table_test("test_parse_enc_name",
        [
            ("", err("NotMatch")),
            ("a", ok $ "a"),
            ("A", ok $ "A"),
            ("Abc", ok $ "Abc"),
            (" Abc ", err("NotMatch")),
            ("0bc", err("NotMatch")),
            (".bc", err("NotMatch")),
            ("aBC09..__--", ok $ "aBC09..__--")
        ],
        |(input, expect)|
        let res = _parse_enc_name.run_parser_str(input).map(@0).trim_err;
        assert_equal("res", expect, res)
    )
);


main: IO ();
main = (
    [
        test_parse_document,
        test_parse_name,
        test_parse_char_data,
        test_parse_comment,
        test_parse_pi,
        test_parse_cdsect,
        test_parse_xml_declaration,
        test_parse_version_info,
        test_parse_sd_decl,
        test_parse_element,
        test_parse_stag,
        test_parse_attribute,
        test_parse_content,
        test_parse_empty_elem,
        test_parse_encoding_decl,
        test_parse_enc_name,
        TestCase::empty
    ].run_test_driver
);
