// Functions for a ring, for example multiplication or exponent with an integer.
//
// A ring is a mathematical structure which has addition(`add`), subtraction(`sub`),
// additive inverse(`neg`), additive unit(`zero`),
// multiplication(`mul`), multiplicative unit(`one`).
//
// For details, see [Wikipedia: Ring](https://en.wikipedia.org/wiki/Ring_(mathematics)).
module Minilib.Math.Ring;

import Minilib.Math.Types;

// `repeat_by_U64(op, x, a, n)` calculates `x.op(a).op(a)...` for `n` times.
// `op` is an associative binary operation.
// This function returns the same result as `Iterator::range(0, n).fold(x, |x, _| x.op(a))`,
// but faster.
repeat_by_U64: (a -> a -> a) -> a -> a -> U64 -> a;
repeat_by_U64 = |op, x, a, n| (
    // Russian peasant method
    // https://en.wikipedia.org/wiki/Ancient_Egyptian_multiplication#Russian_peasant_multiplication
    loop(
        (x, a, n), |(x, a, n)|
        if n == 0_U64 {
            break $ x
        };
        let x = if n.bit_and(1_U64) != 0_U64 {
            op(x, a)
        } else { x };
        continue $ (x, op(a, a), n.shift_right(1_U64))
    )
);

// `a.times_by_U64(n)` calculates `a * n`.
times_by_U64: [a: Add, a: Zero] U64 -> a -> a;
times_by_U64 = |n, a| (
    repeat_by_U64(add, zero, a, n)
);

// `a.pow_by_U64(n)` calculates `a ^ n`.
pow_by_U64: [a: Mul, a: One] U64 -> a -> a;
pow_by_U64 = |n, a| (
    repeat_by_U64(mul, one, a, n)
);

