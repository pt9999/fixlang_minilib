module Main;
import Debug;

// Same as String::concat, but a little faster
fast_concat : String -> String -> String;
fast_concat = |rhs, lhs| (
    lhs.mod__data(|data|
        let concat_size = data.get_size + rhs.@_data.get_size - 1;
        let data = if concat_size > data.get_capacity {
            data.reserve(concat_size * 2)
        } else { data };
        data.pop_back.append(rhs.@_data)
    )
);

main: IO ();
main = (
    let n = 100000;

    // concat(): 29sec
    let (str, time) = consumed_time_while(|_|
        Iterator::range(0, n).fold("", |str, i| str.concat(" "))
    , ());
    let _ = *println ("concat(): len="+str.get_size.to_string+" time="+time.to_string);

    // fast_concat(): 0.01sec
    let (str, time) = consumed_time_while(|_|
        Iterator::range(0, n).fold("", |str, i| str.fast_concat(" "))
    , ());
    let _ = *println ("fast_concat(): len="+str.get_size.to_string+" time="+time.to_string);

    pure()
);
