// BASE64 encoding and decoding
module Minilib.Encoding.Base64;

import Minilib.Text.Hex;

// Encodes a byte array to a BASE64 string.
base64_encode: Array U8 -> String;
base64_encode = |src| (
    let src_size = src.get_size;
    let dest_size = (src_size + 2) / 3 * 4;
    let dest = Array::fill(dest_size, 0_U8);
    let dest = loop(
        (dest, 0, 0), |(dest, src_idx, dest_idx)|
        if src_idx >= src_size {
            if dest_size != dest_idx { undefined("dest_size mismatch") };
            break $ dest
        };
        let has_b1 = (src_idx + 1 < src_size);
        let has_b2 = (src_idx + 2 < src_size);
        let b0 = src.@(src_idx);
        let b1 = if has_b1 { src.@(src_idx + 1) } else { 0_U8 };
        let b2 = if has_b2 { src.@(src_idx + 2) } else { 0_U8 };
        let u0 = _b64_to_u8_table.@(b0.shift_right(2_U8));
        let u1 = _b64_to_u8_table.@(b0.shift_left(4_U8).bit_or(b1.shift_right(4_U8)).bit_and(63_U8));
        let u2 = _b64_to_u8_table.@(b1.shift_left(2_U8).bit_or(b2.shift_right(6_U8)).bit_and(63_U8));
        let u3 = _b64_to_u8_table.@(b2.bit_and(63_U8));
        let dest = dest.set(dest_idx, u0)
                        .set(dest_idx + 1, u1)
                        .set(dest_idx + 2, if has_b1 { u2 } else { '=' })
                        .set(dest_idx + 3, if has_b2 { u3 } else { '=' });
        continue $ (dest, src_idx + 3, dest_idx + 4)
    );
    dest
);

// Decodes a string which contains BASE64 characters to a byte array.
// Characters other than BASE64 are ignored.
base64_decode: String -> Array U8;
base64_decode = |str| (
    let src = str.get_bytes.map(|u8| _u8_to_b64_table.@(u8.to_I64))
                ._filter_array(|b64| b64 != 0xFF_U8);
    let src_size = src.get_size;
    let dest_size = src_size * 3 / 4;
    let dest = Array::fill(dest_size, 0_U8);
    let dest = loop(
        (dest, 0, 0), |(dest, src_idx, dest_idx)|
        if src_idx + 1 >= src_size { break $ dest };
        let b0 = src.@(src_idx);
        let b1 = src.@(src_idx + 1);
        let dest = dest.set(dest_idx, b0.shift_left(2_U8).bit_or(b1.shift_right(4_U8)));
        if src_idx + 2 >= src_size { break $ dest };
        let b2 = src.@(src_idx + 2);
        let dest = dest.set(dest_idx + 1, b1.bit_and(0x0F_U8).shift_left(4_U8).bit_or(b2.shift_right(2_U8)));
        if src_idx + 3 >= src_size { break $ dest };
        let b3 = src.@(src_idx + 3);
        let dest = dest.set(dest_idx + 2, b2.bit_and(0x03_U8).shift_left(6_U8).bit_or(b3));
        continue $ (dest, src_idx + 4, dest_idx + 3)
    );
    if dest_size != dest.get_size { undefined("dest_size mismatch") };
    dest
);

// Same as `to_iter >> filter(f) >> to_array`, but faster.
_filter_array: (a -> Bool) -> Array a -> Array a;
_filter_array = |f, arr| (
    let n = arr.get_size;
    let output = Array::empty(n);
    loop(
        (output, 0), |(output, i)|
        if i >= n { break $ output };
        let x = arr.@(i);
        let output = if f(x) { output.push_back(x) } else { output };
        continue $ (output, i + 1)
    )
);

// [0..63] -> [0..255]
_b64_to_u8_table: Array U8;
_b64_to_u8_table = (
    Array::from_map(64, |i|
        if i < 26 { 'A' + i.to_U8 };
        if i < 52 { 'a' + (i - 26).to_U8 };
        if i < 62 { '0' + (i - 52).to_U8 };
        if i == 62 { '+' } else { '/' }
    )
);

// [0..255] -> [0..63], or 0xFF if not a BASE64 char
_u8_to_b64_table: Array U8;
_u8_to_b64_table = (
    Iterator::range(0, 64).fold(
        Array::fill(256, 0xFF_U8), |arr, b64|
        let u8 = _b64_to_u8_table.@(b64);
        arr.set(u8.to_I64, b64.to_U8)
    )
);
