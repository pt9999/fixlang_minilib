// https://en.wikipedia.org/wiki/ASN.1
// https://en.wikipedia.org/wiki/X.690
module Minilib.Crypto.Cert.Asn1;

import Time;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;

// A type that represents ASN.1 tag class.
type TagClass = U8;

namespace TagClass {
    tc_universal: TagClass;
    tc_universal = 0_U8;

    tc_application: TagClass;
    tc_application = 1_U8;

    tc_context_specific: TagClass;
    tc_context_specific = 2_U8;

    tc_private: TagClass;
    tc_private = 3_U8;
}

// A type that represents ASN.1 tag number.
type Tag = U8;

namespace Tag {
    tag_boolean: Tag;
    tag_boolean = 1_U8;

    tag_integer: Tag;
    tag_integer = 2_U8;

    tag_bit_string: Tag;
    tag_bit_string = 3_U8;

    tag_octet_string: Tag;
    tag_octet_string = 4_U8;

    tag_null: Tag;
    tag_null = 5_U8;

    tag_object_identifier: Tag;
    tag_object_identifier = 6_U8;

    tag_object_descriptor: Tag;
    tag_object_descriptor = 7_U8;

    tag_external: Tag;
    tag_external = 8_U8;

    tag_real: Tag;
    tag_real = 9_U8;

    tag_enumerated: Tag;
    tag_enumerated = 10_U8;

    tag_embedded_pdv: Tag;
    tag_embedded_pdv = 11_U8;

    tag_utf8_string: Tag;
    tag_utf8_string = 12_U8;

    tag_relative_oid: Tag;
    tag_relative_oid = 13_U8;

    tag_time: Tag;
    tag_time = 14_U8;

    tag_sequence: Tag;
    tag_sequence = 16_U8;

    tag_set: Tag;
    tag_set = 17_U8;

    tag_numeric_string: Tag;
    tag_numeric_string = 18_U8;

    tag_printable_string: Tag;
    tag_printable_string = 19_U8;

    tag_t61_string: Tag;
    tag_t61_string = 20_U8;

    tag_videotex_string: Tag;
    tag_videotex_string = 21_U8;

    tag_ia5_string: Tag;
    tag_ia5_string = 22_U8;

    tag_utc_time: Tag;
    tag_utc_time = 23_U8;

    tag_generalized_time: Tag;
    tag_generalized_time = 24_U8;

    tag_graphic_string: Tag;
    tag_graphic_string = 25_U8;

    tag_visible_string: Tag;
    tag_visible_string = 26_U8;

    tag_general_string: Tag;
    tag_general_string = 27_U8;

    tag_universal_string: Tag;
    tag_universal_string = 28_U8;

    tag_character_string: Tag;
    tag_character_string = 29_U8;

    tag_bmp_string: Tag;
    tag_bmp_string = 30_U8;

    tag_date: Tag;
    tag_date = 31_U8;

    tag_time_of_day: Tag;
    tag_time_of_day = 32_U8;

    tag_date_time: Tag;
    tag_date_time = 33_U8;

    tag_duration: Tag;
    tag_duration = 34_U8;

    tag_oid_iri: Tag;
    tag_oid_iri = 35_U8;

    tag_relative_oid_iri: Tag;
    tag_relative_oid_iri = 36_U8;
}

type Boolean = Std::Bool;

type Integer = Std::I64;

type BitString = unbox struct {
    number_of_unused_bits: U8,  // the number (0..7) of unused bits in the final subsequent octet
    data: Array U8,             // or `Array Bool`?
};

impl BitString: ToString {
    to_string = |obj| (
        "BitString {" +
        " number_of_unused_bits=" + obj.@number_of_unused_bits.to_string +
        " data=" + obj.@data.to_string_hex +
        " }"
    );
}

impl BitString: ToBytes {
    to_bytes = @data;       // OK?
}

type OctetString = unbox struct {
    data: Array U8,
};

impl OctetString: ToString {
    to_string = |obj| (
        "OctetString {" +
        " data=" + obj.@data.to_string_hex +
        " }"
    );
}

impl OctetString: ToBytes {
    to_bytes = @data;
}

type PrintableString = String;

type UTF8String = String;


type ObjectIdentifier = unbox struct {
    components: Array I64,
};

impl ObjectIdentifier: ToString {
    to_string = |obj| obj.@components.to_iter.map(to_string).join(".");
}

// Same as Time::Time
type Asn1Time = unbox struct { sec : I64, nanosec : U32 };

namespace Asn1Time {
    make: I64 -> U32 -> Asn1Time;
    make = |sec, nanosec| Asn1Time {
        sec: sec,
        nanosec: nanosec
    };

    to_time: Asn1Time -> Time::Time;
    to_time = |asn1_time| Time::Time {
        sec: asn1_time.@sec,
        nanosec: asn1_time.@nanosec
    };

    from_time: Time::Time -> Asn1Time;
    from_time = |time| Asn1Time {
        sec: time.@sec,
        nanosec: time.@nanosec
    };

    from_utc: Time::DateTime -> Result ErrMsg Asn1Time;
    from_utc = Time::from_utc >> map(from_time);

    to_utc: Asn1Time -> Result ErrMsg Time::DateTime;
    to_utc = to_time >> Time::to_utc;
}

namespace DateTimeFormat {
    // (year, month, day, hour, minute, second, nanosec) -> String
    type FormatFunc = (String, String, String, String, String, String, String) -> String;

    format: Time::DateTime -> FormatFunc -> String;
    format = |datetime, formatter| (
        let zero_padding = |i64, prec| (
            let str = Array::fill(prec - 1, '0')._unsafe_to_string + i64.to_string;
            str.substring(str.get_size - prec, str.get_size)
        );
        let year = zero_padding(datetime.@year.to_I64, 4);
        let month = zero_padding(datetime.@month.to_I64, 2);
        let day = zero_padding(datetime.@day_in_month.to_I64, 2);
        let hour = zero_padding(datetime.@hour.to_I64, 2);
        let minute = zero_padding(datetime.@min.to_I64, 2);
        let second = zero_padding(datetime.@sec.to_I64, 2);
        let nanosec = zero_padding(datetime.@nanosec.to_I64, 9);
        formatter $ (year, month, day, hour, minute, second, nanosec)
    );
}


impl Asn1Time: ToString {
    to_string = |asn1_time| (
        let res = asn1_time.to_utc;
        if res.is_err { "err:" + res.as_err };
        let datetime = res.as_ok;
        DateTimeFormat::format(
            datetime,
            |(year, month, day, hour, minute, second, nanosec)|
            year + "-" + month + "-" + day + "T" + hour + ":" + minute  + ":" + second + "." + nanosec + "Z"
        )
    );
}

type GeneralizedTime = Asn1Time; // YYYYMMDDHHMMSSZ for RFC5280
type UTCTime = Asn1Time; // YYMMDDHHMMSSZ for RFC5280


