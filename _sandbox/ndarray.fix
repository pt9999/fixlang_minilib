module Sandbox.NdArray;

import Debug;

import Minilib.Text.StringEx;

modulo: I64 -> I64 -> I64;
modulo = |i, n| (
    eval assert (|_|"modulo: out of range", n > 0);
    let i = i % n;
    if i < 0 { i + n } else { i }
);

trait a: ToCardinal {
    // `a.to_cardinal` returns the cardinal (eg. index, shape) of one dimension.
    to_cardinal: a -> I64;
}

impl I64: ToCardinal {
    to_cardinal = |a| a;
}

trait a: ToNdCardinal {
    to_nd_cardinal: a -> Array I64;
}

impl Array I64: ToNdCardinal {
    to_nd_cardinal = |arr| arr;
}

impl [a: ToCardinal, b: ToCardinal] (a, b): ToNdCardinal {
    to_nd_cardinal = |(a, b)| [a.to_cardinal, b.to_cardinal];
}

impl [a: ToCardinal, b: ToCardinal, c: ToCardinal] (a, b, c): ToNdCardinal {
    to_nd_cardinal = |(a, b, c)| [a.to_cardinal, b.to_cardinal, c.to_cardinal];
}

impl [a: ToCardinal, b: ToCardinal, c: ToCardinal, d: ToCardinal] (a, b, c, d): ToNdCardinal {
    to_nd_cardinal = |(a, b, c, d)| [a.to_cardinal, b.to_cardinal, c.to_cardinal, d.to_cardinal];
}

// The index range (begin, end) of one dimension.
// ie. `begin <= index && index < end`
type Range = unbox struct {
    begin: I64,         // inclusive
    end: I64            // exclusive
};

namespace Range {
    // Creates an index range.
    make: I64 -> I64 -> Range;
    make = |begin, end| (
        Range { begin: begin, end: end }
    );

    // `Range::single(n)` is an index range `n`.
    single: I64 -> Range;
    single = |n| Range::make(n, n + 1);

    // `Range::all` is whole range.
    all: Range;
    all = Range::make(0, I64::maximum);
}

// `a.to_range` returns the range (begin, end) of one dimension.
trait a: ToRange {
    to_range: a -> (I64, I64);
}

impl Range: ToRange {
    to_range = |r| (r.@begin, r.@end);
}

impl I64: ToRange {
    to_range = |i| (i, i + 1);
}

impl (I64, I64): ToRange {
    to_range = |range| range;
}

impl Array I64: ToRange {
    to_range = |a| (a.@(0), a.@(1));
}

// range of n-dimension.
trait a: ToNdRange {
    to_nd_range: a -> Array (I64, I64);
}

impl [a: ToRange] Array a: ToNdRange {
    to_nd_range = |arr| arr.map(to_range);
}

impl [a: ToRange, b: ToRange] (a, b): ToNdRange {
    to_nd_range = |(a, b)| [a.to_range, b.to_range];
}

impl [a: ToRange, b: ToRange, c: ToRange] (a, b, c): ToNdRange {
    to_nd_range = |(a, b, c)| [a.to_range, b.to_range, c.to_range];
}

impl [a: ToRange, b: ToRange, c: ToRange, d: ToRange] (a, b, c, d): ToNdRange {
    to_nd_range = |(a, b, c)| [a.to_range, b.to_range, c.to_range, d.to_range];
}

// N-dimensional array.
type NdArray a = unbox struct {
    data: Array a,
    shape: Array I64,
    strides: Array I64,
    offset: I64
};

impl NdArray a: ToNdRange {
    to_nd_range = |ndarray| ndarray.@shape.map(|end| (0, end));
}

impl [a: ToString] NdArray a: ToString {
    to_string = NdArray::_to_string;
}

trait [f: * -> *] f: ToNdArray {
    to_nd_array: f a -> NdArray a;
}

namespace NdArray {
    // `NdArray::empty` is one-dimensional array with data `[]`.
    empty: NdArray a;
    empty = NdArray {
        data: [],
        shape: [0],
        strides: [1],
        offset: 0
    };

    // `NdArray::make(shape, data)` creates an n-dimensional array with 
    // specified shape and data.
    make: Array I64 -> Array a -> NdArray a;
    make = |shape, data| (
        let ndarray = NdArray {
            data: data,
            shape: [data.get_size],
            strides: [1],
            offset: 0
        };
        ndarray.reshape(shape)
    );

    // `NdArray::scalar` is one-dimensional array with data `[a]`.
    // It can be used as a constant with broadcasting.
    scalar: a -> NdArray a;
    scalar = |a| (
        NdArray {
            data: [a],
            shape: [1],
            strides: [1],
            offset: 0
        }
    );

    from_array: Array a -> NdArray a;
    from_array = |array| (
        make([array.get_size], array)
    );

    from_iter: Iterator a -> NdArray a;
    from_iter = |iter| (
        from_array(iter.to_array)
    );

    fill: Array I64 -> a -> NdArray a;
    fill = |shape, value| (
        let offset = 0;
        let (size, strides) = _calc_size_and_stride(shape);
        let data = Array::fill(size, value);
        NdArray {
            data: data,
            shape: shape,
            strides: strides,
            offset: offset
        }
    );

    zeros: [a: Zero] Array I64 -> NdArray a;
    zeros = |shape| (
        NdArray::fill(shape, zero)
    );

    arange: I64 -> I64 -> NdArray I64;
    arange = |begin, end| (
        if begin >= end { empty };
        let n = end - begin;
        let data = loop(
            (Array::empty(n), begin), |(data, i)|
            if i >= end { break $ data };
            continue $ (data.push_back(i), i + 1)
        );
        NdArray {
            data: data,
            shape: [n],
            strides: [1],
            offset: 0
        }
    );

    get_size: NdArray a -> I64;
    get_size = |ndarray| ndarray.@shape.to_iter.fold(1, |size, n| size * n);

    get_dim: NdArray a -> I64;
    get_dim = |ndarray| ndarray.@shape.get_size;

    // Returns shape except first dimension
    get_shape_tail: NdArray a -> Array I64;
    get_shape_tail = |ndarray| (
        let shape = ndarray.@shape;
        shape.get_sub(1, shape.get_size)
    );

    _assert_dim_equals: I64 -> NdArray a -> ();
    _assert_dim_equals = |dim, ndarray| (
        assert (|_| "dimension mismatch: " + dim.to_string + " != " + ndarray.get_dim.to_string,
                     dim == ndarray.get_dim)
    );

    _calc_size_and_stride: Array I64 -> (I64, Array I64);
    _calc_size_and_stride = |shape| (
        let (size, strides) = shape.to_iter.reverse.fold (
            (1, Iterator::empty), |(size, strides), n|
            let strides = strides.push_front(size);
            let size = size * n;
            (size, strides)
        );
        (size, strides.to_array)
    );

    _calc_offset: Array I64 -> NdArray a -> I64;
    _calc_offset = |idx, ndarray| (
        eval ndarray._assert_dim_equals(idx.get_size);
        loop(
            (0, ndarray.@offset), |(d, offset)|
            if d >= ndarray.@strides.get_size {
                break $ offset
            };
            let i = idx.@(d);
            let n = ndarray.@shape.@(d);
            let i = modulo(i, n);
            let offset = offset + ndarray.@strides.@(d) * i;
            continue $ (d + 1, offset)  
        )
    );

    get: [i: ToNdCardinal] i -> NdArray a -> a;
    get = |idx, ndarray| (
        let idx = idx.to_nd_cardinal;
        let offset = ndarray._calc_offset(idx);
        ndarray.@data.@(offset)
    );

    set: [i: ToNdCardinal] i -> a -> NdArray a -> NdArray a;
    set = |idx, value, ndarray| (
        let idx = idx.to_nd_cardinal;
        let offset = ndarray._calc_offset(idx);
        ndarray.mod_data(set(offset, value))
    );

    clamp_range: Array (I64, I64) -> NdArray a -> Array (I64, I64);
    clamp_range = |range, ndarray| (
        Iterator::range(0, ndarray.get_dim)
        .map(|d|
            let (begin, end) = range.@(d);
            let n = ndarray.@shape.@(d);
            // negative index wraps around
            let (begin, end) = (
                if begin >= 0 && end >= 0 { (begin, end) };
                let size = end - begin;
                let begin = modulo(begin, n);
                let end = begin + size;
                (begin, end)
            );
            // clamp index
            let begin = max(0, min(n, begin));
            let end = max(0, min(n, end));
            (begin, end)
        ).to_array
    );

    get_sub: [r: ToNdRange] r -> NdArray a -> NdArray a;
    get_sub = |range, ndarray| (
        let range: Array (I64, I64) = range.to_nd_range;
        eval ndarray._assert_dim_equals(range.get_size);
        let range = ndarray.clamp_range(range);
        let shape = range.map(|(begin, end)| end - begin);
        let index = range.map(|(begin, end)| begin);
        let offset = ndarray._calc_offset(index);
        ndarray.set_offset(offset).set_shape(shape)
    );

    set_sub: [r: ToNdRange] r -> NdArray a -> NdArray a -> NdArray a;
    set_sub = |range, sub, ndarray| (
        let src = sub;
        let dest = ndarray;
        let range = range.to_nd_range;
        eval src._assert_dim_equals(range.get_size);
        eval dest._assert_dim_equals(range.get_size);
        let range = dest.clamp_range(range);
        let dest_shape: Array I64 = range.map(|(begin, end)| end - begin);
        let dest_offset: I64 = dest._calc_offset(range.map(|(begin, end)| begin));
        _copy_loop(src, dest, src.@shape, dest_shape, src.@offset, dest_offset, 0)
    );

    ravel: NdArray a -> NdArray a;
    ravel = |src| (
        let data = src.to_array;
        NdArray::make([data.get_size], data)
    );

    _copy_new: NdArray a -> NdArray a;
    _copy_new = |src| (
        let (size, strides) = _calc_size_and_stride(src.@shape);
        let dest = NdArray {
            data: if size == 0 { 
                Array::empty(0)
            } else {
                Array::fill(size, src.@data.@(src.@offset))
            },
            shape: src.@shape,
            strides: strides,
            offset: 0
        };
        let dest = _copy_loop(src, dest, src.@shape, dest.@shape, src.@offset, dest.@offset, 0);
        dest
    );

    _copy_loop: NdArray a -> NdArray a -> Array I64 -> Array I64 -> I64 -> I64 -> I64 -> NdArray a;
    _copy_loop = |src, dest, src_shape, dest_shape, src_begin, dest_begin, dim| (
        let src_stride = src.@strides.@(dim);
        let dest_stride = dest.@strides.@(dim);
        let src_end = src_begin + src_stride * src_shape.@(dim);
        let dest_end = dest_begin + dest_stride * dest_shape.@(dim);
        let is_last_dim = (dim == dest.get_dim - 1);
        if is_last_dim {
            let src_data = src.@data;
            dest.mod_data(|dest_data|
                loop(
                    (dest_data, src_begin, dest_begin), |(dest_data, src_pos, dest_pos)|
                    if dest_pos >= dest_end {
                        break $ dest_data
                    };
                    // broadcasting
                    let src_pos = if src_pos < src_end { src_pos }
                    else { src_pos - src_end + src_begin };
                    // TODO loop-unrolling
                    let dest_data = dest_data.set(dest_pos, src_data.@(src_pos));
                    continue $ (dest_data, src_pos + src_stride, dest_pos + dest_stride)
                )
            )
        } else {
            loop(
                (dest, src_begin, dest_begin), |(dest, src_pos, dest_pos)|
                if dest_pos >= dest_end {
                    break $ dest
                };
                // broadcasting
                let src_pos = if src_pos < src_end { src_pos }
                else { src_pos - src_end + src_begin };
                let dest = _copy_loop(src, dest, src_shape, dest_shape, src_pos, dest_pos, dim + 1);
                continue $ (dest, src_pos + src_stride, dest_pos + dest_stride)
            )
        }
    );

    // `src.get_positions(dest_shape)` gets positions (ie. indices of `src.@data`) of `src`
    // as if `src` is broadcasted to `dest_shape`.
    get_positions: Array I64 -> NdArray a -> Array I64;
    get_positions = |dest_shape, src| (
        let positions: Array I64 = Array::empty(src.get_size);
        _get_positions_loop(src, positions, src.@shape, dest_shape, src.@offset, 0)
    );

    _get_positions_loop: NdArray a -> Array I64 -> Array I64 -> Array I64 -> I64 -> I64 -> Array I64;
    _get_positions_loop = |src, dest, src_shape, dest_shape, src_begin, dim| (
        let src_stride = src.@strides.@(dim);
        let src_end = src_begin + src_stride * src_shape.@(dim);
        let dest_stride = 1;
        let dest_begin = 0;
        let dest_end = dest_begin + dest_stride * dest_shape.@(dim);
        let is_last_dim = (dim == src.get_dim - 1);
        if is_last_dim {
            let src_data = src.@data;
            let dest = loop(
                (dest, src_begin, dest_begin), |(dest, src_pos, dest_pos)|
                if dest_pos >= dest_end {
                    break $ dest
                };
                // broadcasting
                let src_pos = if src_pos < src_end { src_pos }
                else { src_pos - src_end + src_begin };
                let dest = dest.push_back(src_pos);
                continue $ (dest, src_pos + src_stride, dest_pos + dest_stride)
            );
            dest
        } else {
            loop(
                (dest, src_begin, dest_begin), |(dest, src_pos, dest_pos)|
                if dest_pos >= dest_end {
                    break $ dest
                };
                // broadcasting
                let src_pos = if src_pos < src_end { src_pos }
                else { src_pos - src_end + src_begin };
                let dest = _get_positions_loop(src, dest, src_shape, dest_shape, src_pos, dim + 1);
                continue $ (dest, src_pos + src_stride, dest_pos + dest_stride)
            )
        }
    );

    to_array: NdArray a -> Array a;
    to_array = |src| (
        src.get_positions(src.@shape).map(|pos| src.@data.@(pos))
    );

    to_iter: NdArray a -> Iterator a;
    to_iter = |src| (
        src.to_array.to_iter
    );

    _map: (a -> b) -> NdArray a -> NdArray b;
    _map = |f, a| (
         NdArray::from_iter(a.to_iter.map(f)).reshape(a.@shape)
    );

    _map2: ((a, b) -> c) -> NdArray a -> NdArray b -> NdArray c;
    _map2 = |f, a, b| (
        let (a, b) = loop(
            (a, b), |(a, b)|
            if a.get_dim < b.get_dim { continue $ (a.expand_dims(0), b) };
            if a.get_dim > b.get_dim { continue $ (a, b.expand_dims(0)) };
            break $ (a, b)
        );
        eval assert(|_|"", a.get_dim == b.get_dim);
        let dest_shape = _array_zip(a.@shape, b.@shape).map(|(a,b)| max(a, b));
        let a_positions = a.get_positions(dest_shape);
        let b_positions = b.get_positions(dest_shape);
        let dest_array = _array_zip(a_positions, b_positions).map(|(pa,pb)|
            f $ (a.@data.@(pa), b.@data.@(pb))
        );
        NdArray::make(dest_shape, dest_array)
    );

    reshape: Array I64 -> NdArray a -> NdArray a;
    reshape = |shape, ndarray| (
        if ndarray.@shape == shape {
            ndarray
        };
        if ndarray.@offset != 0 {
            ndarray.ravel.reshape(shape)
        };
        eval assert(|_|"shape is empty", shape.get_size > 0);
        // check that shape.@(i) >= 0 except for i == 0
        eval shape.set(0, 0).to_iter.fold (
            (), |_, n|
            assert(|_|"invalid shape: " + n.to_string, n >= 0)
        );
        // if first element of shape is negative, calculate it automatically
        let shape = if shape.@(0) >= 0 { shape } else {
            let (size1, _) = _calc_size_and_stride(shape.get_sub(1, shape.get_size));
            let n = ndarray.get_size / size1;
            shape.set(0, n)
        };
        let (size, strides) = _calc_size_and_stride(shape);
        let old_size = ndarray.@data.get_size;
        eval assert(|_| "reshape failed: size overflow: " + 
                    old_size.to_string + " < " + size.to_string,
                    old_size >= size);
        let offset = 0;
        NdArray {
            data: ndarray.@data,
            shape: shape,
            strides: strides,
            offset: offset
        }
    );

    // `array._array_insert(i, v)` inserts `v` into `array` at position `i`.
    _array_insert: I64 -> a -> Array a -> Array a;
    _array_insert = |i, v, array| (
        let n = array.get_size;
        eval assert(|_| "_array_insert: index out of range", 0 <= i && i <= n);
        let output = Array::empty(n + 1);
        loop(
            (output, 0), |(output, j)|
            if j >= n {
                break $ if i == n { output.push_back(v) } else { output }
            }; 
            let output = if i == j { output.push_back(v) } else { output };
            let output = output.push_back(array.@(j));
            continue $ (output, j + 1)
        )
    );

    // `array._array_remove(i)` removes an element at position `i` from `array`.
    _array_remove: I64 -> Array a -> Array a;
    _array_remove = |i, array| (
        let n = array.get_size;
        eval assert(|_| "_array_remove: index out of range", 0 <= i && i < n);
        let output = Array::empty(n - 1);
        loop(
            (output, 0), |(output, j)|
            if j >= n {
                break $ output
            }; 
            let output = if i != j { output.push_back(v) } else { output };
            continue $ (output, j + 1)
        )
    );

    // `a._array_zip(b)` zips two arrays.
    // Same as `a.to_iter.zip(b.to_iter).to_array`, but runs 50 times faster.
    _array_zip: Array a -> Array b -> Array (a, b);
    _array_zip = |a, b| (
        let n = min(a.get_size, b.get_size);
        let c = Array::empty(n);
        loop(
            (c, 0), |(c, i)|
            if i >= n { break $ c };
            let val = (a.@(i), b.@(i));
            let c = c.push_back(val);
            continue $ (c, i + 1)
        )
    );

    // Inserts a new axis to an NdArray.
    expand_dims: I64 -> NdArray a -> NdArray a;
    expand_dims = |axis, ndarray| (
        let size = ndarray.get_size;
        let shape = ndarray.@shape._array_insert(axis, 1);
        let strides = ndarray.@strides._array_insert(axis, size);
        ndarray.set_shape(shape).set_strides(strides)
    );

    // Removes specified axis (of length any) from an NdArray.
    shrink_dims: I64 -> NdArray a -> NdArray a;
    shrink_dims = |axis, ndarray| (
        let shape = ndarray.@shape._array_remove(axis);
        let strides = ndarray.@strides._array_remove(axis);
        ndarray.set_shape(shape).set_strides(strides)
    );

    // Removes specified axis of length one from an NdArray.
    squeeze: I64 -> NdArray a -> NdArray a;
    squeeze = |axis, ndarray| (
        eval assert(|_| "squeeze: not length one", ndarray.@shape.@(axis) == 1);
        ndarray.shrink_dims(axis)
    );

    // Transposes an NdArray.
    transpose: NdArray a -> NdArray a;
    transpose = |ndarray| (
        eval assert (|_| "transpose: dimension mismatch", ndarray.get_dim >= 2);
        ndarray.swapaxes(0, 1)
    );

    // Swaps two axes of an NdArray.
    swapaxes: I64 -> I64 -> NdArray a -> NdArray a;
    swapaxes = |i, j, ndarray| (
        eval assert (|_| "swapaxes: dimension out of range",
            0 <= i && i < ndarray.get_dim &&
            0 <= j && j < ndarray.get_dim);
        let swap = |a| let tmp = a.@(i) in a.set(i, a.@(j)).set(j, tmp);
        ndarray.mod_shape(swap).mod_strides(swap)
    );

    // Joins a sequence of NdArrays along a new axis.
    // Each NdArray must have the same shape.
    stack: [a: ToString] I64 -> Array (NdArray a) -> NdArray a;
    stack = |axis, children| (
        //eval debug_println("stack children="+children.to_string);
        let child_count = children.get_size;
        if (child_count == 0) { NdArray::empty };
        let first_child = children.@(0);
        let child_shape = first_child.@shape;
        eval Iterator::range(1, child_count).fold(
            (), |_, i|
            let child = children.@(i);
            assert (|_| "stack: shapes of children must be same", child_shape == child.@shape)
        );
        eval assert(|_| "axis out of range", 0 <= axis && axis <= child_shape.get_size);
        let parent_shape = child_shape._array_insert(axis, child_count);
        let (parent_size, parent_stride) = _calc_size_and_stride(parent_shape);
        if parent_size == 0 {
            NdArray {
                data: Array::empty(0),
                shape: parent_shape,
                strides: parent_stride,
                offset: 0
            }
        };
        // child size > 0 because parent_size > 0
        let initial_value = first_child.@data.@(0);
        let parent = NdArray::fill(parent_shape, initial_value);
        let parent = Iterator::range(0, child_count).fold(
            parent, |parent, i|
            let child = children.@(i);
            //eval debug_println("parent.set_sub i="+i.to_string+" child="+child.to_string);
            let child = child.expand_dims(axis);
            //eval debug_println("parent.set_sub parent="+parent.to_string);
            let parent_range = child.to_nd_range.set(axis, i.to_range);
            //eval debug_println("parent.set_sub range="+parent_range.to_iter.map(to_string).join(","));
            parent.set_sub(parent_range, child)
        );
        parent
    );

    _next_index: Array I64 -> Array I64 -> Array I64;
    _next_index = |shape, idx| (
        let ndim = shape.get_size;
        loop(
            (idx, ndim - 1), |(idx, dim)|
            if dim < 0 {
                idx
            };
            let idx = idx.mod(dim, |i| i + 1);
            if idx.@(dim) < shape.@(dim) {
                idx
            };
            let idx = idx.set(dim, 0);
            (idx, dim - 1)
        )
    );

    _to_string: [a: ToString] NdArray a -> String;
    _to_string = |ndarray| (
        let output: Array String = Array::empty(ndarray.get_size * 3);
        let idx: Array I64 = Array::fill(ndarray.get_dim, 0);
        let (output, idx) = ndarray._to_string_loop((output, idx), 0);
        output.to_iter.concat_iter
    );

    _to_string_loop: [a: ToString] (Array String, Array I64) -> I64 -> NdArray a -> (Array String, Array I64);
    _to_string_loop = |(output, idx), dim, ndarray| (
        let count = ndarray.@shape.@(dim);
        let is_last_dim =  (dim == ndarray.@shape.get_size - 1);
        let output = output.push_back("[");
        let (output, idx) = loop(
            (output, idx, 0), |(output, idx, i)|
            if i >= count {
                break $ (output, idx)
            };
            let idx = idx.set(dim, i);
            let (output, idx) = if is_last_dim {
                let v = ndarray.get(idx);
                let output = if idx.@(dim) == 0 { output } else { output.push_back(",") };
                let output = output.push_back(v.to_string);
                (output, idx)
            } else {
                ndarray._to_string_loop((output, idx), dim + 1)
            };
            continue $ (output, idx, i + 1)
        );
        let output = output.push_back("]");
        (output, idx)
    );
}

impl NdArray: Functor {
    map = _map;
}

impl [a: Eq] NdArray a: Eq {
    eq = |a,b| (
        a.@shape == b.@shape &&
        a.to_iter.zip(b.to_iter).loop_iter(
            true, |_, (a, b)|
            if a != b { break $ false };
            continue $ true
        )
    );
}

impl [a: Neg] NdArray a: Neg {
    neg = |a| a.map(neg);
}

impl [a: Add] NdArray a: Add {
    add = |a,b| _map2(|(a,b)| a + b, a, b);
}

impl [a: Sub] NdArray a: Sub {
    sub = |a,b| _map2(|(a,b)| a - b, a, b);
}

impl [a: Mul] NdArray a: Mul {
    mul = |a,b| _map2(|(a,b)| a * b, a, b);
}

impl [a: Div] NdArray a: Div {
    div = |a,b| _map2(|(a,b)| a / b, a, b);
}

impl [a: Rem] NdArray a: Rem {
    rem = |a,b| _map2(|(a,b)| a % b, a, b);
}

