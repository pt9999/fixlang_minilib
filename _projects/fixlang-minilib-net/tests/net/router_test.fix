module RouterTest;

import HashMap;

import Minilib.Net.Router;
import Minilib.Testing.UnitTest;

create_simple_router: () -> Router String;
create_simple_router = |_| (
    let router: Router String = Router::empty;
    let router = router.insert("GET", "/", "index");
    let router = router.insert("GET", "/users", "users");
    let router = router.insert("POST", "/users", "users-post");
    let router = router.insert("GET", "/users/1", "users-1");
    router
);

test_router_find_ok: (String, String, Option String) -> TestCase;
test_router_find_ok = |(method, path, expected)| (
    let testname = "test_router_find_ok(" + method + " " + path + ")";
    make_test(testname) $ |_|
    let router = create_simple_router();
    let actual = router.find(method, path);
    assert_equal("eq", expected, actual)
);

test_router_find: TestCase;
test_router_find = (
    [
        test_router_find_ok $ ("", "", none()),
        test_router_find_ok $ ("XXX", "", none()),
        test_router_find_ok $ ("GET", "", some("index")),
        test_router_find_ok $ ("GET", "/", some("index")),
        test_router_find_ok $ ("GET", "//", some("index")),
        test_router_find_ok $ ("POST", "", none()),
        test_router_find_ok $ ("GET", "xxx", none()),
        test_router_find_ok $ ("GET", "users", some("users")),
        test_router_find_ok $ ("GET", "/users", some("users")),
        test_router_find_ok $ ("GET", "//users//", some("users")),
        test_router_find_ok $ ("GET", "/users/1", some("users-1")),
        test_router_find_ok $ ("GET", "//users//1//", some("users-1")),
        test_router_find_ok $ ("POST", "/users", some("users-post")),
        test_router_find_ok $ ("POST", "/users/1", none()),
        TestCase::empty
    ]
    .run_tests
);

main: IO ();
main = (
    [
        test_router_find,
        TestCase::empty
    ]
    .run_test_driver
);

