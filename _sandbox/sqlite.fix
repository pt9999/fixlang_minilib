// 実行方法: fix run -d sqlite3 -f sqlite3.fix
// ビルド方法: fix build -d sqlite3 -f sqlite3.fix
// 実行時にSIGSEGVが起きる問題があったが、ランタイムライブラリのリンク時に-Wl,--no-as-needed を付けたら動くようになった。
// またビルド時はライブラリを最後にリンクしたら動くようになった。

module Main;


_sqlite3_open: String -> IOFail Ptr;
_sqlite3_open = |filepath| (
    let pdb : Array Ptr = Array::fill(1, nullptr);
    let (pdb, res) = *pdb.mutate_boxed_io(|p_pdb|
        filepath.borrow_c_str(|p_filepath|
            FFI_CALL_IO[I32 sqlite3_open(Ptr, Ptr), p_filepath, p_pdb]
        )
    ).lift;
    if res != 0_I32 {
        throw $ "sqlite3_open failed: res = " + res.to_string
    };
    let db = pdb.@(0);
    pure $ db
);

_sqlite3_close: Ptr -> IOFail ();
_sqlite3_close = |db| (
    let res = *FFI_CALL_IO[I32 sqlite3_close(Ptr), db].lift;
    if res != 0_I32 {
        throw $ "sqlite3_close failed: res = " + res.to_string
    };
    pure $ ()
);

_sqlite3_prepare_v2: Ptr -> String -> IOFail Ptr;
_sqlite3_prepare_v2 = |db, sql| (
    let nbyte = sql.get_size.to_I32;
    let pstmt: Array Ptr = Array::fill(1, nullptr);
    let ztail: Array Ptr = Array::fill(1, nullptr);
    let (ztail, (pstmt, res)) = *(
        ztail.mutate_boxed_io(|pztail|
            pstmt.mutate_boxed_io(|ppstmt|
                sql.borrow_c_str(|zsql|
                    FFI_CALL_IO[I32 sqlite3_prepare_v2(Ptr, Ptr, I32, Ptr, Ptr), db, zsql, nbyte, ppstmt, pztail]
                )
            )
        )
    ).lift;
    // TODO: check ztail
    if res != 0_I32 {
        throw $ "sqlite3_prepare_v2 failed: res = " + res.to_string + " sql=" + sql
    };
    let stmt = pstmt.@(0);
    pure $ stmt
);

_sqlite3_finalize: Ptr -> IOFail ();
_sqlite3_finalize = |stmt| (
    let res = *FFI_CALL_IO[I32 sqlite3_finalize(Ptr), stmt].lift;
    if res != 0_I32 {
        throw $ "sqlite3_finalize failed: res = " + res.to_string
    };
    pure $ ()
);

_sqlite3_step: Ptr -> IOFail ();
_sqlite3_step = |stmt| (
    let res = *FFI_CALL_IO[I32 sqlite3_step(Ptr), stmt].lift;
    if res != 0_I32 && res != /* SQLITE_ROW: */ 100_I32 && res != /* SQLITE_DONE: */ 101_I32 {
        throw $ "sqlite3_step failed: res = " + res.to_string
    };
    pure $ ()
);

_SQLITE_INTEGER: I32;
_SQLITE_INTEGER = 1_I32;
_SQLITE_FLOAT: I32;
_SQLITE_FLOAT = 2_I32;
_SQLITE_TEXT: I32;
_SQLITE_TEXT = 3_I32;
_SQLITE_BLOB: I32;
_SQLITE_BLOB = 4_I32;
_SQLITE_NULL: I32;
_SQLITE_NULL = 5_I32;

_sqlite3_column_type: I64 -> Ptr -> IOFail I32;
_sqlite3_column_type = |icol, stmt| (
    FFI_CALL_IO[I32 sqlite3_column_type(Ptr, I32), stmt, icol.to_I32].lift
);

_sqlite3_column_int: I64 -> Ptr -> IOFail I32;
_sqlite3_column_int = |icol, stmt| (
    FFI_CALL_IO[I32 sqlite3_column_int(Ptr, I32), stmt, icol.to_I32].lift
);

_sqlite3_column_text: I64 -> Ptr -> IOFail String;
_sqlite3_column_text = |icol, stmt| (
    //eval debug_eprintln("get text: icol="+icol.to_string);
    let ptr = *FFI_CALL_IO[Ptr sqlite3_column_text(Ptr, I32), stmt, icol.to_I32].lift;
    //eval debug_eprintln("get text done: icol="+icol.to_string);
    let str = _unsafe_from_c_str_ptr(ptr);
    pure $ str
);

namespace BorrowUtil {
    lift_borrow: ((ptr -> IO (Result ErrMsg b)) -> a -> IO (Result ErrMsg c)) -> ((ptr -> IOFail b) -> a -> IOFail c);
    lift_borrow = |borrow| (
        |f, a| a.borrow(f >> to_result).from_io_result
    );

    borrow_iofail: (ptr -> IOFail b) -> Destructor ptr -> IOFail b;
    borrow_iofail = lift_borrow(borrow_io);
    /*
    borrow_iofail = |f, dtor| (
        //dtor.borrow_io(f >> to_result).from_io_result
        let ff: a -> IO (Result ErrMsg b) = f >> to_result;
        let iof: IO (Result ErrMsg b) = dtor.borrow_io(ff);
        iof.from_io_result
    );
    */
}

type Sqlite = unbox struct {
    dtor: Destructor Ptr
};

namespace Sqlite {
    open: String -> IOFail Sqlite;
    open = |filepath| (
        let db = *_sqlite3_open(filepath);
        let dtor = Destructor::make(db, |db|
            eval debug_eprintln ("closing db");
            _sqlite3_close(db).try(eprintln);;
            pure $ nullptr
        );
        pure $ Sqlite { dtor:dtor }
    );
}

type Statement = unbox struct {
    db: Sqlite,
    dtor: Destructor Ptr
};

namespace Statement {
    prepare: String -> Sqlite -> IOFail Statement;
    prepare = |sql, db| (
        eval debug_eprintln ("prepare: "+ sql);
        db.@dtor.borrow(|pdb|
            let stmt = *_sqlite3_prepare_v2(pdb, sql);
            let dtor = Destructor::make(stmt, |stmt|
                eval debug_eprintln ("finalizing statement");
                _sqlite3_finalize(stmt).try(eprintln);;
                pure $ nullptr
            );
            pure $ Statement { db:db, dtor:dtor }
        )
    );

    step: Statement -> IOFail ();
    step = |stmt| (
        stmt.@dtor.borrow_iofail(|stmt|
            _sqlite3_step(stmt)
        )
    );

    column_type: I64 -> Statement -> IOFail I32;
    column_type = |icol, stmt| (
        stmt.@dtor.borrow_iofail(|stmt|
            _sqlite3_column_type(icol, stmt)
        )
    );

    column_int: I64 -> Statement -> IOFail I32;
    column_int = |icol, stmt| (
        stmt.@dtor.borrow_iofail(|stmt|
            _sqlite3_column_int(icol, stmt)
        )
    );

    column_text: I64 -> Statement -> IOFail String;
    column_text = |icol, stmt| (
        stmt.@dtor.borrow_iofail(|stmt|
            let val = *_sqlite3_column_text(icol, stmt);
            pure $ val
        )
    );

    column_to_string: I64 -> Statement -> IOFail (Option String);
    column_to_string = |icol, stmt| (
        let typ = *stmt.column_type(icol);
        if (typ == _SQLITE_INTEGER) {
            pure $ some $ (*stmt.column_int(icol)).to_string
        };
        if (typ == _SQLITE_TEXT) {
            pure $ some $ *stmt.column_text(icol)
        };
        pure $ none()
    );

    row: Statement -> IOFail (Array String);
    row = |stmt| (
        loop_m(
            (Array::empty(100), 0), |(array, i)|
            /*
            let typ = *_sqlite3_column_type(i, stmt);
            //let _ = *println("typ=" + typ.to_string).lift;
            if typ <= 0_I32 || typ == _SQLITE_NULL {
                break_m $ array
            };
            let res = *_sqlite3_column_text(i, stmt).to_result.lift;
            if res.is_err {
                break_m $ array
            };
            let array = array.push_back(res.as_ok);
            */
            let str = *stmt.column_to_string(i);
            if str.is_none {
                break_m $ array
            };
            let array = array.push_back(str.as_some);
            continue_m $ (array, i + 1)
        )
    );

}

step_and_show: Statement -> IOFail ();
step_and_show = |stmt| (
    let _ = *stmt.step;
    let row = *stmt.row;
    let _ = *println("> " + row.to_iter.join(",")).lift;
    pure $ ()
);

main: IO ();
main = (
    do {
        //let ptr = *_sqlite3_open("a.db");
        let db = *Sqlite::open("a.db");
        let stmt = *db.prepare("DROP TABLE IF EXISTS t1;");
        let _ = *stmt.step_and_show;
        let stmt = *db.prepare("CREATE TABLE t1 (a int, b text);");
        let _ = *stmt.step_and_show;
        let stmt = *db.prepare("INSERT INTO t1 VALUES (123, 'hello');");
        let _ = *stmt.step_and_show;
        let stmt = *db.prepare("SELECT * FROM t1;");
        let _ = *stmt.step_and_show;
        pure()
    }
    .try(|err| eprintln(err))
);
