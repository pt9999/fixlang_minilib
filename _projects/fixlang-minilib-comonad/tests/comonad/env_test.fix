module EnvTest;


import Minilib.Comonad.Env;
//import Minilib.Trait.Monoid;
//import Minilib.Trait.Semigroup;
import Minilib.Trait.Comonad;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_env_functor: TestCase;
test_env_functor = (
    make_test("test_env_functor") $ |_|
    let e = env(["a"], 2);
    let e = e.map(add(1));
    let e = e.map(to_string);
    assert_equal("eq", (["a"], "3"), e.to_tuple)
);

type User = unbox struct {
    name: String,
    age: I64
};

user: String -> I64 -> User;
user = |name, age| User { name: name, age: age };

add_name: Env User (Array String) -> Array String;
add_name = |e| e.get_value.push_back("name=" + e.get_env.@name);

add_age: Env User (Array String) -> Array String;
add_age = |e| e.get_value.push_back("age=" + e.get_env.@age.to_string);

get_profile: Env User a -> String;
get_profile = |e| (
    let e = e.map(|_| []);
    let e = e.extend(add_name).extend(add_age);
    e.get_value.to_iter.join(",")
);

test_env_comonad: TestCase;
test_env_comonad = (
    make_test("test_env_comonad") $ |_|
    let e = env(user("taro", 12), ());
    let _ = *assert_equal("eq", "name=taro,age=12", e.get_profile);
    let e = env(user("hanako", 11), ());
    let _ = *assert_equal("eq", "name=hanako,age=11", e.get_profile);
    pure()
);

test_env_comonad_laws: TestCase;
test_env_comonad_laws = (
    make_test("test_env_comonad_laws") $ |_|
    let w = env("a", 1);
    let f: Env String I64 -> String = |w| w.get_env + w.get_value.to_string;
    let g: Env String String -> String = |w| w.get_value.to_string + w.get_env;
    let _ = *assert_equal("", ("a", 1), w.extend(extract).to_tuple);
    let _ = *assert_equal("", "a1", w.extend(f).extract);
    let _ = *assert_equal("", ("a", "a1a"), w.extend(f).extend(g).to_tuple);
    let _ = *assert_equal("", ("a", "a1a"), w.extend(extend(f) >> g).to_tuple);
    let _ = *assert_equal("", ("a", 1), w.duplicate.extract.to_tuple);
    let _ = *assert_equal("", ("a", 1), w.duplicate.map(extract).to_tuple);
    let _ = *assert_equal("", ("a", "a1"), w.extend(f).to_tuple);
    let _ = *assert_equal("", ("a", "a1"), w.duplicate.map(f).to_tuple);
    let _ = *assert_equal("", ("a", "1"), w.map(to_string).to_tuple);
    let _ = *assert_equal("", ("a", "1"), w.extend(to_string << extract).to_tuple);
    pure()
);

main: IO ();
main = (
    [
        test_env_functor,
        test_env_comonad,
        test_env_comonad_laws,
        TestCase::empty
    ]
    .run_test_driver
);

