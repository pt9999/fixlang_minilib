// X.509 Certificate module
//
// RFC 5280 - Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile
// https://tex2e.github.io/rfc-translater/html/rfc5280.html
module Minilib.Crypto.X509;

import Minilib.Crypto.Asn1.Der;
import Minilib.Encoding.Binary;
import Minilib.Monad.State;
import Minilib.Monad.Error;
import Minilib.Monad.Trans;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;

// 4.1. Basic Certificate Fields

type Certificate = unbox struct {
    tbs_certificate: TBSCertificate,
    signature_algorithm:   AlgorithmIdentifier,
    signature_value: BitString,
};

impl Certificate: DecodeDer {
    decode_obj = (
        decode_sequence $ do {
            let tbs_certificate = *decode_obj;
            let signature_algorithm = *decode_obj;
            let signature_value = *decode_bit_string;
            pure $ Certificate {
                tbs_certificate: tbs_certificate,
                signature_algorithm: signature_algorithm,
                signature_value: signature_value
            }
        }
    );
}

type TBSCertificate = unbox struct {
    version: Version,
    serial_number: CertificateSerialNumber,
    signature: AlgorithmIdentifier,
    issuer: Name,
    validity: Validity,
    subject: Name,
    subject_public_key_info: SubjectPublicKeyInfo,
    issuer_unique_id: Option UniqueIdentifier,
    subject_unique_id: Option UniqueIdentifier,
    extensions: Option Extensions,
};

impl TBSCertificate: DecodeDer {
    decode_obj = (
        decode_sequence $ do {
            let version = *decode_integer;
            let serial_number = *decode_bigint;
            let signature = *decode_obj;
            let issuer = *decode_obj;
            let validity = *decode_obj;
            let subject = *decode_obj;
            pure $ TBSCertificate {
                version: version,
                serial_number: serial_number,
                signature: signature,
                issuer: issuer,
                validity: validity,
                subject: subject,
                subject_public_key_info: subject_public_key_info,
                issuer_unique_id: issuer_unique_id,
                subject_unique_id: subject_unique_id,
                extensions: extensions,
            }
        }
    );
}

type Version = Asn1::Integer; // v1(0), v2(1), v3(2)

type CertificateSerialNumber = BigInt;

type Validity = unbox struct {
    notBefore: Time,
    notAfter: Time,
};

type Time = String;

type UniqueIdentifier = BitString;

// 4.1.2.4. Issuer

type Name = RDNSequence;

type RDNSequence = Array RelativeDistinguishedName;

impl RDNSequence: DecodeDer {
    decode_obj = (
        decode_sequence_of(decode_obj)
    );
}

type RelativeDistinguishedName = Array AttributeTypeAndValue;

impl RelativeDistinguishedName: DecodeDer {
    decode_obj = (
        decode_sequence_of(decode_obj)
    );
}

type AttributeTypeAndValue = unbox struct {
    type_: AttributeType,
    value: AttributeValue,
};


