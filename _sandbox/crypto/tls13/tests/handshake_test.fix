module Main;

import AsyncTask;
import Random;
import Debug;

import Minilib.Crypto.Tls13.ECDHE;
import Minilib.Crypto.Tls13.Types;
//import Minilib.Crypto.Tls13.Connection;
//import Minilib.Crypto.Tls13.MemConnection;
import Minilib.Crypto.Tls13.Handshake;
import Minilib.Encoding.Binary;
//import Minilib.Monad.FunctorM;
import Minilib.Monad.State;
import Minilib.Text.Hex;
//import Minilib.Text.StringEx;
import Minilib.Thread.Time;
import Minilib.Testing.UnitTest;

test_client_hello: TestCase;
test_client_hello = (
    make_test("test_client_hello") $ |_|
    let random = Random::init_by_seed(123_U64);
    let var_random = *Var::make(random).lift;
    let (hello, _) = *do {
        ClientHelloState::make("localhost")
    }.run_state_t(var_random);
    eval *println(hello.@client_hello.marshal_to_bytes.to_string_hex).lift;
    eval *println(hello.@ecdhe.get_pub_key.to_string_hex).lift;
    pure()
);

main: IO ();
main = (
    [
        test_client_hello,
    ]
    .run_test_driver
);
