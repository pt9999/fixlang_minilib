// Arbitrary-precision natural number. This is internal module of BigInt.
module Minilib.Math.BigNat;

import Math;
import Random;

import Minilib.Common.Common;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;

// Natural numbers, ie. n >= 0
// Digits are ordered from least significant to most significant.
//type BigNat = Array U32;

// The base of BigNat. It must be power of 2.
_base: U64;
_base = 0x100000000_U64;    // 1_U64.shift_left(_log2_base)

// log2 of base. It must be power of 2 and `0 <= _log2_base <= 32`.
_log2_base: U64;
_log2_base = 32_U64;    // 1_U64.shift_left(_log2_log2_base)

// log2(log2(base)). It must be `0 <= _log2_log2_base <= 5`.
_log2_log2_base: U64;
_log2_log2_base = 5_U64;

_dummy: ();
_dummy = (
    assert_lazy(|_|"invalid _log2_base", _log2_base == 1_U64.shift_left(_log2_log2_base)) $ |_|
    assert_lazy(|_|"invalid _base", _base == 1_U64.shift_left(_log2_base)) $ |_|
    ()
);

// divmod by _log2_base.
_divmod_log2_base: U64 -> (U64, U64);
_divmod_log2_base = |x| (
    (x.shift_right(_log2_log2_base.to_U64), x.bit_and(_log2_base.to_U64 - 1_U64))
);

// divmod by _base.
_divmod_base: U64 -> (U64, U64);
_divmod_base = |x| (
    (x.shift_right(_log2_base.to_U64), x.bit_and(_base - 1_U64))
);

// Removes trailing zeros.
_remove_last_zeros: Array U32 -> Array U32;
_remove_last_zeros = |a| (
    let n = a.get_size;
    if n <= 1 { a };
    if a.@(n-1) != 0_U32 { a };
    let a = a.pop_back;
    a._remove_last_zeros      // tail recursion
);

// Converts U64 to BigNat.
_from_u64: U64 -> Array U32;
_from_u64 = |u64| (
    loop(
        ([], u64), |(a, u64)|
        if u64 == 0_U64 && a.get_size > 0 {
            break $ a
        };
        let (quo, rem) = _divmod_base(u64);
        let a = a.push_back(rem.to_U32);
        continue $ (a, quo)
    )
);

// Returns true if BigNat is zero.
_is_zero: Array U32 -> Bool;
_is_zero = |a| (
    loop(
        a.get_size - 1, |i|
        if i < 0 { break $ true };
        if a.@(i) != 0_U32 { break $ false };
        continue $ i - 1
    )
);

// Converts BigNat to U64. If overflow, it produces unexpected result.
_to_u64: Array U32 -> U64;
_to_u64 = |a| (
    loop(
        (0_U64, a.get_size - 1), |(sum, i)|
        if i < 0 { break $ sum };
        let sum = sum * _base + a.@(i).to_U64;
        continue $ (sum, i - 1)
    )
);

// Calculates `sign(a0 * _base ^ offset0 - a1 * _base ^ offset1)`.
_cmp: (Array U32, I64) -> (Array U32, I64) -> I64;
_cmp = |(a0, offset0), (a1, offset1)| (
    let n0 = a0.get_size + offset0;
    let n1 = a1.get_size + offset1;
    let n = max(n0, n1);
    loop(
        n-1, |i|
        if i < offset0 && i < offset1 { break $ 0 };
        let d0: U32 = if offset0 <= i && i < n0 { a0.@(i - offset0) } else { 0_U32 };
        let d1: U32 = if offset1 <= i && i < n1 { a1.@(i - offset1) } else { 0_U32 };
        if d0 < d1 { break $ -1 };
        if d0 > d1 { break $  1 };
        continue $ i - 1
    )
);


// Calculates `a0 + a1`.
_add: Array U32 -> Array U32 -> Array U32;
_add = |a0, a1| (
    let n0 = a0.get_size;
    let n1 = a1.get_size;
    if n0 < n1 { _add(a1, a0) };
    let a0 = loop(
        (a0, 0, 0_U64), |(a0, i, carry)|
        if (i >= n0 || i >= n1) && carry == 0_U64 {
            break $ a0
        };
        let d0: U32 = if i < n0 { a0.@(i) } else { 0_U32 };
        let d1: U32 = if i < n1 { a1.@(i) } else { 0_U32 };
        let d0: U64 = d0.to_U64 + d1.to_U64 + carry;
        let (carry, d0) = _divmod_base(d0);
        let a0 = if i < n0 { a0.set(i, d0.to_U32) } else { a0.push_back(d0.to_U32) };
        continue $ (a0, i + 1, carry)
    );
    a0._remove_last_zeros
);

// Calculates `a0 + a1 * _base ^ offset1`.
_add_with_offset1: Array U32 -> (Array U32, I64) -> Array U32;
_add_with_offset1 = |a0, (a1, offset1)| (
    let n0 = a0.get_size;
    let n1 = a1.get_size + offset1;
    let n2 = max(n0, n1);
    let a0 = loop (
        a0, |a0|
        if a0.get_size >= n2 { break $ a0 };
        continue $ a0.push_back(0_U32)
    );
    loop(
        (a0, offset1, 0_U64), |(a0, i, carry)|
        if i >= n2 {
            let a0 = if carry == 0_U64 { a0 }
            else { a0.push_back(carry.to_U32) };
            break $ a0
        };
        if i >= n1 && carry == 0_U64 {
            break $ a0
        };
        let d0: U32 = a0.@(i);
        let d1: U32 = if i < n1 { a1.@(i - offset1) } else { 0_U32 };
        let d2: U64 = d0.to_U64 + d1.to_U64 + carry;
        let (carry, d2) = _divmod_base(d2);
        let a0 = a0.set(i, d2.to_U32);
        continue $ (a0, i + 1, carry)
    )._remove_last_zeros
);

// Calculates `a0 - a1`.
// Aborts if the result is negative.
_sub: Array U32 -> Array U32 -> Array U32;
_sub = |a0, a1| (
    let ((a2, offset2), sign2) = _signed_sub_with_offset((a0, 0), (a1, 0));
    if sign2 < 0 {
        undefined("BitNat::_sub: underflow")
    };
    a2
);

// Calculates `a0 * pow(_base, offset0) - a1 * pow(_base, offset1)`.
// returns the result and the sign.
_signed_sub_with_offset: (Array U32, I64) -> (Array U32, I64) -> ((Array U32, I64), I64);
_signed_sub_with_offset = |(a0, offset0), (a1, offset1)| (
    let n0 = a0.get_size + offset0;
    let n1 = a1.get_size + offset1;
    let n2 = max(n0, n1);
    let offset2 = min(offset0, offset1);
    let a2 = Array::empty(n2 - offset2);
    let (a2, borrow) = loop(
        (a2, offset2, 0_U64), |(a2, i, borrow)|
        if i >= n0 && i >= n1  {
            break $ (a2, borrow)
        };
        let d0: U32 = if offset0 <= i && i < n0 { a0.@(i - offset0) } else { 0_U32 };
        let d1: U32 = if offset1 <= i && i < n1 { a1.@(i - offset1) } else { 0_U32 };
        let d0: U64 = d0.to_U64;
        let d1: U64 = d1.to_U64 + borrow;
        let (borrow, d2) = if d0 >= d1 {
            (0_U64, d0 - d1)
        } else {
            (1_U64, _base + d0 - d1)
        };
        let a2 = a2.push_back(d2.to_U32);
        continue $ (a2, i + 1, borrow)
    );
    if borrow > 0_U64 {
        let a2 = a2._neg;
        let a2 = a2._remove_last_zeros;
        ((a2, offset2), -1)
    };
    let a2 = a2._remove_last_zeros;
    ((a2, offset2), 1)
);

// Treats `a` as a negative number in two's complement representation and reverses its sign.
_neg: Array U32 -> Array U32;
_neg = |a| (
    if a._is_zero { a };
    let mask = (_base - 1_U64).to_U32;
    loop(
        (a, a.get_size - 1), |(a, i)|
        if i < 0 {
            break $ _add(a, _one)
        };
        let a = a.mod(i, bit_xor(mask));
        continue $ (a, i - 1)
    )
);

// Calculates `d0 * a1`.
_mul_u32: U32 -> Array U32 -> Array U32;
_mul_u32 = |d0, a1| (
    let n1 = a1.get_size;
    let n2 = n1 + 1;
    let a2 = Array::empty(n2);
    let a2 = loop(
        (a2, 0, 0_U64), |(a2, i, carry)|
        if i >= n1 && carry == 0_U64 {
            break $ a2
        };
        let d1: U32 = if 0 <= i && i < n1 { a1.@(i) } else { 0_U32 };
        let d2: U64 = d0.to_U64 * d1.to_U64 + carry;
        let (carry, d2) = _divmod_base(d2);
        let a2 = a2.push_back(d2.to_U32);
        continue $ (a2, i + 1, carry)
    );
    a2
);

// Calculates `a0 * a1`.
_mul: Array U32 -> Array U32 -> Array U32;
_mul = |a0, a1| (
    let a0 = a0._remove_last_zeros;
    let a1 = a1._remove_last_zeros;
    let n0 = a0.get_size;
    let n1 = a1.get_size;
    let (a0, n0, a1, n1) = if n0 <= n1 {
        (a0, n0, a1, n1)
    } else {
        (a1, n1, a0, n0)
    };
    if n0 == 1 {
        _mul_u32(a0.@(0), a1)
    };
    let n2 = n0 + n1 + 1;
    let a2 = Array::fill(n2, 0_U32);
    loop(
        (a2, 0), |(a2, i)|
        if i >= n0 {
            break $ a2._remove_last_zeros
        };
        let d0 = a0.@(i);
        let a2 = _add_with_offset1(a2, (_mul_u32(d0, a1), i));
        continue $ (a2, i + 1)
    )
);

// Calculates `(a0 / 2, a0 % 2)`.
// Aborts if any error occured.
_divmod_by_two: Array U32 -> (Array U32, Array U32);
_divmod_by_two = |a0| (
    let n0 = a0.get_size;
    let quo = Array::fill(n0, 0_U32);
    let (quo, rem) = loop(
        (quo, 0_U64, n0 - 1), |(quo, rem, i)|
        if i < 0 {
            break $ (quo, rem)
        };
        let d = rem * _base + a0.@(i).to_U64;
        let quo = quo.set(i, d.shift_right(1_U64).to_U32);
        let rem = d.bit_and(1_U64);
        continue $ (quo, rem, i - 1)
    );
    let quo = quo._remove_last_zeros;
    (quo, [rem.to_U32])
);

// Calculates `(a0 / a1, a0 % a1)`.
// Aborts if any error occured.
_divmod: Array U32 -> Array U32 -> (Array U32, Array U32);
_divmod = |a, b| (
    let a = a._remove_last_zeros;
    let b = b._remove_last_zeros;
    assert_lazy(|_| "Divide by zero", b != BigNat::_zero) $ |_|
    if b.get_size == 1 {
        let (quo, rem) = _divmod_u32(a, b.@(0));
        (quo, [rem])
    };
    let (quo, rem, rem_sign) = loop(
        (BigNat::_zero, a, 1), |(quo, a, a_sign)|
        let an = a.get_size;
        let bn = b.get_size;
        if an < bn {
            break $ (quo, a, a_sign)
        };
        let (q, qoff) = if an == bn {
            let b0 = b.@(bn - 1).to_U64;
            let a0 = a.@(an - 1).to_U64;
            let (q1, q0) = _divmod_base(a0 / b0);
            let q = [q0.to_U32, q1.to_U32];
            let qoff = (an - 1) - (bn - 1);
            (q, qoff)
        } else {
            let b0 = b.@(bn - 1).to_U64;
            let a0 = a.@(an - 1).to_U64 * _base + a.@(an - 2).to_U64;
            let (q1, q0) = _divmod_base(a0 / b0);
            let q = [q0.to_U32, q1.to_U32];
            let qoff = (an - 2) - (bn - 1);
            (q, qoff)
        };
        let ((rem, rem_off), rem_sign) = _signed_sub_with_offset((a,0), (_mul(b, q), qoff));
        // rem_off == 0
        let rem = rem._remove_last_zeros;
        let rem_sign = rem_sign * a_sign;
        let quo = if a_sign > 0 {
            _add_with_offset1(quo, (q, qoff))
        } else {
            let ((quo, qoffset), sign) = _signed_sub_with_offset((quo, 0), (q, qoff));
            assert_lazy(|_| "quo subtraction underflow", sign > 0) $ |_|
            quo
        };
        let quo = quo._remove_last_zeros;
        if _cmp((rem,0), (b,0)) < 0 {
            break $ (quo, rem, rem_sign)
        };
        //eval debug_eprintln((quo,rem).format("quo={} rem={}"));
        continue $ (quo, rem, rem_sign)
    );
    if rem_sign > 0 || rem == BigNat::_zero {
        (quo, rem)
    } else {
        let quo = _sub(quo, [1_U32]);
        let rem = _sub(b, rem);
        (quo, rem)
    }
);

// Calculates `(a0 / d1, a0 % d1)`.
_divmod_u32: Array U32 -> U32 -> (Array U32, U32);
_divmod_u32 = |a0, d1| (
    assert_lazy(|_| "Divide by zero", d1 != 0_U32) $ |_|
    let d1 = d1.to_U64;
    let n0 = a0.get_size;
    let (quo, rem) = loop(
        (a0, 0_U64, n0 - 1), |(a0, rem, i)|
        if i < 0 { break $ (a0, rem) };
        let dividend = rem * _base + a0.@(i).to_U64;
        let q = dividend / d1;
        assert_lazy(|_| "q overflow", q < _base) $ |_|
        let rem = dividend % d1;
        let a0 = a0.set(i, q.to_U32);
        continue $ (a0, rem, i - 1)
    );
    let quo = quo._remove_last_zeros;
    (quo, rem.to_U32)
);

// Returns the bit length of `a`, ie. one plus the bit position of most significant `1`.
// Returns 0 if `a` is zero.
_bit_length: Array U32 -> U64;
_bit_length = |a| (
    let a = a._remove_last_zeros;
    let n = a.get_size;
    let last_digit = a.@(n-1);
    if last_digit == 0_U32 {
        assert_lazy(|_| "_remove_last_zeros did not remove last zero", n == 1) $ |_|
        0_U64
    };
    let last_bit_length = loop(
        _log2_base.to_U32 - 1_U32, |bit|
        if last_digit.shift_right(bit).bit_and(1_U32) != 0_U32 {
            break $ bit + 1_U32
        };
        if bit == 0_U32 {
            assert_lazy(|_| "should not reach here", false) $ |_|
            break $ 0_U32
        };
        continue $ bit - 1_U32
    );
    let bit_length = (n-1).to_U64 * _log2_base + last_bit_length.to_U64;
    bit_length
);

// Calculates `a^n`.
_pow_by_U64: Array U32 -> U64 -> Array U32;
_pow_by_U64 = |a, n| (
    loop(
        ([1_U32], a, n), |(prod, a, n)|
        if n == 0_U64 {
            break $ prod
        };
        let prod = if n.bit_and(1_U64) != 0_U64 {
            _mul(prod, a)
        } else { prod };
        continue $ (prod, _mul(a,a), n.shift_right(1_U64))
    )
);

_shift_left: U64 -> Array U32 -> Array U32;
_shift_left = |shift, a| (
    if shift == 0_U64 { a };
    let (off, shift) = _divmod_log2_base(shift);
    let n = a.get_size;
    let a = loop(
        (a, 0_U64, 0), |(a, carry, i)|
        if i >= n {
            break $ if carry != 0_U64 { a.push_back(carry.to_U32) } else { a }
        };
        let d = a.@(i).to_U64;
        let carry2 = d.shift_right(_log2_base - shift);
        let d = d.shift_left(shift).bit_or(carry);
        let a = a.set(i, d.to_U32);
        continue $ (a, carry2, i + 1)
    );
    if off != 0_U64 { Array::fill(off.to_I64, 0_U32).append(a) } else { a }
);

_shift_right: U64 -> Array U32 -> Array U32;
_shift_right = |shift, a| (
    if shift == 0_U64 { a };
    let (off, shift) = _divmod_log2_base(shift);
    let a = if off == 0_U64 { a }
    else if off.to_I64 < a.get_size { a.get_sub(off.to_I64, a.get_size) }
    else { [0_U32] };
    let n = a.get_size;
    let a = loop(
        (a, 0_U64, n-1), |(a, carry, i)|
        if i < 0 {
            break $ a
        };
        let d = a.@(i).to_U64;
        let carry2 = d.shift_left(_log2_base - shift);
        let d = d.shift_right(shift).bit_or(carry);
        let a = a.set(i, d.to_U32);
        continue $ (a, carry2, i - 1)
    );
    a._remove_last_zeros
);

// Calculates `(a0 / 2 ^ exp, a0 % 2 ^ exp)`.
// Aborts if any error occured.
_divmod_by_power_of_two: Array U32 -> U64 -> (Array U32, Array U32);
_divmod_by_power_of_two = |a0, exp| (
    if exp == 0_U64 {
        (a0, BigNat::_zero)
    };
    if exp >= a0.get_size.to_U64 * _log2_base {
        (BigNat::_zero, a0)
    };
    let (exp_quo, exp_rem) = _divmod_log2_base(exp);
    assert_lazy(|_| "exp_quo too big", exp_quo < a0.get_size.to_U64) $ |_|
    let quo = a0._shift_right(exp);
    let rem = a0.get_sub(0, exp_quo.to_I64);
    let rem = if exp_rem == 0_U64 { rem }
    else {
        let d0 = a0.@(exp_quo.to_I64);
        let mask = (1_U64.shift_left(exp_rem) - 1_U64).to_U32;
        rem.push_back(d0.bit_and(mask))
    };
    (quo, rem)
);

// 0 in BigNat.
_zero: Array U32;
_zero = [0_U32];

// 1 in BigNat.
_one: Array U32;
_one = [1_U32];

// 2 in BigNat.
_two: Array U32;
_two = [2_U32];

_to_string_hex: Array U32 -> String;
_to_string_hex = |a| (
    "[" + a.to_iter.map(to_string_hex).join(",") + "]"
);

// ToString of BigNat.
_to_string: Array U32 -> String;
_to_string = |a| (
    let a = a._remove_last_zeros;
    let output = _to_string_inner(a, Iterator::empty);
    let output = if output.is_empty { output.push_front('0') } else { output };
    output.to_array._unsafe_to_string
);

_to_string_inner: Array U32 -> Iterator U8 -> Iterator U8;
_to_string_inner = |a, output| (
    if a.get_size == 0 { output };
    if a.get_size == 1 && a.@(0) == 0_U32 { output };
    let (quo, rem) = _divmod_u32(a, 10_U32);
    let output = output.push_front('0' + rem.to_U8);
    _to_string_inner(quo, output)
);

// FromString of BigNat.
_from_string_inner: Array U8 -> I64 -> Array U32 -> Result ErrMsg (Array U32);
_from_string_inner = |bytes, i, a| (
    if i >= bytes.get_size { ok $ a };
    let c = bytes.@(i);
    if !('0' <= c && c <= '9') { err $ "invalid character" };
    let digit = (c - '0').to_U32;
    let a = _add(_mul_u32(10_U32, a), [digit]);
    _from_string_inner(bytes, i + 1, a)
);

_generate_bignat:  I64 -> Random -> (Random, Array U32);
_generate_bignat = |bit_length, random| (
    assert_lazy(|_| "invalid bit_length", bit_length >= 0) $ |_|
    let end = BigNat::_one._shift_left(bit_length.to_U64);
    let begin = end._shift_right(1_U64);
    _generate_bignat_range(begin, end, random)
);

_generate_bignat_range:  Array U32 -> Array U32 -> Random -> (Random, Array U32);
_generate_bignat_range = |begin, end, random| (
    if _cmp((begin, 0), (end, 0)) > 0 {
        _generate_bignat_range(end, begin, random)      // swap range and retry
    };
    let n = _sub(end, begin);
    let n = n._remove_last_zeros;
    assert_lazy(|_| "invalid range", !n._is_zero) $ |_|
    let size = n.get_size;
    let (random, r) = loop(
        (random, [], 0), |(random, nat, i)|
        let (random, u64) = random.generate_U64;
        if i == size - 1 {
            let m = n.@(size - 1).to_U64;
            // choose 0..m uniformly
            let u64 = u64 / (U64::maximum / (m + 1_U64));
            if u64 > m {
                continue $ (random, nat, i)     // try again
            };
            let nat = nat.push_back(u64.to_U32);
            break $ (random, nat)
        };
        let (_, rem) = BigNat::_divmod_base(u64);
        let nat = nat.push_back(rem.to_U32);
        continue $ (random, nat, i + 1)
    );
    if _cmp((r, 0), (n, 0)) >= 0 {
        _generate_bignat_range(begin, end, random)      // try again
    };
    let r = _add(begin, r);
    (random, r)
);

