// Measures execution time. Similar to `timeit` module of Python.
module Minilib.Testing.Timeit;

import Debug;
import Time;

// Measures execution time of a function.
// It executes the function many times, and measures total time.
// Prints the result and measured time per loop.
timeit: [a: ToString] String -> (() -> a) -> IO a;
timeit = |label, f| (
    let total_time_threshold = 0.1;  // 100 msec
    let repeat = fix $ |repeat, n| (
        let result = f();
        if n <= 1 { result };
        repeat(n - 1)
    );
    let (result, total_time) = consumed_time_while(repeat, 1);
    let (result, total_time, total_count) = loop(
        (result, total_time, 1, 1), |(result, total_time, total_count, count)|
        if total_time >= total_time_threshold {
            break $ (result, total_time, total_count)
        };
        let (result, time) = consumed_time_while(repeat, count);
        let total_time = total_time + time;
        let total_count = total_count + count;
        continue $ (result, total_time, total_count, count * 2)
    );
    let time = total_time / total_count.to_F64;
    let (time, unit) = if time >= 1.0 { (time, "sec") }
    else if time >= 1.0e-3 { (time * 1.0e3, "msec") }
    else                   { (time * 1.0e6, "usec") };
    let _ = *eprintln(label + "=" + result.to_string + 
                      " time/loop=" + time.to_string_precision(3_U8) + " " + unit);
    pure $ result
);

// Same interface as `timeit()` but does not measure time.
notimeit: [a: ToString] String -> (() -> a) -> IO a;
notimeit = |label, f| (
    let result = f();
    let _ = *eprintln(label + "=" + result.to_string);
    pure $ result
);

// Get current time.
get_now : IO Time;
get_now = (
    IO { _data : |_| (
        let buf: Array I64 = Array::empty(2)._unsafe_set_size(2); // sec, usec.
        eval CALL_C[() fixruntime_clock_gettime(Ptr), buf._get_ptr];
        Time { sec : buf.@(0), nanosec : buf.@(1).to_U32 }
    )}
);

consumed_realtime_while_io : IO a -> IO (a, F64);
consumed_realtime_while_io = |io| (
    let _ = *pure();
    let start = *Timeit::get_now;
    //let _ = *eprintln("start=" + start.@sec.to_string + "," + start.@nanosec.to_string);
    let result = *io;
    let end = *Timeit::get_now;
    //let _ = *eprintln("end=" + end.@sec.to_string + "," + end.@nanosec.to_string);
    let time = (end.@sec.to_F64 - start.@sec.to_F64) +
               (end.@nanosec.to_F64 * 1.0e-9 - start.@nanosec.to_F64 * 1.0e-9);
    pure $ (result, time)
);
