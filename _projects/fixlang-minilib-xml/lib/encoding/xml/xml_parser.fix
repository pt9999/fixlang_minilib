// Simple XML 1.1 Parser.
//
// Implemented from specification of XML 1.1:
// - [Extensible Markup Language (XML) 1.1 (Second Edition)](https://www.w3.org/TR/2006/REC-xml11-20060816/)
//
// Known Problems:
// - Currently only UTF-8 encoding is supported.
// - Currently Document Type Definition (DTD) is not supported.
module Minilib.Encoding.Xml.XmlParser;

import Character;

import Minilib.Encoding.Xml;
import Minilib.Text.SimpleParser;
import Minilib.Text.StringEx;

_DoubleQuote: U8;
_DoubleQuote = 0x22_U8;        // '\"'

_SingleQuote: U8;
_SingleQuote = 0x27_U8;        // '\''

// 2.1 Well-Formed XML Documents

// Reads an XML document from a string.
parse_document_from_string: String -> Result ErrMsg XmlDocument;
parse_document_from_string = |str| (
    let parser = do {
        let doc = *_parse_document;
        let _ = *match_end_of_stream;
        pure $ doc
    };
    parser.run_parser_str(str).map(@0)
);

// [1]   	document	   ::=   	( prolog element Misc* ) - ( Char* RestrictedChar Char* )
_parse_document: Parser XmlDocument;
_parse_document = do {
    let doc = *_parse_prolog;
    let element = *_parse_element;
    let doc = doc.set_document_element(element);
    let epilog = *repeat(_parse_misc);
    let doc = epilog.to_iter.fold(doc, |doc, node| doc.add_to_epilog(node));
    let _ = *match_end_of_stream;
    pure $ doc
};

// 2.3 Common Syntactic Constructs

// White Space
// [3]   	S	   ::=   	(#x20 | #x9 | #xD | #xA)+
_parse_s: Parser String;
_parse_s = do {
    one_or_more(_whitespace).map(_unsafe_to_string)
};

_whitespace: Parser Char;
_whitespace = do {
    match_any_char.filter(|c|
        c == 0x20_U8 || c == 0x09_U8 || c == 0x0D_U8 || c == 0x0A_U8
    )
};

_parse_s_as_text_node: Parser XmlNode;
_parse_s_as_text_node = do {
    _parse_s.map(XmlText::make >> text_node)
};


// Names and Tokens

// [4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] |
//              [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] |
//              [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] |
//              [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
_parse_name_start_char: Parser Char;
_parse_name_start_char = do {
    match_any_char.filter(|c|
        is_alpha(c) ||
        c == ':' ||
        c == '_' ||
        c >= 0x80_U8        // not checked
    )
};

// [4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] |
//                                   #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
_parse_name_char: Parser Char;
_parse_name_char = do {
    match_any_char.filter(|c|
        is_alnum(c) ||
        c == ':' ||
        c == '_' ||
        c == '-' ||
        c == '.' ||
        c >= 0x80_U8        // not checked
    )
};

// [5]   	Name	   ::=   	NameStartChar (NameChar)*
_parse_name: Parser String;
_parse_name = do {
    let start_char = *_parse_name_start_char;
    let tail_chars = *repeat(_parse_name_char);
    pure $ [start_char].append(tail_chars)._unsafe_to_string
};

// Literals

// [10]   	AttValue	   ::=   	'"' ([^<&"] | Reference)* '"'
//                               |  "'" ([^<&'] | Reference)* "'"
_parse_att_value: Parser String;
_parse_att_value = do {
    let start_quote = *match_char_class(|c|
        c == _DoubleQuote || c == _SingleQuote
    ).or_error("Missing start quote");

    let start_stream = *get_stream;
    let inner_quote = do {
        match_char_class(|c| c != '<' && c != '&' && c != start_quote)
        .map(|_|())
        .or_else(
            _parse_reference
        )
    };
    let _ = *repeat(inner_quote);
    let end_stream = *get_stream;
    let end_quote = *match_char(start_quote).or_error("Missing end quote");
    let content = start_stream.read_string_between(end_stream);
    pure $ content
};

// 2.4 Character Data and Markup

// Character Data
// [14]   	CharData	   ::=   	[^<&]* - ([^<&]* ']]>' [^<&]*)
_parse_char_data: Parser String;
_parse_char_data = do {
    let match_not_end_of_cdata = _negative_lookahead("]]>");
    let inner = do {
        let _ = *match_not_end_of_cdata;
        let _ = *match_char_class(|c| c != '<' && c != '&');
        pure()
    };
    let start_stream = *get_stream;
    let _ = *repeat(inner);
    let end_stream = *get_stream;
    let content = start_stream.read_string_between(end_stream);
    pure $ content
};

// Checks whether it does not match `str` at current position.
// Raises `_NotMatch` if it matches.
_negative_lookahead: String -> Parser ();
_negative_lookahead = |str| (
    let str_matcher = match_str(str);
    parser $ |s| (
        if str_matcher.run_parser(s).is_ok {
            err $ _NotMatch
        };
        ok $ ((), s)
    )
);

// 2.5 Comments

// [15]   	Comment	   ::=   	'<!--' ((Char - '-') | ('-' (Char - '-')))* '-->'
_parse_comment: Parser XmlNode;
_parse_comment = do {
    let hyphen = match_any_char.filter(|c| c == '-');
    let not_hyphen = match_any_char.filter(|c| c != '-');
    let inner_comment = not_hyphen.or_else(do {
        let _ = *hyphen;
        not_hyphen
    });
    let _ = *match_str("<!--");
    let start_stream = *get_stream;
    let _ = *repeat(inner_comment);
    let end_stream = *get_stream;
    let _ = *match_str("-->").or_error("Missing end of comment");

    let content = start_stream.read_string_between(end_stream);
    pure $ comment_node $ XmlComment::make(content)
};

// 2.6 Processing Instructions

// [16]   	PI	   ::=   	'<?' PITarget (S (Char* - (Char* '?>' Char*)))? '?>'
// [17]   	PITarget	   ::=   	Name - (('X' | 'x') ('M' | 'm') ('L' | 'l'))
_parse_pi: Parser XmlNode;
_parse_pi = do {
    let match_not_end_mark = _negative_lookahead("?>");
    let inner_content = do {
        let _ = *match_not_end_mark;
        let _ = *match_any_char;
        pure()
    };
    let _ = *match_str("<?");
    let start_stream = *get_stream;
    let pitarget = *_parse_name;
    if pitarget.to_lower == "xml" {
        not_match
    };
    let _ = *do {
        let _ = *one_or_more(_whitespace);
        let _ = *repeat(inner_content);
        pure()
    }.if_exists;
    let end_stream = *get_stream;
    let _ = *match_str("?>").or_error("Missing '?>'");
    let content = start_stream.read_string_between(end_stream);
    pure $ processing_instruction $ XmlProcessingInstruction::make(content)
};

// 2.7 CDATA Sections

// [18]   	CDSect	   ::=   	CDStart CData CDEnd
// [19]   	CDStart	   ::=   	'<![CDATA['
// [20]   	CData	   ::=   	(Char* - (Char* ']]>' Char*))
// [21]   	CDEnd	   ::=   	']]>'
_parse_cdsect: Parser XmlNode;
_parse_cdsect = do {
    let match_not_end_mark = _negative_lookahead("]]>");
    let inner_content = do {
        let _ = *match_not_end_mark;
        let _ = *match_any_char;
        pure()
    };
    let _ = *match_str("<![CDATA[");
    let start_stream = *get_stream;
    let _ = *repeat(inner_content);
    let end_stream = *get_stream;
    let _ = *match_str("]]>").or_error("Missing ']]>'");
    let content = start_stream.read_string_between(end_stream);
    pure $ cdata_section $ XmlCDATASection::make(content)
};



// 2.8 Prolog and Document Type Declaration

// [22]   	prolog	   ::=   	XMLDecl Misc* (doctypedecl Misc*)?
_parse_prolog: Parser XmlDocument;
_parse_prolog = do {
    let xml_decl = *_parse_xml_declaration.or_error("Missing XML declaration");
    let prolog = *repeat(_parse_misc);
    let doc = XmlDocument::empty;
    let doc = doc.set_xml_decl(xml_decl);
    let doc = prolog.to_iter.fold(doc, |doc, node| doc.add_to_prolog(node));
    // TODO: support doctypedecl
    pure $ doc
};

// [23]   	XMLDecl	   ::=   	'<?xml' VersionInfo EncodingDecl? SDDecl? S? '?>'
_parse_xml_declaration: Parser XmlDeclaration;
_parse_xml_declaration = do {
    let question = match_char_class(|c| c == '?');
    let not_question = match_char_class(|c| c != '?');
    let not_right_angle = match_char_class(|c| c != '>');
    let inner_content = not_question.or_else(do {
        let _ = *question;
        not_right_angle
    });
    let _ = *match_str("<?");
    let _ = *match_str("xml");
    let version = *_parse_version_info;
    let encoding = *_parse_encoding_decl.if_exists;
    let standalone = *_parse_sd_decl.if_exists;
    let _ = *zero_or_more(_whitespace);
    let _ = *match_str("?>").or_error("Missing end of xml declaration");
    pure $ XmlDeclaration {
        version: version,
        encoding: encoding,
        standalone: standalone
    }
};

// [24]   	VersionInfo	   ::=   	S 'version' Eq ("'" VersionNum "'" | '"' VersionNum '"')
_parse_version_info: Parser String;
_parse_version_info = do {
    let _ = *one_or_more(_whitespace);
    let _ = *match_str("version");
    let _ = *_parse_eq;
    let quote = *match_char_class(|c| c == _SingleQuote || c == _DoubleQuote);
    let version_num = *match_str_class(|c| is_digit(c) || c == '.');
    let _ = *match_char(quote);
    pure $ version_num
};

// [25]   	Eq	   ::=   	S? '=' S?
_parse_eq: Parser ();
_parse_eq = do {
    let _ = *zero_or_more(_whitespace);
    let _ = *match_char('=');
    let _ = *zero_or_more(_whitespace);
    pure()
};

// [27]   	Misc	   ::=   	Comment | PI | S
_parse_misc: Parser XmlNode;
_parse_misc = do {
    _parse_comment.or_elseF $
    _parse_pi.or_elseF $
    _parse_s_as_text_node
};

// Document Type Definition
// TODO

// 2.9 Standalone Document Declaration

// [32]   	SDDecl	   ::=   	S 'standalone' Eq (("'" ('yes' | 'no') "'") | ('"' ('yes' | 'no') '"'))
_parse_sd_decl: Parser String;
_parse_sd_decl = do {
    let _ = *one_or_more(_whitespace);
    let _ = *match_str("standalone");
    let _ = *_parse_eq;
    let quote = *match_char_class(|c| c == _SingleQuote || c == _DoubleQuote);
    let match_str_unforget = |str| match_str(str).map(|_| str);
    let yesno = *match_str_unforget("yes").or_else(match_str_unforget("no"));
    let _ = *match_char(quote);
    pure $ yesno
};

// 3 Logical Structures

// Element

// Reads an XML element from a string.
parse_element_from_string: String -> Result ErrMsg XmlElement;
parse_element_from_string = |str| (
    let parser = do {
        let elem = *_parse_element;
        let _ = *match_end_of_stream;
        pure $ elem
    };
    parser.run_parser_str(str).map(@0)
);

// [39]   	element	   ::=   	EmptyElemTag
//                              | STag content ETag
_parse_element: Parser XmlElement;
_parse_element = do {
    let (empty_tag, elem) = *_parse_empty_elem_tag_or_stag;
    if empty_tag { pure $ elem };
    let elem = *_parse_content(elem);
    let elem = *_parse_etag(elem).or_error("Missing end tag");
    pure $ elem
};

// [44]   	EmptyElemTag	   ::=   	'<' Name (S Attribute)* S? '/>'
// [40]   	STag	   ::=   	'<' Name (S Attribute)* S? '>'
_parse_empty_elem_tag_or_stag: Parser (Bool, XmlElement);
_parse_empty_elem_tag_or_stag = do {
    let _ = *match_char('<');
    let name = *_parse_name;
    let attrs = *repeat(
        do {
            let _ = *one_or_more(_whitespace);
            _parse_attribute
        }
    );
    let _ = *zero_or_more(_whitespace);
    let slash = *match_char('/').if_exists;
    let _ = *match_char('>').or_error("Missing '>'");
    let elem = XmlElement::make(name).set_attributes(attrs);
    pure $ (slash.is_some, elem)
};

// [41]   	Attribute	   ::=   	Name Eq AttValue
_parse_attribute: Parser XmlAttribute;
_parse_attribute = do {
    let name = *_parse_name;
    let eq = *_parse_eq.or_error("Missing '='");
    let value = *_parse_att_value;
    let value = unescape_special(value);
    pure $ XmlAttribute::make(name, value)
};

// [42]   	ETag	   ::=   	'</' Name S? '>'
_parse_etag: XmlElement -> Parser XmlElement;
_parse_etag = |elem| do {
    let _ = *match_char('<');
    let _ = *match_char('/');
    let name = *_parse_name;
    if name != elem.@tag_name { error_parser $ "Tag name mismatch" };
    let _ = *zero_or_more(_whitespace);
    let _ = *match_char('>').or_error("Missing '>'");
    pure $ elem
};

// Content of Elements
// [43]   	content	   ::=   	CharData? ((element | Reference | CDSect | PI | Comment) CharData?)*
_parse_content: XmlElement -> Parser XmlElement;
_parse_content = |elem| do {
    let char_data = *_parse_char_data;
    let elem = if char_data != "" { elem.text(char_data) } else { elem };
    let elem = *loop_m(
        elem, |elem|
        let node = *(
            _parse_element.map(element_node).or_elseF $
            _parse_reference_as_text_node.or_elseF $
            _parse_cdsect.or_elseF $
            _parse_pi.or_elseF $
            _parse_comment
        ).if_exists;
        if node.is_none { break_m $ elem };
        let elem = elem.append_child(node.as_some);
        let char_data = *_parse_char_data;
        let elem = if char_data != "" { elem.text(char_data) } else { elem };
        continue_m $ elem
    );
    let elem = elem.concat_text_nodes;
    pure $ elem
};


// 4 Physical Structures
// 4.1 Character and Entity References

// Character Reference
// [66]   	CharRef	   ::=   	'&#' [0-9]+ ';'
//                              | '&#x' [0-9a-fA-F]+ ';'
_parse_char_ref: Parser ();
_parse_char_ref = do {
    let _ = *match_char('&');
    let _ = *match_char('#');
    let x = *match_char('x').if_exists;
    let _ = *one_or_more(match_char_class(
        if x.is_some { is_xdigit } else { is_digit }
    ));
    let _ = *match_char(';');
    pure()
};

// Entity Reference
// [67]   	Reference	   ::=   	EntityRef | CharRef
_parse_reference: Parser ();
_parse_reference = do {
    _parse_entity_ref.or_else(
        _parse_char_ref
    )
};

_parse_reference_as_text_node: Parser XmlNode;
_parse_reference_as_text_node = do {
    let start_stream = *get_stream;
    let _ = *_parse_reference;
    let end_stream = *get_stream;
    let content = start_stream.read_string_between(end_stream);
    let content = unescape_special(content);
    pure $ text_node $ XmlText::make(content)
};

// [68]   	EntityRef	   ::=   	'&' Name ';'
_parse_entity_ref: Parser ();
_parse_entity_ref = do {
    let _ = *match_char('&');
    let _ = *_parse_name;
    let _ = *match_char(';');
    pure()
};

// 4.3.3 Character Encoding in Entities

// [80]   	EncodingDecl	   ::=   	S 'encoding' Eq ('"' EncName '"' | "'" EncName "'" )
_parse_encoding_decl: Parser String;
_parse_encoding_decl = do {
    let _ = *one_or_more(_whitespace);
    let _ = *match_str("encoding");
    let _ = *_parse_eq;
    let quote = *match_char_class(|c| c == _SingleQuote || c == _DoubleQuote);
    let enc_name = *_parse_enc_name;
    let _ = *match_char(quote);
    pure $ enc_name
};

// [81]   	EncName	   ::=   	[A-Za-z] ([A-Za-z0-9._] | '-')*
_parse_enc_name: Parser String;
_parse_enc_name = do {
    let head_char = *match_char_class(is_alpha);
    let tail_chars = *repeat(match_char_class(|c|
        is_alnum(c) || c == '.' || c == '_' || c == '-'
    ));
    pure $ [head_char].append(tail_chars)._unsafe_to_string
};
