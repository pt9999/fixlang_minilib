// State Monad which maintains a mutable state.
module Minilib.Monad.State;

// State monad wraps a function from a initial state to a pair of a value and a final state.
type State s a = unbox struct {
    _data: s -> (a, s)
};

// Creates a State monad from a function.
make_state_monad: (s -> (a, s)) -> State s a;
make_state_monad = |f| State { _data: f };

// Runs a State monad with the supplied initial state.
run_state: s -> State s a -> (a, s);
run_state = |s, ma| (ma.@_data) (s);

// A State monad that returns the current state as a value.
get_state: State s s;
get_state = make_state_monad $ |s| (s, s);

// Creates a State monad of the specified state.
put_state: s -> State s ();
put_state = |s| make_state_monad $ |_| ((), s);

// Creates a State monad that changes the state with the specified function.
mod_state: (s -> s) -> State s ();
mod_state = |f| put_state $ f $ *get_state;

// Lift a State monad.
liftS: [f: Functor] State s a -> State (f s) (f a);
liftS = |state| (
    make_state_monad $ |fs|
    let fas = fs.map(|s| state.run_state(s));
    (fas.map(@0), fas.map(@1))
);

impl State s: Monad {
    pure = |a| make_state_monad $ |s| (a, s);
    bind = |f, ma| make_state_monad $ |s| (
        let (a, ss) = ma.run_state(s);
        let mb = f(a);
        mb.run_state(ss) 
    );
}

impl State s: Functor {
    map = |f, ma| make_state_monad $ |s| (
        let (a, ss) = ma.run_state(s);
        (f(a), ss)
    );
}
