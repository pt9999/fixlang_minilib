module Minilib.Trait.TraversableA;

import Minilib.Trait.Applicative;

trait [t: * -> *] t: TraversableA {
    sequence_a: [f: Applicative] t (f a) -> f (t a);
}

traverse_a: [f: Applicative, t: TraversableA, t: Functor] (a -> f b) -> t a -> f (t b);
traverse_a = |f, ta| ta.map(f).sequence_a;


impl Array: TraversableA {
    sequence_a = |array| (
        array.to_iter.fold(
            pure_a(Array::empty(array.get_size)), |output, a|
            lift_a2(push_back, a, output)
        )
    );
}

impl Iterator: TraversableA {
    sequence_a = |iter| (
        let output = iter.fold(
            pure_a([]), |output, a|
            lift_a2(push_back, a, output)
        );
        output.map_a(to_iter)
    );
}