module Base64Test;


import Minilib.Encoding.Base64;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;
import Minilib.Testing.UnitTest;

test_base64_encode: TestCase;
test_base64_encode = (
    make_table_test("test_base64_encode",
        [
            ("", ""),
            ("69", "ab=="),
            ("69b7", "abc="),
            ("69b71d", "abcd"),
            ("fedcba9876543210", "/ty6mHZUMhA="),
            ("fedcba98765432", "/ty6mHZUMhA=="),
            ("fedcba987654", "/ty6mHZUM"),
            ("6b3019d3dfbf", "azAZ09+/"),
        ],
        |(hex, base64)|
        let bytes = *from_string_hex(hex).from_result;
        let actual = base64_encode(bytes);
        assert_equal("eq", base64, actual)
    )
);

test_base64_decode: TestCase;
test_base64_decode = (
    make_table_test("test_base64_decode",
        [
            ("", ""),
            ("a", ""),
            ("ab==", "69"),
            ("abc=", "69b7"),
            ("abcd", "69b71d"),
            ("/ty6mHZUMhA=", "fedcba9876543210"),
            ("  /t y 6 mH ?!? Z U M h A= ", "fedcba9876543210"),
            ("azAZ09+/", "6b3019d3dfbf"),
        ],
        |(base64, hex)|
        let bytes = base64_decode(base64);
        let actual = bytes.to_string_hex;
        assert_equal("eq", hex, actual)
    )
);

main: IO ();
main = (
    [
        test_base64_decode,
    ]
    .run_test_driver
);

