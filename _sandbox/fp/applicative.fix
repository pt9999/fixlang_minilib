module Main;

trait [f : *->*] f : Applicative {
    app: f (a -> b) -> f a -> f b;
}

lift_a2: [f: Functor, f: Applicative] (a -> b -> c) -> f a -> f b -> f c;
lift_a2 = |f, xs, ys| app(xs.map(f), ys);

impl Array: Applicative {
    app = |fs, xs| (
        let f = *fs;
        let x = *xs;
        pure $ f(x)
    );
}

impl Iterator: Applicative {
    app = |fs, xs| (
        let f = *fs;
        let x = *xs;
        pure $ f(x)
    );
}

test_array: IO ();
test_array = (
    let add: I8 -> I32 -> I64 = |x,y| x.to_I64 + y.to_I64;
    let fs = [add(1_I8), add(2_I8)];
    let ys = [10_I32, 20_I32];
    let zs: Array I64 = app(fs, ys);
    let _ = *println(zs.map(to_string).to_iter.join(","));
    let xs = [1_I8, 2_I8];
    let zs: Array I64 = lift_a2(add, xs, ys);
    let _ = *println(zs.map(to_string).to_iter.join(","));
    pure()
);

test_iter: IO ();
test_iter = (
    let add: I8 -> I32 -> I64 = |x,y| x.to_I64 + y.to_I64;
    let fs = [add(1_I8), add(2_I8)].to_iter;
    let ys = [10_I32, 20_I32].to_iter;
    let zs: Iterator I64 = app(fs, ys);
    let _ = *println(zs.map(to_string).join(","));
    let xs = [1_I8, 2_I8].to_iter;
    let zs: Iterator I64 = lift_a2(add, xs, ys);
    let _ = *println(zs.map(to_string).join(","));
    pure()
);

main: IO ();
main = (
    let _ = *test_array;
    let _ = *test_iter;
    pure()
);
