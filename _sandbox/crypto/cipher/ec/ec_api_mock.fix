// Mock-up implementation of the Elliptic Curve cryptography API (`EcApi`).
module Minilib.Crypto.Cipher.Ec.EcApiMock;

import Debug;

import Minilib.Crypto.Cipher.Ec.EcApi;
import Minilib.Monad.Random;

make_ec_api: Result ErrMsg EcApi;
make_ec_api = (
    pure $ EcApi {
        make_ecdhe: _make_ecdhe,
        make_ecdsa: _make_ecdsa,
    }
);

_make_ecdhe: EcCurveName -> Result ErrMsg (FreeRandom EcdheApi);
_make_ecdhe = |curve_name| (
    pure $ pure $ EcdheApi {
        curve_name: curve_name,
        key_exchange: Array::fill(64, 0xff_U8),
        accept_peer_key_exchange: |_| pure $ Array::fill(64, 0xff_U8),
    }
);

_make_ecdsa: EcCurveName -> EcHashName -> Result ErrMsg EcdsaApi;
_make_ecdsa = |curve_name, hash_name| (
    pure $ EcdsaApi {
        curve_name: curve_name,
        hash_name: hash_name,
        verify: |_, _, _| (
            eval debug_eprintln("WARNING: mock version of ECDSA is used !!");
            pure()
        ),
    }
);
