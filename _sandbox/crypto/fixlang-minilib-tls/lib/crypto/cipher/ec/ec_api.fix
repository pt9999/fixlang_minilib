// Elliptic Curve cryptography API (`EcApi`).
module Minilib.Crypto.Cipher.Ec.EcApi;

import Minilib.Monad.FreeRandom;

// The name of a elliptic curve, for example "secp256r1", "secp384r1" etc.
type EcCurveName = String;
// The name of a hash digest algorithm, for example "sha256", "sha384" etc.
type EcHashName = String;
// A public key of Elliptic Curve cryptography.
// The public key is a point `(x, y)` on the elliptic curve, and it it encoded as UncompressedPointRepresentation.
type EcPublicKey = Array U8;
// A shared secret which is created by ECDHE operation.
type EcSharedSecret = Array U8;
// A signature which is the output of ECDSA signing operation.
type EcSignature = Array U8;
// A message which is the input of ECDSA signing operation.
type EcSigMessage = Array U8;

// Public API of the Elliptic Curve cryptography.
type EcApi = unbox struct {
    make_ecdhe: EcCurveName -> Result ErrMsg (FreeRandom EcdheApi),
    make_ecdsa: EcCurveName -> EcHashName -> Result ErrMsg EcdsaApi,
};

// Public API of the Elliptic Curve Diffieâ€“Hellman key exchange using Ephemeral keys (ECDHE).
type EcdheApi = unbox struct {
    curve_name: EcCurveName,
    key_exchange: EcPublicKey,
    accept_peer_key_exchange: EcPublicKey -> Result ErrMsg EcSharedSecret,
};

// Public API of the Elliptic Curve Digital Signature Algorithm (ECDSA).
type EcdsaApi = unbox struct {
    curve_name: EcCurveName,
    hash_name: EcHashName,
    verify: EcPublicKey -> EcSignature -> EcSigMessage -> Result ErrMsg (),
};
