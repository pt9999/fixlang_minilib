module Main;

import UnitTest;
import Json;
import HashMap;

test_encode_ok: (Json, String) -> TestCase;
test_encode_ok = |(json, expected)| (
    let testname = "test_encode_ok ("+expected+")";
    make_test(testname) $
    let actual = json.encode;
    //let _ = *(lift $ println (actual));
    let _ = *(assert_equal("encode", expected, actual));
    pure()
);

main: IO ();
main = (
    if (false) {
        Iterator::count_up(0).take(256)
        .map(|i| (i.to_U8, _escape_table.@(i)))
        .filter(|(k,v)| v != 0_U8)
        .fold_m((), |_, (k,v)| println (k.to_string + " = " + v.to_string))
    };
    let obj = [("null", null()), ("true", bool(true)), ("false", bool(false))].to_object;
    let obj2 = [("num", number(1.2)), ("str", string("abc")), ("obj", obj)].to_object;
    [
        test_encode_ok $ (null(), "null"),
        test_encode_ok $ (bool(true), "true"),
        test_encode_ok $ (bool(false), "false"),
        test_encode_ok $ (number(123.0), "123.000000"),
        test_encode_ok $ (string("abcあいう"), "\"abcあいう\""),
        test_encode_ok $ (string("\"\\\n\r\t\u0008\u000c"), "\"\\\"\\\\\\n\\r\\t\\b\\f\""),
        test_encode_ok $ (string("\u0001\u001f"), "\"\\u0001\\u001f\""),
        test_encode_ok $ (array([number(1.2), string("hoge")]), "[1.200000,\"hoge\"]"),
        test_encode_ok $ (obj, "{\"false\":false,\"null\":null,\"true\":true}"),
        test_encode_ok $ (obj2, "{\"num\":1.200000,\"obj\":{\"false\":false,\"null\":null,\"true\":true},\"str\":\"abc\"}")
    ]
    .run_test_driver
);