module Json;

import Debug;

import StringEx;
import OrderedMap;

type Json = box union {
    null: (),
    bool: Bool,
    number: F64,
    string: String,
    object: OrderedMap String Json,
    array:  Array Json
};

to_object: Array (String, Json) -> Json;
to_object = |arr| (
    let map = arr.to_iter.fold(
        OrderedMap::empty(arr.get_size),
        |h, (k, v)| h.insert(k, v)
    );
    object $ map
);

impl Json: Eq {
    eq = |j1, j2| (
        //eval debug_eprintln("eq");
        if j1.is_null && j2.is_null {
            true
        };
        if j1.is_bool && j2.is_bool {
            j1.as_bool == j2.as_bool
        };
        if j1.is_number && j2.is_number {
            j1.as_number == j2.as_number
        };
        if j1.is_string && j2.is_string {
            j1.as_string == j2.as_string
        };
        if j1.is_object && j2.is_object {
            j1.as_object == j2.as_object
        };
        if j1.is_array && j2.is_array {
            j1.as_array == j2.as_array
        };
        false
    );
}

