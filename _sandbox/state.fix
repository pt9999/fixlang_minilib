module Main;

import Debug;

trait [m: * -> *] m: FromIO {
    from_io: IO a -> m a;
}

trait [m: * -> *] m: FromIOFail {
    from_iofail: IOFail a -> m a;
}

//-------------------------------------------------------
// State Monad
//-------------------------------------------------------

type State s a = unbox struct { _data: s -> (a, s) };

namespace State {
    make_state_monad: (s -> (a, s)) -> State s a;
    make_state_monad = |f| State { _data: f };

    run_state: s -> State s a -> (a, s);
    run_state = |s, ma| (ma.@_data) (s);
}

impl State s: Monad {
    pure = |a| make_state_monad $ |s| (a, s);
    bind = |f, ma| make_state_monad $ |s|
        let (a, ss) = ma.run_state(s);
        f(a).run_state(ss);
}

impl State s: Functor {
    map = |f, ma| make_state_monad $ |s|
        let (a, ss) = ma.run_state(s);
        (f(a), ss);
}

trait [m: * -> *] m: GetPutState {
    get_state: m s;
    put_state: s -> m ();
}

trait StateMonad = Functor + Monad + GetPutState;

impl State s: GetPutState {
    get_state = make_state_monad $ |s| (s, s);
    put_state = |s| make_state_monad $ |_| ((), s);
}

mod_state: [m: StateMonad] (s -> s) -> m ();
mod_state = |f| put_state $ f $ *get_state;

trait [m: * -> *] m: ToState {
    to_state: m a -> State s a;
}

/*
impl Option: ToState {
    to_state = |ma| make_state_monad $ |s| pure $ (*ma, s);
}

impl Result e: ToState {
    to_state = |ma| make_state_monad $ |s| pure $ (*ma, s);
}
*/

//-------------------------------------------------------
// StateIO Monad
//-------------------------------------------------------

type StateIO s a = unbox struct { _data: s -> IO (a, s) };

namespace StateIO {
    make_stateio_monad: (s -> IO (a, s)) -> StateIO s a;
    make_stateio_monad = |f| StateIO { _data: f };

    run_stateio: s -> StateIO s a -> IO (a, s);
    run_stateio = |s, ma| (ma.@_data) (s);
}

impl StateIO s: Functor {
    map = |f, ma| make_stateio_monad $ |s|
        let (a, ss) = *ma.run_stateio(s);
        pure $ (f(a), ss);
}

impl StateIO s: Monad {
    pure = |a| make_stateio_monad $ |s| pure $ (a, s);
    bind = |f, ma| make_stateio_monad $ |s|
        let (a, ss) = *ma.run_stateio(s);
        f(a).run_stateio(ss);
}

impl StateIO s: GetPutState {
    get_state = make_stateio_monad $ |s| pure $ (s, s);
    put_state = |s| make_stateio_monad $ |_| pure $ ((), s);
}

trait [m: * -> *] m: ToStateIO {
    to_stateio: m a -> StateIO s a;
}

impl State s: ToStateIO {
    to_stateio = |sa| make_stateio_monad $ |s| pure $ sa.run_state(s);
}

impl IO: ToStateIO {
    to_stateio = |ioa| make_stateio_monad $ |s| pure $ (*ioa, s);
}

impl StateIO s: FromIO {
    from_io = to_stateio;
}
trait StateIOMonad = StateMonad + FromIO;

//-------------------------------------------------------
// StateIOF Monad
//-------------------------------------------------------

type StateIOF s a = unbox struct { _data: s -> IOFail (a, s) };

namespace StateIOF {
    make_stateiof_monad: (s -> IOFail (a, s)) -> StateIOF s a;
    make_stateiof_monad = |f| StateIOF { _data: f };

    run_stateiof: s -> StateIOF s a -> IOFail (a, s);
    run_stateiof = |s, ma| (ma.@_data) (s);
}

impl StateIOF s: Functor {
    map = |f, ma| make_stateiof_monad $ |s|
        let (a, ss) = *ma.run_stateiof(s);
        pure $ (f(a), ss);
}

impl StateIOF s: Monad {
    pure = |a| make_stateiof_monad $ |s| pure $ (a, s);
    bind = |f, ma| make_stateiof_monad $ |s|
        let (a, ss) = *ma.run_stateiof(s);
        f(a).run_stateiof(ss);
}

impl StateIOF s: GetPutState {
    get_state = make_stateiof_monad $ |s| pure $ (s, s);
    put_state = |s| make_stateiof_monad $ |_| pure $ ((), s);
}

trait [m: * -> *] m: ToStateIOF {
    to_stateiof: m a -> StateIOF s a;
}

impl State s: ToStateIOF {
    to_stateiof = |sa| make_stateio_monad $ |s| pure $ sa.run_state(s);
}

impl StateIO s: ToStateIOF {
    to_stateiof = |sia| make_stateiof_monad $ |s| sia.run_stateio(s).lift;
}

impl IO: ToStateIOF {
    to_stateiof = |ioa| make_stateiof_monad $ |s| pure $ (*ioa.lift, s);
}

impl StateIOF s: FromIO {
    from_io = to_stateiof;
}

impl IOFail: ToStateIOF {
    to_stateiof = |iofa| make_stateiof_monad $ |s| pure $ (*iofa, s);
}
impl StateIOF s: FromIOFail {
    from_iofail = to_stateiof;
}
trait StateIOFMonad = StateIOMonad + FromIOFail;

impl Result ErrMsg: ToStateIOF {
    to_stateiof = |res| make_stateiof_monad $ |s| pure $ (*res.from_result, s);
}

//-------------------------------------------------------

type App = unbox struct {
    users: Array String,
    pages: Array String
};

type StateApp = State App;

namespace App {
    empty: App;
    empty = App {
        users: Array::empty(0),
        pages: Array::empty(0)
    };
    
    get_app: [m: StateMonad] m App;
    get_app = get_state;

    mod_app: [m: StateMonad] m ();
    mod_app = mod_state;

    add_user: [m: StateMonad] String -> m ();
    add_user = |user| (
        mod_state(mod_users(push_back(user)))
    );

    add_page: [m: StateMonad] String -> m ();
    add_page = |page| (
        mod_state(mod_pages(push_back(page)))
    );

    get_users: [m: StateMonad] m (Array String);
    get_users = get_state.map(@users);

    get_pages: [m: StateMonad] m (Array String);
    get_pages = get_state.map(@pages);

    print_users: [m: StateIOMonad] m ();
    print_users = do {
        let users = *get_users;
        do {
            let _ = *println("---users---");
            users.to_iter.fold_m((), |_, u| println(u))
        }.from_io
    };

    print_pages: [m: StateIOMonad] m ();
    print_pages = do {
        let pages = *get_pages;
        do {
            let _ = *println("---pages---");
            pages.to_iter.fold_m((), |_, p| println(p))
        }.from_io
    };

    register_users: [m: StateMonad] m ();
    register_users = do {
        let _ = *add_user("taro");
        let _ = *add_user("jiro");
        let _ = *add_user("saburo");
        pure()
    };

    create_user_pages: [m: StateMonad] m ();
    create_user_pages = do {
        let users = *get_users;
        users.to_iter.fold_m(
            (), |_, user|
            add_page(user + "'s page")
        )
    };

    save_file: [m: StateIOFMonad] String -> m ();
    save_file = |path| (
        let users = *get_users;
        let pages = *get_pages;
        do {
            if path == "" { throw $ "Empty path" };
            let path = Path::parse(path);
            if path.is_none { throw $ "Path::parse failed" };
            let path = path.as_some;
            let fh = *open_file(path, "w");
            let _ = *users.to_iter.join(",").write_string(fh); 
            let _ = *pages.to_iter.join(",").write_string(fh); 
            let _ = *close_file(fh).lift;
            pure()
        }
        .from_iofail
    );
}

state_func: [m: StateMonad] m ();
state_func = do {
    let _ = *mod_state(|i| i+1);
    pure()
};

test_state: IO ();
test_state = do {
    let _ = *println("=== test_state ===");
    let m = do {
        let _ = *register_users;
        get_users
    };
    let (users,_) = m.run_state(App::empty);  // App 以外を指定するとpanicする
    let _ = *println(users.to_iter.join(","));
    pure()
};

//stateio_func: StateIO App ();
stateio_func: [m: StateIOMonad] m ();
stateio_func = do {
    let _ = *register_users;
    let _ = *create_user_pages;
    let _ = *print_users;
    let _ = *print_pages;
    pure()
};

test_stateio: IO ();
test_stateio = do {
    let _ = *println("=== test_stateio ===");
    let (_,s) = *stateio_func.run_stateio(App::empty);
    pure()
};

//stateiof_func: StateIOF App ();
// 返り値がTrait Monadの場合、Lazyにするとうまくいった。
stateiof_func: [m: StateIOFMonad] () -> m ();
stateiof_func = |_| do {
    let _ = *stateio_func;
    let _ = *save_file("");
    let _ = *println("completed.").from_io;
    pure()
};

test_stateiof: IO ();
test_stateiof = do {
    let _ = *println("=== test_stateiof ===").lift;
    let (_,s) = *stateiof_func().run_stateiof(App::empty);
    pure()
}.try(|err| eprintln("ERROR: " + err));

main: IO ();
main = (
    let _ = *test_state;
    let _ = *test_stateio;
    let _ = *test_stateiof;
    pure()
);
