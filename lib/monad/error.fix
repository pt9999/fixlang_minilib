module Minilib.Monad.Error;

// A trait for the interface of monads which can report errors.
trait MonadError = Monad + MonadErrorIF;

// A trait for monads which can report errors.
trait [m: * -> *] m: MonadErrorIF {
    // The type of error.
    type ErrorType m;

    // Reports an error.
    error: ErrorType m -> m a;
}

impl Result e: MonadErrorIF {
    type ErrorType (Result e) = e;
    error = Result::err;
}

impl IOFail: MonadErrorIF {
    type ErrorType IOFail = ErrMsg;
    error = IOFail::throw;
}

from_result_t: [m: MonadError, ErrorType m = e] Result e a -> m a;
from_result_t = |res| (
    if res.is_err { error $ res.as_err };
    pure $ res.as_ok
);