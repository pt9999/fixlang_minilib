module Minilib.Crypto.Cert.X509DnsName;

import Minilib.Monad.Error;
import Minilib.Text.StringEx;


// Compares two domain name component.
// Differences of uppercase or lowercase are ignored.
// If the pattern contains wildcard character ('*'), it matches zero or more characters.
// For details, see RFC 2818 "3.1. Server Identity".
match_domain_name_component: String -> String -> Bool;
match_domain_name_component = |pattern, target| (
    // ignore uppercase/lowercase
    let pattern = pattern.to_lower;
    let target = target.to_lower;

    let pattern = pattern.get_bytes.pop_back;
    let target = target.get_bytes.pop_back;

    // compress consective wildcard characters
    let pattern = pattern.to_iter.fold(
        Array::empty(pattern.get_size), |output, c|
        if c == '*' && output.get_last == some('*') { output };
        output.push_back(c)
    );

    // match characters
    let np = pattern.get_size;
    let nt = target.get_size;
    let inner = fix $ |inner, ip, it| (
        if ip >= np && it >= nt { true };
        if ip >= np { false };
        let p = pattern.@(ip);
        if p == '*' {   // wildcard
            // zero char match
            let ret = inner(ip + 1, it);
            if ret { true };
            // one char match
            let ret = inner(ip + 1, it + 1);
            if ret { true };
            // two or more chars match
            inner(ip, it + 1)
        };
        if it >= nt { false };
        let t = target.@(it);
        if p != t { false };
        inner(ip + 1, it + 1)
    );
    inner(0, 0)
);

// Compares two DNS names.
// Differences of uppercase or lowercase are ignored.
// A wildcard character('*') matches any single domain name component or component fragment.
// For details, see RFC 2818 "3.1. Server Identity".
match_dns_name: String -> String -> Bool;
match_dns_name = |pattern, target| (
    let pattern = pattern.split_ex(".").map(to_lower).to_array;
    let target = target.split_ex(".").map(to_lower).to_array;
    if pattern.get_size != target.get_size {
        false
    };
    Iterator::range(0, pattern.get_size)
    .filter(|i| !match_domain_name_component(pattern.@(i), target.@(i)))
    .is_empty
);

