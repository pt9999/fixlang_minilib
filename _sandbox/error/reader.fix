module Main;

type Reader e a = unbox struct { data: e -> a };

make_reader: (e -> a) -> Reader e a;
make_reader = |f| Reader { data: f };

run_reader: e -> Reader e a -> a;
run_reader = |e, r| (r.@data)(e);

impl Reader e: Monad {
    pure = |a| make_reader $ |_| a;
    bind = |f, ma| make_reader $ |e| (
        let a = ma.run_reader(e);
        let mb = f(a);
        mb.run_reader(e)
    );
}

trait [m: * -> *] m: Read {
    read: m e;
}

impl Reader e: Read {
    read = make_reader $ |e| e;
}

trait ReaderMonad = Read + Monad;

//test_reader: Reader I64 String;           // こちらを有効にすると Type Mismatch エラーになる(正常)
test_reader: [m: ReaderMonad] m String;     // こちらを有効にすると コンパイルがpanic する
test_reader = do {
    let i64: I64 = *read;
    pure $ i64.to_string
};

main: IO ();
main = (
    let s = test_reader.run_reader(345.67); // I64 ではなく F64 を渡しているため、Type Mismatch になってほしい
    println(s)
);
