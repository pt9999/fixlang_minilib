// Complex number, for example `1 + 2i`.
module Minilib.Math.Complex;

import Math;

import Minilib.Math.Types;

// A type that represents a complex number.
// `a` is typically F64 or F32.
type Complex a = unbox struct {
    re: a,        // real part
    im: a         // image part
};

// Creates a complex number.
make: a -> a -> Complex a;
make = |re, im| (
    Complex { re: re, im: im }
);

// `complex` is synonym for `make`.
complex: a -> a -> Complex a;
complex = make;

// Returns the square of the absolute value of a complex number.
abs2: [a: Add, a: Mul] Complex a -> a;
abs2 = |z| z.@re * z.@re + z.@im * z.@im;

// Returns the absolute value of a complex number.
abs: Complex F64 -> F64;
abs = |z| Math::sqrt(abs2(z));

// Returns the argument of a complex number, ie. 
arg: Complex F64  -> F64;
arg = |z| Math::atan2(z.@im, z.@re);

// Returns the conjugate complex number.
conj: [a: Neg] Complex a -> Complex a;
conj = |z| complex(z.@re, -z.@im);

// Converts a complex number to a string.
impl [a: ToString] Complex a: ToString {
    to_string = |z| z.@re.to_string + "+" + z.@im.to_string + "i";
}

impl [a: Eq] Complex a: Eq {
    eq = |w, z| w.@re == z.@re && w.@im == z.@im;
}

impl [a: Zero] Complex a: Zero {
    zero = complex(zero, zero);
}

impl [a: Neg] Complex a: Neg {
    neg = |z| complex(-z.@re, -z.@im);
}

impl [a: Add] Complex a: Add {
    add = |w, z| complex(w.@re + z.@re, w.@im + z.@im);
}

impl [a: Sub] Complex a: Sub {
    sub = |w, z| complex(w.@re - z.@re, w.@im - z.@im);
}

impl [a: Ring] Complex a: Mul {
    mul = |w, z| complex(w.@re * z.@re - w.@im * z.@im,
                         w.@re * z.@im + w.@im * z.@re);
}

impl [a: Field] Complex a: Div {
    div = |w, z| (
        let num = w * z.conj;
        let den = z.abs2;
        complex(num.@re / den, num.@im / den)
    );
}
