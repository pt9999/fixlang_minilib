module BinaryTest;


import Minilib.Encoding.Binary;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_byte_buffer_get: TestCase;
test_byte_buffer_get = (
    make_test("test_byte_buffer_get") $ |_|
    let array = Array::from_map(256, |i| i.to_U8);
    let buf = ByteBuffer::make(array, ByteOrder::little_endian());
    let _ = *assert_equal("le get_u8", 0x41_U8, buf.get_u8(0x41));
    let _ = *assert_equal("le get_u16", 0x4241_U16, buf.get_u16(0x41));
    let _ = *assert_equal("le get_u32", 0x44434241_U32, buf.get_u32(0x41));
    let _ = *assert_equal("le get_u64", 0x4847464544434241_U64, buf.get_u64(0x41));
    let buf = ByteBuffer::make(array, ByteOrder::big_endian());
    let _ = *assert_equal("be get_u8", 0x41_U8, buf.get_u8(0x41));
    let _ = *assert_equal("be get_u16", 0x4142_U16, buf.get_u16(0x41));
    let _ = *assert_equal("be get_u32", 0x41424344_U32, buf.get_u32(0x41));
    let _ = *assert_equal("be get_u64", 0x4142434445464748_U64, buf.get_u64(0x41));
    pure()
);

test_byte_buffer_set: TestCase;
test_byte_buffer_set = (
    make_test("test_byte_buffer_set") $ |_|
    let buf = ByteBuffer::fill(8, 0_U8, ByteOrder::little_endian());
    let _ = *assert_equal("le set_u8",  [0x41_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u8(0, 0x41_U8).get_bytes);
    let _ = *assert_equal("le set_u16", [0x42_U8, 0x41_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u16(0, 0x4142_U16).get_bytes);
    let _ = *assert_equal("le set_u32", [0x44_U8, 0x43_U8, 0x42_U8, 0x41_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u32(0, 0x41424344_U32).get_bytes);
    let _ = *assert_equal("le set_u64", [0x48_U8, 0x47_U8, 0x46_U8, 0x45_U8, 0x44_U8, 0x43_U8, 0x42_U8, 0x41_U8],
                                        buf.set_u64(0, 0x4142434445464748_U64).get_bytes);
    let buf = ByteBuffer::fill(8, 0_U8, ByteOrder::big_endian());
    let _ = *assert_equal("be set_u8",  [0x41_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u8(0, 0x41_U8).get_bytes);
    let _ = *assert_equal("be set_u16", [0x41_U8, 0x42_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u16(0, 0x4142_U16).get_bytes);
    let _ = *assert_equal("be set_u32", [0x41_U8, 0x42_U8, 0x43_U8, 0x44_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u32(0, 0x41424344_U32).get_bytes);
    let _ = *assert_equal("be set_u64", [0x41_U8, 0x42_U8, 0x43_U8, 0x44_U8, 0x45_U8, 0x46_U8, 0x47_U8, 0x48_U8],
                                        buf.set_u64(0, 0x4142434445464748_U64).get_bytes);
    pure()
);

test_marshal: TestCase;
test_marshal = (
    make_test("test_marshal") $ |_|
    let buf = ByteBuffer::empty(0, ByteOrder::big_endian());
    let buf = buf.marshal(0x01_U8);
    let buf = buf.marshal(0x0203_U16);
    let buf = buf.marshal(0x04050607_U32);
    let buf = buf.marshal(0x08090a0b0c0d0e0f_U64);
    let _ = *assert_equal("size", 15, buf.get_size);
    let _ = *assert_equal("position", 15, buf.get_position);
    let _ = *assert_equal("array", [0x01_U8, 0x02_U8, 0x03_U8, 0x04_U8, 0x05_U8, 0x06_U8, 0x07_U8, 0x08_U8,
                        0x09_U8, 0x0a_U8, 0x0b_U8, 0x0c_U8, 0x0d_U8, 0x0e_U8, 0x0f_U8], buf.@array);
    pure()
);

test_unmarshal: TestCase;
test_unmarshal = (
    make_test("test_unmarshal") $ |_|
    let array = [0x01_U8, 0x02_U8, 0x03_U8, 0x04_U8, 0x05_U8, 0x06_U8, 0x07_U8, 0x08_U8,
                    0x09_U8, 0x0a_U8, 0x0b_U8, 0x0c_U8, 0x0d_U8, 0x0e_U8, 0x0f_U8];
    let buf = ByteBuffer::make(array, ByteOrder::big_endian());
    let _ = *assert_equal("position", 0, buf.get_position);
    let (val:U8, buf) = *buf.unmarshal.from_result;
    let _ = *assert_equal("u8", 0x01_U8, val);
    let (val:U16, buf) = *buf.unmarshal.from_result;
    let _ = *assert_equal("u16", 0x0203_U16, val);
    let (val:U32, buf) = *buf.unmarshal.from_result;
    let _ = *assert_equal("u32", 0x04050607_U32, val);
    let (val:U64, buf) = *buf.unmarshal.from_result;
    let _ = *assert_equal("u64", 0x08090a0b0c0d0e0f_U64, val);
    let _ = *assert_equal("position", 15, buf.get_position);
    pure()
);

main: IO ();
main = (
    [
        test_byte_buffer_get,
        test_byte_buffer_set,
        test_marshal,
        test_unmarshal,
        TestCase::empty
    ]
    .run_test_driver
);

