module Minilib.Trait.Monoid;

// A trait that represents a [monoid](https://en.wikipedia.org/wiki/Monoid).
trait a: Monoid {
    // An empty instance.
    mempty: a;
    // `a.mappend(b)` appends `b` after `a`.
    mappend: a -> a -> a;
}

mconcat: [a: Monoid] Iterator a -> a;
mconcat = |iter| iter.fold(mempty, |a,b| a.mappend(b));

impl (): Monoid {
    mempty = ();
    mappend = |a, b| ();
}

impl Array a: Monoid {
    mempty = [];
    mappend = Array::append;
}

impl Iterator a: Monoid {
    mempty = Iterator::empty;
    mappend = Iterator::append;
}

impl String: Monoid {
    mempty = "";
    mappend = String::concat;
}

/*
impl HashSet k v: Monoid {
    mempty = HashSet::empty(0);
    mappend = HashSet::merge;
}
*/
