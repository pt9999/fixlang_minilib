module Main;

import Debug;

import Minilib.App.Clap;
import Minilib.Net.Tcp;
import Minilib.Encoding.Binary;
import Minilib.Text.StringEx;
import Minilib.Net.URL;
import Minilib.Net.Request;

type ResponseParserState = unbox union {
    parsing_status_line: (),
    parsing_headers: (),
    parsed_headers: (),
    parsing_body: I64,
    parse_success: (),
    parse_error: ErrMsg,
};

type ResponseParser = unbox struct {
    state: ResponseParserState,
    array: Array U8,
    position: I64,
    http_version: String,       // eg. "HTTP/1.1"
    status: I64,                // HTTP status (eg. 404)
    reason: String,             // reason phrase (eg. "Not Found")
    headers: Headers,           // response headers
    body: Array U8,
};

namespace ResponseParser {
    empty: ResponseParser;
    empty = ResponseParser {
        state: parsing_status_line(),
        array: data,
        position: 0,
        http_version: "",
        status: 0,
        reason: "",
        headers: Headers::empty,
        body: []
    };

    add_data: Array U8 -> ResponseParser -> ResponseParser;
    add_data = |data, parser| (
        let parser = parser.mod_array(append(data));
        let res = *parser._process_parse;
        if res.is_err {
            parser.set_state(parse_error $ res.as_err);
        };
        let parser = res.as_ok;
        parser
    );

    _process_parse: ResponseParser -> Result ErrMsg ResponseParser;
    _process_parse = |parser| (
        loop_m(
            parser, |parser|
            let state = parser.@state;
            if state.is_parsing_status_line {
                let (line, parser) = parser._read_line;
                if line.is_none { break_m $ parser };
                let parser = *parser._parse_status_line(line.as_some);
                continue_m $ parser
            };
            if state.is_parsing_headers {
                let (line, parser) = parser._read_line;
                if line.is_none { break_m $ parser };
                if line.as_some == "" {
                    continue_m $ parser.set_state(parsed_headers())
                };
                let parser = *parser._parse_header(line.as_some);
                continue_m $ parser
            };
            if state.is_parsed_headers {
                let end_of_body = *parser._get_end_of_body;
                continue_m $ parser.set_state(parsing_body(end_of_body))
            };
            if state.is_parsing_body {
                let end_of_body = state.as_parsing_body;
                if end_of_body.is_some && parser.@array.get_size < end_of_body.as_some {
                    break_m $ parser
                };
            };
            if state.is_parse_success {
                break_m $ parser
            };
            if state.is_parse_error {
                break_m $ parser
            };
            break_m $ parser
        )
    );

    _get_end_of_body: ResponseParser -> Result ErrMsg (Option I64);
    _get_end_of_body = |parser| (
        let opt = parser.@headers.find("Content-Length");
        if opt.is_none { ok $ none() };
        let content_length: I64 = *from_string(opt.as_some);
        let end_of_body = parser.@position + content_length;
        ok $ end_of_body
    );

    _parse_status_line: String -> ResponseParser -> Result ErrMsg ResponseParser;
    _parse_status_line = |line, parser| (
        let (http_version, rest) = line.split_first(" ");
        let (status, reason) = rest.split_first(" ");
        if http_version == "" || status == "" {
             err $ "Invalid status line: `" + line + "`"
        };
        let status: I64 = *status.from_string;
        pure $ parser.set_http_version(http_version)
                        .set_status(status)
                        .set_reason(reason);
                        .set_state(parsing_headers())
    );

    _parse_headers: ResponseParser -> Result ErrMsg ResponseParser;
    _parse_headers = |parser| (
        loop_m(
            parser, |parser|
            let (line, parser) = *parser._read_line;
            if line == "" { break_m $ parser };
            let parser = *parser._parse_header(line);
            continue_m $ parser
        )
    );

    _parse_header: String -> ResponseParser -> Result ErrMsg ResponseParser;
    _parse_header = |line, parser| (
        let (field_name, field_value) = line.split_first(":");
        let field_value = field_value.strip_spaces;
        let parser = parser.mod_headers(append(field_name, field_value));
        ok $ parser
    );

    _parse_body: I64 -> ResponseParser -> Result ErrMsg ResponseParser;
    _parse_body = |content_length, parser| (
        let array = parser.@array;
        let array_size = array.get_size;
        let start = parser.@position;
        let end = start + content_length;
        if end > array_size { err $ "cannot read" };
        let body = array.subarray(start, end);
        let parser = parser.set_body(body).set_position(end);
        pure $ parser
    );

    _read_line: ResponseParser -> (Option String, ResponseParser);
    _read_line = |parser| (
        let parser_orig = parser;
        let array = parser.@array;
        let array_size = array.get_size;
        let start = parser.@position;
        let end = loop(
            start, |i|
            if i >= array_size { break $ array_size };
            if array.@(i) == '\n' { break $ (i + 1) };
            continue $ i + 1
        );
        if start >= end { (none(), parser_orig) };
        let line = array.subarray(start, end)._unsafe_to_string;
        let line = line.strip_last_newlines;
        let parser = parser.set_position(end);
        (some(line), parser)
    );
}




http_fetch: URL -> IOFail ();
http_fetch = |url| (
    if url.@scheme != "http" {
        throw $ "url does not start with 'http://': url=" + url.@url
    };
    let host_port = url.@host + ":" + url.@port;
    let path = url.@path;
    //let _ = *println("host_port = " + host_port).lift;
    //let _ = *println("path = " + path).lift;
    let socket = *connect_to_tcp_server(host_port);
    let request = "GET " + path + " HTTP/1.0\n\n";
    let request = request.get_bytes.pop_back;
    let (start, end) = (0, request.get_size);
    eval *loop_m(
        start, |start|
        if start >= end  { break_m $ () };
        let len = *socket.send(request.subarray(start, end));
        continue_m $ start + len
    );
    let parser = *loop_m(
        [], |data|
        let recv_bytes = *socket.recv(4096);
        eval debug_eprintln("received " + recv_bytes.get_size.to_string + " bytes");
        let data = data.append(recv_bytes);
        let res = ResponseParser::make(data).parse;
        if res.is_ok {
            break_m $ res.as_ok
        };
        eval debug_eprintln("err="+res.as_err);
        if recv_bytes.get_size == 0 {
            throw $ "unexpected EOF"
        };
        continue_m $ data
    );
    eval *print(parser.@body._unsafe_to_string).lift;
    pure()
);

main: IO ();
main = (
    do {
        let command = (
            Command::new("sample_client")
            .version("0.1")
            .about("Fetches contents from remote HTTP server.")
            .arg(Arg::new("URL").takes_value.default_value("http://localhost")
                .help("The URL to fetch. NOTE: URL should start with 'http://'."))
        );
        let matches = *command.get_matches;
        let url = matches.get_one("URL").as_some;
        //let _ = *println("url = " + url).lift;
        let url = *URL::parse(url).from_result;
        http_fetch(url)
    }.try (
        |err| eprintln(err)
    )
);
