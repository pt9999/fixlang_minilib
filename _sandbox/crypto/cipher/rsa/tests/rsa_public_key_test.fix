module Main;

import Minilib.Crypto.Cipher.Rsa.RSAPublicKey;
import Minilib.Crypto.Cert.Asn1;
import Minilib.Crypto.Cert.Asn1Der;
import Minilib.Crypto.Cert.Asn1DerEncode;
import Minilib.Crypto.Cert.X509;
import UnitTest;

// generated by commands below:
// ```
// openssl genrsa -out test1.key 1024
// openssl req -new -key test1.key -out test1.csr
// openssl x509 -days 9999 -req -signkey test1.key -in test1.csr -out test1.crt
// ```
cert_pem_1: String;
cert_pem_1 = "
-----BEGIN CERTIFICATE-----
MIICIDCCAYkCFHmZo37EEX9F3KqN2/NsTx8tNFVjMA0GCSqGSIb3DQEBCwUAME4x
CzAJBgNVBAYTAkpQMQ0wCwYDVQQIDARUZXN0MQ0wCwYDVQQHDARUZXN0MQ0wCwYD
VQQKDARUZXN0MRIwEAYDVQQDDAlsb2NhbGhvc3QwIBcNMjQwNzA5MTQwNTEwWhgP
MjA1MTExMjQxNDA1MTBaME4xCzAJBgNVBAYTAkpQMQ0wCwYDVQQIDARUZXN0MQ0w
CwYDVQQHDARUZXN0MQ0wCwYDVQQKDARUZXN0MRIwEAYDVQQDDAlsb2NhbGhvc3Qw
gZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAOs2sspSMNH0vv1h2EvBZYWe43Zk
X2yIWc53ffkdD9OEVApNwfM4pobCZqjKqdrD+GxdklIHSjjgEAlUVKsv94wRg1oE
vjkT8JsJS0e6Pp4U+WnLsvzhriql0F3leUvMSHWMzya/GuY0uLGyV1Cq8TiPv8Sc
DP17bSt+rFhyE0zzAgMBAAEwDQYJKoZIhvcNAQELBQADgYEAhHTff6JMQsLx3M5H
eRBiqYP8viQRkP3sM9Zq1gN+okwDiiE/RD5fBYX4YmEfDiPCFFDEwM1CmEOyrV31
MK9hbovfVk1NxKGaQW9X2PHeaRXpQYtkdzN1PpWb8gdaohVYx3V+TeYs9zb/RwTJ
PGGL6BRsYlIDF0lgi0UTkVT9PR8=
-----END CERTIFICATE-----
";

test_rsa_public_key_encode_decode_der: TestCase;
test_rsa_public_key_encode_decode_der = (
    make_test("test_rsa_public_key_encode_decode_der") $ |_|
    // Read X.509 Certificate from PEM string.
    let certificates = *read_certificates_from_pem_string(cert_pem_1).from_result;
    eval *assert_equal("size", 1, certificates.get_size);
    let certificate = certificates.@(0);
    // Extract DER-encoded bytes of a RSA public key from the certificate.
    let public_key_info: SubjectPublicKeyInfo = certificate.get_subject_public_key;
    let public_key_der: Array U8 = public_key_info.@subject_public_key.@data;
    // Decode RSA public key from DER-encoded bytes.
    let public_key: RSAPublicKey = *decode_der_from_bytes(public_key_der).from_result;
    // Encode RSA public key back to DER-encoded bytes.
    let public_key_der2: Array U8 = *encode_der_to_bytes(public_key).from_result;

    assert_equal("eq", public_key_der2, public_key_der)
);

main: IO ();
main = (
    [
        test_rsa_public_key_encode_decode_der,
    ]
    .run_test_driver
);
