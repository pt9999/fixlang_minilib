module Main;

import Minilib.Crypto.Cipher.X25519.X25519;
import Minilib.Math.BigInt;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

// RFC7748 5.2.  Test Vectors
// "... The first is a pair of test vectors for each function that consist of expected outputs for the given inputs. ..."

test_x25519: TestCase;
test_x25519 = (
    make_table_test("test_x25519",
        [
            ("a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4",
            "e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c",
            "c3da55379de9c6908e94ea4df28d084f32eccf03491c71f754b4075577a28552"),
            ("4b66e9d4d1b4673c5ad22691957d6af5c11b6421e0ea01d42ca4169e7918ba0d",
            "e5210f12786811d3f4b7959d0538ae2c31dbe7106fc03c3efc4cd549c715a493",
            "95cbde9476e8907d7aade45cb4b873f88b595a68799fa152e6f8f7647aac7957"),
        ],
        |(input_scalar, input_u_coord, output_u_coord)|
        let input_scalar: Array U8 = *input_scalar.from_string_hex.from_result;
        let input_u_coord: Array U8 = *input_u_coord.from_string_hex.from_result;
        //let output_u_coord: Array U8 = *output_u_coord.from_string_hex.from_result;
        let actual: Array U8 = x25519(input_scalar, input_u_coord);
        let actual: String = actual.to_string_hex;
        assert_equal("eq", output_u_coord, actual);;
        pure()
    )
);

// RFC7748 5.2.  Test Vectors
// "... The second type of test vector consists of the result of calling the function in question a specified number of times. ..."

test_x25519_2: TestCase;
test_x25519_2 = (
    make_table_test("test_x25519_2",
        [
            (1, "422c8e7a6227d7bca1350b3e2bb7279f7897b87bb6854b783c60e80311ae3079"),
            (1000, "684cf59ba83309552800ef566f2f4d3c1c3887c49360e3875f2eb94d99532c51"),
            //(1000000, "7c3911e0ab2586fd864497297e575e6f3bc601c0883c30df5f4dd2d24f665424"),
        ],
        |(iteration, expected)|
        let input_scalar = "0900000000000000000000000000000000000000000000000000000000000000";
        let k: Array U8 = *input_scalar.from_string_hex.from_result;
        let u = k;
        let result = loop(
            (k, u, 0), |(k, u, i)|
            if i >= iteration { break $ k };
            let res = x25519(k, u);
            continue $ (res, k, i+1)
        );
        let actual: String = result.to_string_hex;
        assert_equal("eq", expected, actual)
    )
);

main: IO ();
main = (
    [
        test_x25519,
        //test_x25519_2,  // spends 18.3 second
    ]
    .run_test_driver
);

