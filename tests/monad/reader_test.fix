module Main;

import Debug;

import Minilib.Monad.Reader;
import Minilib.Trait.Monoid;
import Minilib.Trait.Comonad;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_reader_functor: TestCase;
test_reader_functor = (
    make_test("test_reader_functor") $ |_|
    let r = reader(|e| e.@(0));
    let r = r.map(add(1));
    let r = r.map(to_string);
    assert_equal("eq", "3", r.run_reader([2]))
);

test_reader_monad: TestCase;
test_reader_monad = (
    make_test("test_reader_monad") $ |_|
    let get_elt = |i| (
        let a = *read;
        pure $ a.@(i)
    );
    let r = do {
        let x = *get_elt(0);
        let y = *get_elt(1);
        pure $ x + y
    };
    assert_equal("eq", 5, r.run_reader([2, 3]))
);

test_sub_reader: TestCase;
test_sub_reader = (
    make_test("test_sub_reader") $ |_|
    let r_sub2 = |p:I64, q:I64| reader $ |r:I64| (p,q,r).format("p={}, q={}, r={}");
    let r_sub  = |p:I64| reader $ |q:I64| r_sub2(p,q);
    let r_main  = reader $ |p:I64| r_sub(p);
    let actual = r_main.run_reader(3).run_reader(4).run_reader(5);
    assert_equal("eq", "p=3, q=4, r=5", actual)
);

test_traced_comonad: TestCase;
test_traced_comonad = (
    make_test("test_traced_comonad") $ |_|
    let joiner : Traced (Array String) String = traced $ |items| items.to_iter.join(",");
    let _ = *assert_equal("joiner.extract", "", joiner.extract);
    let _ = *assert_equal("joiner.run_traced", "a,b", joiner.run_traced(["a","b"]));
    let sub = joiner.extend(|t| "(" + t.run_traced(["sub"]) + ")");
    let main = sub.extend(|t| "<" + t.run_traced(["main"]) + ">");
    let _ = *assert_equal("main.run_traced", "<(start,main,sub)>", main.run_traced(["start"]));
    pure()
);

test_traced_comonad_laws: TestCase;
test_traced_comonad_laws = (
    make_test("test_traced_comonad_laws") $ |_|
    let w = traced $ |str| str + "x";
    let f: Traced String String -> String = |w| w.extract + "y";
    let g: Traced String String -> String = |w| w.extract + "z";
    let h: String -> String = |s| "<" + s + ">";
    let _ = *assert_equal("", "ax", w.extend(extract).run_traced("a"));
    let _ = *assert_equal("", "xy", w.extend(f).extract);
    let _ = *assert_equal("", "axyz", w.extend(f).extend(g).run_traced("a"));
    let _ = *assert_equal("", "axyz", w.extend(extend(f) >> g).run_traced("a"));
    let _ = *assert_equal("", "ax", w.duplicate.extract.run_traced("a"));
    let _ = *assert_equal("", "ax", w.duplicate.map(extract).run_traced("a"));
    let _ = *assert_equal("", "axy", w.extend(f).run_traced("a"));
    let _ = *assert_equal("", "axy", w.duplicate.map(f).run_traced("a"));
    let _ = *assert_equal("", "<ax>", w.map(h).run_traced("a"));
    let _ = *assert_equal("", "<ax>", w.extend(h << extract).run_traced("a"));
    pure()
);

main: IO ();
main = (
    [
        test_reader_functor,
        test_reader_monad,
        test_sub_reader,
        test_traced_comonad,
        test_traced_comonad_laws,
        TestCase::empty
    ]
    .run_test_driver
);

