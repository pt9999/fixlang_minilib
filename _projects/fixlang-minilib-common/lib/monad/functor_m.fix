// `map_m`, `foreach_m` for Array and Iterator.
module Minilib.Monad.FunctorM;

trait [f : *->*] f : FunctorM {
    map_m : [m : Monad] (a -> m b) -> f a -> m (f b);
    foreach_m : [m : Monad] (a -> m ()) -> f a -> m ();
}

impl Array: FunctorM {
    map_m = |f, array| array.to_iter.fold_m(
        Array::empty(array.get_size), |output, a|
        let b = *f(a);
        pure $ output.push_back(b)
    );
    foreach_m = |f, array| array.to_iter.fold_m(
        (), |_, a|
        f(a)
    );
}

impl Iterator: FunctorM {
    map_m = |f, iter| (
        let output = *iter.to_array.map_m(f);
        pure $ output.to_iter
    );
    foreach_m = |f, iter| iter.fold_m(
        (), |_, a|
        f(a)
    );
}

