module UnicodeTest;


import Minilib.Text.StringEx;
import Minilib.Text.Unicode;
import Minilib.Testing.UnitTest;

test_utf8_to_utf32_ok: (Array U8, Array U32) -> TestCase;
test_utf8_to_utf32_ok = |(a8, a32)| (
    let testname = "test_utf8_to_utf32_ok (" + a32.to_string + ")";
    make_test(testname) $ |_|
    let actual = utf8_to_utf32(a8, Array::empty(0));
    let _ = *(assert_equal("eq", a32, actual));
    pure()
);

test_utf8_to_utf32: TestCase;
test_utf8_to_utf32 = (
    [
        test_utf8_to_utf32_ok $ ([], []),
        test_utf8_to_utf32_ok $ ([0_U8, 127_U8], [0_U32, 127_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11000010 = */ 194_U8, /* 0b10000000 = */ 128_U8], [/* 0x0080 = */128_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11010011 = */ 211_U8, /* 0b10100100 = */ 164_U8], [/* 0x04E4 = */1252_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11011111 = */ 223_U8, /* 0b10111111 = */ 191_U8], [/* 0x07FF = */2047_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11100000 = */ 224_U8, /* 0b10100000 = */ 160_U8, /* 0b10000000 = */ 128_U8], [/* 0x0800 = */2048_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11101111 = */ 239_U8, /* 0b10111111 = */ 191_U8, /* 0b101111 = */ 191_U8], [/* 0xFFFF = */65535_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11110000 = */ 240_U8, /* 0b10010000 = */ 144_U8, /* 0b10000000 = */ 128_U8, /* 0b10000000 = */ 128_U8], [/* 0x10000 = */65536_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11110100 = */ 244_U8, /* 0b10001111 = */ 143_U8, /* 0b10111111 = */ 191_U8, /* 0b10111111 = */ 191_U8], [/* 0x10FFFF = */1114111_U32]),
        TestCase::empty
    ].run_tests
);

test_utf32_to_utf8_ok: (Array U32, Array U8) -> TestCase;
test_utf32_to_utf8_ok = |(a32, a8)| (
    let testname = "test_utf32_to_utf8_ok (" + a8.to_string + ")";
    make_test(testname) $ |_|
    let actual = utf32_to_utf8(a32, Array::empty(0));
    let _ = *(assert_equal("eq", a8, actual));
    pure()
);

test_utf32_to_utf8: TestCase;
test_utf32_to_utf8 = (
    [
        test_utf32_to_utf8_ok $ ([], []),
        test_utf32_to_utf8_ok $ ([0_U32, 127_U32], [0_U8, 127_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x0080 = */128_U32], [/* 0b11000010 = */ 194_U8, /* 0b10000000 = */ 128_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x04E4 = */1252_U32], [/* 0b11010011 = */ 211_U8, /* 0b10100100 = */ 164_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x07FF = */2047_U32], [/* 0b11011111 = */ 223_U8, /* 0b10111111 = */ 191_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x0800 = */2048_U32], [/* 0b11100000 = */ 224_U8, /* 0b10100000 = */ 160_U8, /* 0b10000000 = */ 128_U8]),
        test_utf32_to_utf8_ok $ ([/* 0xFFFF = */65535_U32], [/* 0b11101111 = */ 239_U8, /* 0b10111111 = */ 191_U8, /* 0b101111 = */ 191_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x10000 = */65536_U32], [/* 0b11110000 = */ 240_U8, /* 0b10010000 = */ 144_U8, /* 0b10000000 = */ 128_U8, /* 0b10000000 = */ 128_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x10FFFF = */1114111_U32], [/* 0b11110100 = */ 244_U8, /* 0b10001111 = */ 143_U8, /* 0b10111111 = */ 191_U8, /* 0b10111111 = */ 191_U8]),
        TestCase::empty
    ].run_tests
);

test_utf16_to_utf32_ok: (Array U16, Array U32) -> TestCase;
test_utf16_to_utf32_ok = |(a16, a32)| (
    let testname = "test_utf16_to_utf32_ok (" + a32.to_string + ")";
    make_test(testname) $ |_|
    let actual = utf16_to_utf32(a16, Array::empty(0));
    let _ = *(assert_equal("eq", a32, actual));
    pure()
);

test_utf16_to_utf32: TestCase;
test_utf16_to_utf32 = (
    [
        test_utf16_to_utf32_ok $ ([], []),
        test_utf16_to_utf32_ok $ ([0_U16, 65535_U16], [0_U32, 65535_U32]),
        test_utf16_to_utf32_ok $ ([/* 0xD800 = */ 55296_U16, /* 0xDC00 = */ 56320_U16], [/* 0x10000 = */65536_U32]),
        test_utf16_to_utf32_ok $ ([/* 0xD83D = */ 55357_U16, /* 0xDE38 = */ 56888_U16], [/* 0x1F638 = */128568_U32]),
        test_utf16_to_utf32_ok $ ([/* 0xDBFF = */ 56319_U16, /* 0xDFFF = */ 57343_U16], [/* 0x10FFFF = */1114111_U32]),
        test_utf16_to_utf32_ok $ ([/* 0xD800 = */ 55296_U16, /* 0xD83D = */ 55357_U16, /* 0xDE38 = */ 56888_U16], [/* 0xFFFD = */ 65533_U32, /* 0x1F638 = */128568_U32]),
        TestCase::empty
    ].run_tests
);

test_utf32_to_utf16_ok: (Array U32, Array U16) -> TestCase;
test_utf32_to_utf16_ok = |(a32, a16)| (
    let testname = "test_utf32_to_utf16_ok (" + a16.to_string + ")";
    make_test(testname) $ |_|
    let actual = utf32_to_utf16(a32, Array::empty(0));
    let _ = *(assert_equal("eq", a16, actual));
    pure()
);

test_utf32_to_utf16: TestCase;
test_utf32_to_utf16 = (
    [
        test_utf32_to_utf16_ok $ ([], []),
        test_utf32_to_utf16_ok $ ([0_U32, 65535_U32], [0_U16, 65535_U16]),
        test_utf32_to_utf16_ok $ ([/* 0x10000 = */65536_U32], [/* 0xD800 = */ 55296_U16, /* 0xDC00 = */ 56320_U16]),
        test_utf32_to_utf16_ok $ ([/* 0x1F638 = */128568_U32], [/* 0xD83D = */ 55357_U16, /* 0xDE38 = */ 56888_U16]),
        test_utf32_to_utf16_ok $ ([/* 0x10FFFF = */1114111_U32], [/* 0xDBFF = */ 56319_U16, /* 0xDFFF = */ 57343_U16]),
        test_utf32_to_utf16_ok $ ([/* 0x110000 = */1114112_U32], [/* 0xFFFD = */ 65533_U16]),
        TestCase::empty
    ].run_tests
);

test_utf8_enc_dec_ok: String -> TestCase;
test_utf8_enc_dec_ok = |str| (
    let testname = "test_utf8_enc_dec_ok (" + str + ")";
    make_test(testname) $ |_|
    let a8 = str.get_bytes.pop_back;
    let a32 = utf8_to_utf32(a8, Array::empty(0));
    let a16 = utf32_to_utf16(a32, Array::empty(0));
    let a32 = utf16_to_utf32(a16, Array::empty(0));
    let a8 = utf32_to_utf8(a32, Array::empty(0));
    let actual = a8._unsafe_to_string;
    let _ = *(assert_equal("eq", str, actual));
    pure()
);

test_utf8_enc_dec: TestCase;
test_utf8_enc_dec = (
    [
        test_utf8_enc_dec_ok $ "aAあいう😊😀",
        TestCase::empty
    ].run_tests
);

main: IO ();
main = (
    [
        test_utf8_to_utf32,
        test_utf32_to_utf8,
        test_utf16_to_utf32,
        test_utf32_to_utf16,
        test_utf8_enc_dec,
        TestCase::empty
    ]
    .run_test_driver
);

