// Identity comonad
module Minilib.Comonad.IdentityC;

import Minilib.Trait.Comonad;

// Identity comonad
type IdentityC a = unbox struct {
    data: a
};

// Creates an identity comonad from a value.
make: a -> IdentityC a;
make = |a| IdentityC { data: a };

// Gets a value from an identity comonad.
get: IdentityC a -> a;
get = @data;

impl IdentityC: Functor {
    map = |f, ia| IdentityC::make(f(ia.get));
}

impl IdentityC: Comonad {
    extract = get;
    extend = |f, ib| IdentityC::make(f(ib));
}
