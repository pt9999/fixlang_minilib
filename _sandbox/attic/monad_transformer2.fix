module Main;

type [m: Monad] StateT m s a = unbox struct {
    data: s -> m (a, s)
};

namespace StateT {
    run_state: s -> StateT m s a -> m (a, s);
    run_state = |ma| (ma.@data)(s);
}

impl [m: Monad] StateT m s: Monad
{
    pure = |a| StateT { data: |s| pure((a, s)) };
    bind = |f, ma| StateT { data: |s|
        let (a,s) = *ma.run_state(s);
        f(a).run_state(s)
    };
}

main: IO ();
main = (
    let ma = pure(1) : StateT IO I64 I64;
    pure()
);
