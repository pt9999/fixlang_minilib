// Key Agreement for TLS 1.3
module Minilib.Crypto.Tls.KeyAgreement;

import Debug;

import Minilib.Crypto.Tls.Types;
import Minilib.Monad.Random;
import Minilib.Crypto.Tls.KeyShare;
import Minilib.Crypto.Tls.ECDHE;
import Minilib.Crypto.ECDSA;
//import Minilib.Encoding.Binary;
import Minilib.Text.Hex;

type KeyAgreement = unbox union {
    ecdhe: ECDHE,
    x25519: X25519,
};

impl KeyAgreement: ToString {
    to_string = |ka| (
        if ka.is_ecdhe { ka.as_ecdhe.to_string };
        if ka.is_x25519 { ka.as_x25519.to_string };
        ""
    );
}

namespace KeyAgreement {
    make_defaults: [m: MonadRandom] m (Array KeyAgreement);
    make_defaults = (
        eval *pure();
        pure $ [
            KeyAgreement::ecdhe $ *ECDHE::make(ECParam::secp256r1),
            //KeyAgreement::x25519 $ *X25519::make,
        ]
    );

    to_key_share_entry: KeyAgreement -> KeyShareEntry;
    to_key_share_entry = |ka| (
        if ka.is_ecdhe { ka.as_ecdhe.to_key_share_entry };
        if ka.is_x25519 { ka.as_x25519.to_key_share_entry };
        abort()
    );

    accept_server_share: KeyShareEntry -> Array KeyAgreement -> Result ErrMsg SharedSecret;
    accept_server_share = |server_share, key_agreements| (
        let opt_idx = key_agreements.find_by(|ka|
            let client_share = ka.to_key_share_entry;
            client_share.@group == server_share.@group
        );
        if opt_idx.is_none {
            err $ "accept_server_share: failed"
        };
        let ka = key_agreements.@(opt_idx.as_some);
        if ka.is_ecdhe { ka.as_ecdhe.accept_server_share(server_share) };
        if ka.is_x25519 { ka.as_x25519.accept_server_share(server_share) };
        abort()
    );
}

// Currently this is only mock-up for testing
type X25519 = unbox struct {
    dummy: ()
};

impl X25519: ToString {
    to_string = |x| "X25519 {}";
}

namespace X25519 {
    make: [m: Monad] m X25519;
    make = (
        pure $ X25519 { dummy: () }
    );

    to_key_share_entry: X25519 -> KeyShareEntry;
    to_key_share_entry = |x| (
        let key_exchange: Result ErrMsg (Array U8) = from_string_hex("99381de560e4bd43d23d8e435a7dbafeb3c06e51c13cae4d5413691e529aaf2c");
        KeyShareEntry {
            group: 0x001D_U16,
            key_exchange: key_exchange.as_ok
        }
    );

    accept_server_share: KeyShareEntry -> X25519 -> Result ErrMsg SharedSecret;
    accept_server_share = |server_share, x| (
        "8bd4054fb55b9d63fdfbacf9f04b9f0d35e6d63f537563efd46272900f89492d".from_string_hex
    );
}

