module BigfloatTest;

import Math;

import Minilib.Math.BigFloat;
import Minilib.Math.BigInt;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

// TODO: add tests


test_get_prec: TestCase;
test_get_prec = (
    make_table_test("test_get_prec",
        [
            ([0x76543210_U32, 0xfedcba98_U32], -1, 5, 64),
            ([0x76543210_U32, 0_U32], 1, 3, 64),
            ([0x76543210_U32], -1, 123, 32),
            ([0_U32], 1, 111, 32)
        ],
        |(nat, sign, exp, expect)|
        let a = BigFloat::make(BigInt::make(sign, nat), exp);
        let a = a.mod_int(set_nat(nat)); // to avoid _remove_last_zeros
        assert_equal("eq", expect, a.get_prec)
    )
);

test_set_prec: TestCase;
test_set_prec = (
    make_table_test("test_set_prec",
        [
            (([0x76543210_U32, 0xfedcba98_U32], 5), 65, ([0x00000000_U32, 0x76543210_U32, 0xfedcba98_U32], 5 - 32)),
            (([0x76543210_U32, 0xfedcba98_U32], 7), 64, ([0x76543210_U32, 0xfedcba98_U32], 7)),
            (([0x7fffffff_U32, 0xfedcba98_U32], 9), 32, ([0xfedcba98_U32], 9 + 32)),
            (([0x80000000_U32, 0xfedcba98_U32], 9), 32, ([0xfedcba99_U32], 9 + 32)),
            (([0x7fffffff_U32, 0xfedcba98_U32], 9), 0, ([0xfedcba98_U32], 9 + 32)),
            (([0x0000fedc_U32], 11), 96, ([0x00000000_U32, 0x00000000_U32, 0xfedc0000_U32], 11 - 64 - 16)),
            (([0_U32], 0), 32, ([0_U32], 0))
        ],
        |((nat, exp), prec, (ex_nat, ex_exp))|
        let sign = 1;
        let a = BigFloat::make(BigInt::make(sign, nat), exp);
        let a = a.mod_int(set_nat(nat)); // to avoid _remove_last_zeros
        let a = a.set_prec(prec);
        let _ = *assert_equal("nat", ex_nat, a.@int.@nat);
        assert_equal("exp", ex_exp, a.@exp)
    )
);

test_from_string: TestCase;
test_from_string = (
    make_table_test("test_from_string",
        [
            ("-123456789012345678901.78901234567890123", "-123456789012345678901.789012345678901230"),
            ("1234567890123.1234567", "1234567890123.1234567000000000"),
            ("1234567890123.0000001", "1234567890123.0000001000000000"),
            ("1234567890123.1234567e+7", "12345678901231234567.000000000"),
            ("1234567890123.1234567E-7", "123456.78901231234567000000000"),
            ("0.1", "0.1000000000"),
            ("10.0", "10.00000000"),
            ("1E6", "1000000.000"),
            ("0", "0")
        ],
        |(a, expect)|
        let sign = 1;
        let a: BigFloat = *from_string(a).from_result;
        assert_equal("from_string", expect, a.to_string)
    )
);

test_to_string_precision: TestCase;
test_to_string_precision = (
    make_table_test("to_string_precision",
        [
            (([0xB82A0B09_U32, 0x587E6997_U32, 0xc_U32], -64), 0, "12"),
            (([0xB82A0B09_U32, 0x587E6997_U32, 0xc_U32], -64), 1, "12.3"),
            (([0xB82A0B09_U32, 0x587E6997_U32, 0xc_U32], -64), 2, "12.35"),
            (([0xB82A0B09_U32, 0x587E6997_U32, 0xc_U32], -64), 5, "12.34568"),
            (([0xB82A0B09_U32, 0x587E6997_U32, 0xc_U32], -64), 12, "12.345678901234"),
            (([0x94395810_U32, 0xD_U32], -32), 0, "14"),
            (([0x94395810_U32, 0xD_U32], -32), 1, "13.6"),
            (([0x94395810_U32, 0xD_U32], -32), 2, "13.58"),
            (([0x94395810_U32, 0xD_U32], -32), 3, "13.579"),
            (([3_U32], 4), 5, "48.00000"),
            (([3_U32], -1), 5, "1.50000"),
            (([0_U32], 0), 0, "0")
        ],
        |((nat, exp), prec, expect)|
        let sign = 1;
        let a = BigFloat::make(BigInt::make(sign, nat), exp);
        let a = a.mod_int(set_nat(nat)); // to avoid _remove_last_zeros
        assert_equal("to_string_precision", expect, a.to_string_precision(prec))
    )
);

test_to_string_exp_precision: TestCase;
test_to_string_exp_precision = (
    make_table_test("test_to_string_exp_precision",
        [
            ("0.0000000001", 6, "1.000000E-10"),
            ("1000000000000.0", 6, "1.000000E+12"),
            ("456789.0123", 6, "4.567890E+5"),
            ("-12300000000", 3, "-1.230E+10"),
            ("-0.0000000123", 3, "-1.230E-8"),
            ("0", 0, "0E+0")
        ],
        |(a, n, expect)|
        let a: BigFloat = *from_string(a).from_result;
        assert_equal("to_string_exp_precision", expect, a.to_string_exp_precision(n))
    )
);

test_eq_lt_le: TestCase;
test_eq_lt_le = (
    make_table_test("test_eq_lt_le",
        [
            (12.345, 12.345, (true, false, true)),
            (12.345, 12.3456, (false, true, true)),
            (12.3456, 12.345, (false, false, false)),
            (0.056789, 0.056789, (true, false, true)),
            (0.056789, 0.0567891, (false, true, true)),
            (0.0567892, 0.056789, (false, false, false)),
            (0.0, 0.0, (true, false, true))
        ],
        |(a, b, expect)|
        let a = BigFloat::from_F64(a);
        let b = BigFloat::from_F64(b).set_prec(96);
        let actual = (a == b, a < b, a <= b);
        let _ = *assert_equal("eq", expect.@0, actual.@0);
        let _ = *assert_equal("lt", expect.@1, actual.@1);
        let _ = *assert_equal("le", expect.@2, actual.@2);
        pure()
    )
);

test_sqrt: TestCase;
test_sqrt = (
    make_table_test("test_sqrt",
        [
            ("12345.6789012345678901", 20),
            ("12345.678901234", 20),
            ("5678.7776655443", 20),
            ("2.0", 20)
        ],
        |(a, prec10)|
        let square = |x| x * x;
        let a: BigFloat = *from_string(a).from_result;
        let a = a.set_prec10(prec10);
        let x = a.sqrt;
        let xx = square(x);
        let xx1 = square(x + x.epsilon);
        let xx2 = square(x - x.epsilon);
        let diff_x = (xx - a).abs;
        let diff_x1 = (xx1 - a).abs;
        let diff_x2 = (xx2 - a).abs;
        /*
        let show: BigFloat -> String = |x| x.to_string_precision(prec10*2)+" " + x._to_string_rep;
        let _ = *eprintln("a      ="+a.show).lift;
        let _ = *eprintln("xx     ="+xx.show).lift;
        let _ = *eprintln("xx1    ="+xx1.show).lift;
        let _ = *eprintln("xx2    ="+xx2.show).lift;
        let show: BigFloat -> String = |x| x.to_string_precision(prec10)+" " + x._to_string_rep;
        let _ = *eprintln("diff_x ="+diff_x.show).lift;
        let _ = *eprintln("diff_x1="+diff_x1.show).lift;
        let _ = *eprintln("diff_x2="+diff_x2.show).lift;
        */
        let _ = *assert_true("diff_x <= diff_x1", diff_x <= diff_x1);
        let _ = *assert_true("diff_x <= diff_x2", diff_x <= diff_x2);
        pure()
    )
);

main: IO ();
main = (
    [
        test_get_prec,
        test_set_prec,
        test_from_string,
        test_to_string_precision,
        test_to_string_exp_precision,
        test_eq_lt_le,
        test_sqrt,
        TestCase::empty
    ]
    .run_test_driver
);

