// Euclid algorithms, such as `gcd` (greatest common divisor).
//
// `Euclid` represents a Euclidean domain, which is a Ring with following division-with-remainder.
// ```
// forall a b, a = (a / b) * b + (a % b)
// ```
//
// For details, see [Wikipedia: Euclidean domain](https://en.wikipedia.org/wiki/Euclidean_domain).
module Minilib.Math.Euclid;

import Minilib.Common.Common;
import Minilib.Math.Types;

// `gcd(a,b)` calculates the greatest common divisor of `a` and `b`.
gcd: [a: Euclid] a -> a -> a;
gcd = |a, b| (
    if b == zero { a };
    let c = a % b;
    gcd(b, c)
);

// `extended_euclid(a,b)` performs
// [Extended Euclidean algorithm](https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm).
// It solves `a * x + b * y = d` where `d = gcd(a, b)`,
// and returns `(x, y, d)`.
extended_euclid: [a: Euclid] a -> a -> (a, a, a);
extended_euclid = |a, b| (
    if b == zero {
        (one, zero, a)
    };
    let q = a / b;
    let r = a % b;
    assert_lazy(|_| "division-with-remainder failed", a == q * b + r) $ |_|
    let (y, z, d) = extended_euclid(b, r);
    // b * y + r * z = d
    // b * y + (a - q * b) * z = d
    // a * z + b * (y - q * z) = d
    let x = z;
    let y = y - q * z;
    assert_lazy(|_| "extended euclid failed"
        // + " ((a,x),(b,y),(ans, d))=" + ((a, x), (b, y), (a * x + b * y, d)).to_string
    , a * x + b * y == d) $ |_|
    (x, y, d)
);
