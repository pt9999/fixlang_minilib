module Main;

import Debug;
import Character;

import SimpleParser;
import UnitTest;

test_stream_readall: TestCase;
test_stream_readall = (
    make_test("test_stream_readall") $
    let str = "hello\nworld\n";
    let s: Stream = *(from_result $ str.from_string);
    let s = s.set_filename("hello.txt");
    let (arr, s) = s.read_all;
    let _ = *(assert_equal("filename", "hello.txt", s.@filename));
    let result_str = String::_unsafe_from_c_str (arr.push_back(0_U8));
    let _ = *(assert_equal("array", result_str, str));
    let _ = *(assert_equal("line", 2, s.@line));
    let _ = *(assert_equal("column", 0, s.@column));
    pure()
);

test_stream_error: TestCase;
test_stream_error = (
    make_test("test_stream_error") $
    let str = "hello\nworld\n";
    let s: Stream = *(from_result $ str.from_string);
    let s = s.set_filename("hello.txt").set_line(1).set_column(2);
    let res: Result ErrMsg () = s.error("errormsg");
    let _ = *(assert_true("res is not err", res.is_err));
    let errmsg = res.as_err;
    let _ = *(assert_equal("errmsg", "hello.txt line 1, column 2: errormsg", errmsg));
    pure()    
);

test_parser_cls_1: (String, String) -> TestCase;
test_parser_cls_1 = |(text, expected)| (
    let testname = "test_parser_cls(" + text + "," + expected + ")";
    make_test(testname) $
    let p = Parser::cls(is_digit);
    let (token, next) = *(from_result $ p.run_parser_str(text));
    let _ = *(assert_equal("token", expected, token));
    pure()
);

test_parser_cls: TestCase;
test_parser_cls = (
    [
        test_parser_cls_1 $ ("01234abc", "01234"),
        test_parser_cls_1 $ ("abc0123", ""),
        test_parser_cls_1 $ ("", "")
    ].run_tests
);

main: IO ();
main = (
    [
        test_stream_readall,
        test_stream_error,
        test_parser_cls
    ]
    .run_tests
    .try(|err| println (err))
);
