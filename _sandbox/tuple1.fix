module Main;

import Random;

import Minilib.Testing.UnitTest;

test_tuple2_map: TestCase;
test_tuple2_map = (
    make_test("test_tuple2_map") $ |_|
    let a = (1, 2);
    let a = a.map(add(3));
    let a = a.map(to_string);
    assert_equal("eq", (1, "5"), a)
);

test_tuple3_map: TestCase;
test_tuple3_map = (
    make_test("test_tuple3_map") $ |_|
    let a = ("a", 1.1, 2);
    let a = a.map(add(3));
    let a = a.map(to_string);
    assert_equal("eq", ("a", 1.1, "5"), a)
);

type Foo = unbox struct {
    random: Random,
    array: Array I64,
};

test_struct_act: TestCase;
test_struct_act = (
    make_test("test_struct_act") $ |_|
    let foo = Foo {
        random: Random::init_by_seed(123_U64),
        array: [1, 2, 3],
    };
    let (r, foo) = foo.act_random(|random|
        let (random, r) = random.generate_U64;
        (r, random)
    );
    //eval *println("r=" + r.to_string).lift;
    let (a, foo) = foo.act_array(|array|
        (array.get_last.as_some, array.pop_back)
    );
    //eval *println("a=" + a.to_string).lift;
    eval *assert_equal("a", 3, a);
    assert_equal("eq", [1, 2], foo.@array)
);

main: IO ();
main = (
    [
        test_tuple2_map,
        test_tuple3_map,
        test_struct_act,
    ]
    .run_test_driver
);