module Main;

import Minilib.Text.StringEx;

namespace F64 {
    _to_string_short: F64 -> String;
    _to_string_short = |x| (
        let str = x.to_string;
        let str = str.strip_last(|c| c == '0').strip_last(|c| c == '.');
        str
    );
}

// Figure

type FPath = unbox struct {
    data: String
};

namespace FPath {
    empty: FPath;
    empty = FPath {
        data: ""
    };

    _append: String -> FPath -> FPath;
    _append = |str, path| (
        path.mod_data(|data|
            let data = if data.is_empty { data } else { data + " " };
            data + str
        )
    );

    moveto: F64 -> F64 -> FPath -> FPath;
    moveto = |x, y| _append([x, y].map(_to_string_short).format("M {} {}");

    lineto: F64 -> F64 -> FPath -> FPath;
    lineto = |x, y| _append([x, y].map(_to_string_short).format("L {} {}");

    closepath: FPath -> FPath;
    closepath = _append("Z");
    
    cubicto: F64 -> F64 -> F64 -> F64 -> F64 -> F64 -> FPath -> FPath;
    cubicto = |x1, y1, x2, y2, x, y| (
            _append([x1, y1, x2, y2, x, y].map(_to_string_short).format("C {} {}, {} {}, {} {}")  
    );

    cubicto_short: F64 -> F64 -> F64 -> F64 -> FPath -> FPath;
    cubicto_short = |x2, y2, x, y| (
            _append([x2, y2, x, y].map(_to_string_short).format("S {} {}, {} {}")  
    );

    quadto: F64 -> F64 -> F64 -> F64 -> FPath -> FPath;
    quadto = |x1, y1, x, y| (
            _append([x1, y1, x, y].map(_to_string_short).format("Q {} {}, {} {}")  
    );

    quadto_short: F64 -> F64 -> FPath -> FPath;
    quadto_short = |x, y| (
            _append([x, y].map(_to_string_short).format("T {} {}")  
    );

    arcto: @@@@

}


