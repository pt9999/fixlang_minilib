module Minilib.Crypto.Cert.CACertificates;

import Debug;
import HashMap;

import Minilib.Crypto.Cert.Asn1;
import Minilib.Crypto.Cert.X509;
import Minilib.Monad.Error;
import Minilib.Monad.FunctorM;
import Minilib.Text.StringEx;

type CACertificates = unbox struct {
    map: HashMap X509::Name Certificate,
};

namespace CACertificates {

    path: Path;
    path = (
        // TODO: support other OS
        Path::parse("/etc/ssl/certs/ca-certificates.crt").as_some
    );

    read_all: IOFail (Array Certificate);
    read_all = (
        eval *pure();
        let path = CACertificates::path;
        read_certificates_from_pem_file(path)
    );

    make: IOFail CACertificates;
    make = (
        eval *pure();
        let certificates = *CACertificates::read_all;
        let map = certificates.to_iter.fold(
            HashMap::empty(certificates.get_size), |map, certificate|
            map.insert(certificate.@tbs_certificate.@subject, certificate)
        );
        pure $ CACertificates {
            map: map
        }
    );

    find: X509::Name -> CACertificates -> Option Certificate;
    find = |name, ca_certs| ca_certs.@map.find(name);
}
