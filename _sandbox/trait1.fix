module Main;

trait a: Default {
    default: Option a;
}

impl I64: Default {
    default = some(1);
}

trait a: Consume {
    consume: Option a -> String;
}

impl I64: Consume {
    consume = to_string;
}

test_consume: IO ();
test_consume = (
    let a: Option I64 = default;
    println(a.to_string);;
    println(some(2).consume)
);

//------------------------------------

trait a: MulScalar {
    type ScalarType a;
    mul_scalar: ScalarType a -> a -> a;
}

impl [a: Mul] Array a: MulScalar {
    type ScalarType (Array a) = a;
    mul_scalar = |a, xs| xs.map(|x| a * x);
}

impl F64: MulScalar {
    type ScalarType F64 = F64;
    mul_scalar = |a, x| a * x;
}

impl I64: MulScalar {
    type ScalarType I64 = I64;
    mul_scalar = |a, x| a * x;
}

test_mul_scalar: IO ();
test_mul_scalar = (
    println(mul_scalar(1.2, [3.4, 5.6]).to_string);;
    println(mul_scalar(1.2, 3.4).to_string);;
    println(mul_scalar(12, 34).to_string);;
    pure()
);

//------------------------------------
main: IO ();
main = (
    test_consume;;
    test_mul_scalar;;
    pure()
);
