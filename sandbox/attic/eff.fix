module Main;

//-------------------------------------------------------
// State Monad
//-------------------------------------------------------

type State s a = unbox struct { _data: s -> (a, s) };

namespace State {
    make_state_monad: (s -> (a, s)) -> State s a;
    make_state_monad = |f| State { _data: f };

    run_state: s -> State s a -> (a, s);
    run_state = |s, ma| (ma.@_data) (s);

    get_state: State s s;
    get_state = make_state_monad $ |s| (s, s);

    put_state: s -> State s ();
    put_state = |s| make_state_monad $ |_| ((), s);
}

impl State s: Monad {
    pure = |a| make_state_monad $ |s| (a, s);
    bind = |f, ma| make_state_monad $ |s|
        let (a, ss) = ma.run_state(s);
        let mb = f(a);
        mb.run_state(ss) 
    ;
}

//--------------------------------------------------
type Effect a = box union {
  eff_io: IO a,
  eff_state: State s a,
  eff_option: Option a,
  eff_result: Result e a
};

type Eff w a = unbox struct {
    runEff: (a -> VE w) -> VE w
};

impl Eff w: Monad {
    pure = |a| Eff { runEff: |k| k(a) };
    bind = |f, m| Eff { runEff: |k| m.@runEff (|v| f(v).@runEff(k)) };
}

type VE w = unbox union {
    value: w,
    effect: I64 -> VE w
};

ask: Eff I64;
ask = Eff { runEff: |k| effect(k) };

admin: Eff w -> VE w;
admin = |m| m.@runEff (value);



main: IO ();
main = pure ();
