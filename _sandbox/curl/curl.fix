module Minilib.Net.Curl;

import Debug;
import Minilib.Text.StringEx;

type Curl = box struct {
    dtor: Destructor Ptr
};

type WriteFunction = Array U8 -> IOFail I64;

make: IOFail Curl;
make = (
    eval *pure();
    eval debug_eprintln("curl_glue_init");
    let glue = FFI_CALL[Ptr curl_glue_init()];
    let curl = Curl {
        dtor: Destructor::make(glue, |glue|
            eval debug_eprintln("curl_glue_cleanup");
            FFI_CALL[() curl_glue_cleanup(Ptr), glue]
        )
    };
    pure $ curl
);

_throw_error: Curl -> IOFail ();
_throw_error = |curl| (
    curl.@dtor.borrow(|glue|
        let errmsg = FFI_CALL[Ptr curl_glue_get_error_message(Ptr), glue];
        throw $ String::_unsafe_from_c_str_ptr(errmsg)
    )
);

set_url: String -> Curl -> IOFail ();
set_url = |url, curl| (
    eval *pure();
    let res = url.borrow_c_str(|p_url|
        curl.@dtor.borrow(|glue|
            FFI_CALL[CInt curl_glue_set_url(Ptr, Ptr), glue, p_url]
        )
    );
    if res != 0.to_CInt {
        _throw_error(curl)
    };
    pure()
);

perform: Curl -> IOFail ();
perform = |curl| (
    eval *pure();
    let res = curl.@dtor.borrow(|glue|
        FFI_CALL[CInt curl_glue_perform(Ptr), glue]
    );
    if res != 0.to_CInt {
        _throw_error(curl)
    };
    pure()
);
/*

write_function: WriteFunction -> Curl -> IOFail ();
write_function = |func, curl| (
    // func: Array U8 -> IOFail I64, a fix value
    // how to get a fix value from _callback_write_function?
);

_callback_write_function: Ptr -> CSizeT -> CSizeT -> Ptr -> Array I64 -> ();
_callback_write_function = |ptr, size, nmemb, userdata, result| (

);

*/
