module Main;

import Minilib.Monad.Identity;
import Minilib.Monad.IO;

trait lf: Lift {
    type LiftFrom lf;
    type LiftTo lf;
    lifter: lf;
    lift_from: (LiftFrom lf) -> lf -> (LiftTo lf);
}

type [n: * -> *, m: * -> *] Lifter n m a = unbox struct {};

impl [m: Monad] Lifter Identity m a: Lift {
    type LiftFrom (Lifter Identity m a) = Identity a;
    type LiftTo (Lifter Identity m a) = m a;
    lifter = Lifter{};
    lift_from = |ma, _| pure $ ma.Identity::get;
}

impl [m: MonadIO] Lifter IO m a: Lift {
    type LiftFrom (Lifter IO m a) = IO a;
    type LiftTo (Lifter IO m a) = m a;
    lifter = Lifter{};
    lift_from = |ma, _| ma.lift_io;
}

impl [m: MonadIOFail] Lifter IOFail m a: Lift {
    type LiftFrom (Lifter IOFail m a) = IOFail a;
    type LiftTo (Lifter IOFail m a) = m a;
    lifter = Lifter{};
    lift_from = |ma, _| ma.lift_iofail;
}

test1: IOFail ();
test1 = (
    let lifter_: Lifter IO IOFail () = lifter;
    lifter_.lift_from(println("a"))
);

main: IO ();
main = (
    test1
    .try(eprintln)
);