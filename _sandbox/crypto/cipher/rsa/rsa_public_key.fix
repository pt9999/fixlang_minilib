module Minilib.Crypto.Cipher.Rsa.RSAPublicKey;

import Minilib.Crypto.Cert.Asn1;
import Minilib.Crypto.Cert.Asn1Der;
import Minilib.Crypto.Cert.Asn1DerEncode;
import Minilib.Encoding.Binary;
import Minilib.Math.BigInt;

// ASN.1 type `RSAPublicKey` specified in RFC8017 "A.1.1. RSA Public Key Syntax"
type RSAPublicKey = unbox struct {
    n: BigInt,
    e: BigInt,
};

impl RSAPublicKey: ToString {
    to_string = |obj| (
        "RSAPublicKey {" +
        " n=" + obj.@n.to_string +
        " e=" + obj.@e.to_string +
        " }"
    );
}

impl RSAPublicKey: DecodeDer {
    decode_obj = (
        decode_sequence $ do {
            pure $ RSAPublicKey {
                n: *decode_obj,
                e: *decode_obj,
            }
        }
    );
}

impl RSAPublicKey: EncodeDer {
    encode_obj = |obj| (
        encode_sequence $ do {
            eval *encode_obj(obj.@n);
            eval *encode_obj(obj.@e);
            pure()
        }
    );
}
