module Main;
import Hash;
import HashMap;

import Minilib.Monad.State;

//-------------------------------------------------------
// Memoize function
//-------------------------------------------------------

// A type of function which takes an argument (key) and returns a State monad of value
// with a memo (hashmap).
type MemoizableFunc k v = k -> State (HashMap k v) v;

// Memoize function which takes a function (f) to be memoized, and takes an argument (key)
// and returns a State monad of value.
memoize: [k: HashKey] MemoizableFunc k v -> k -> State (HashMap k v) v;
memoize = |f| |key| (
    // Get current memo from the state monad.
    let memo = *get_state;
    let value_opt = memo.find(key);
    if value_opt.is_some {
        let value = value_opt.as_some;
        pure(value)
    };

    // Call the function to be memoized.
    let value = *f(key);

    // Get current memo agagin, since the memo might be updated by the function call above.
    let memo = *get_state;
    // Put key-value pair into memo, and save to the current state.
    let memo = memo.insert(key, value);
    let _ = *put_state(memo);
    // Return value as a monad.
    pure(value)
);

//-------------------------------------------------------
// Fibonacci function (I64 -> String)
//-------------------------------------------------------

type Key = I64;
type Value = String;

// The recursive fibonacci function which will be memoized.
// This function is defined which takes an argument (key) and returns
// any monad of a return value.
fib_inner: [m:Monad] (Key -> m Value) -> Key -> m Value;
fib_inner = |loop| |n| (
    if n == 0 {
        pure("a")
    } else if n == 1 {
        pure("b")
    } else {
        let a = *loop(n-2);
        let b = *loop(n-1);
        pure(a + b)
    }
);

// Memoized fibonacci function.
fib_memo: Key -> Value;
fib_memo = |n| (
    // Create a memo (hashmap).
    let memo = HashMap::empty(n);
    // Create a recursive memoized function.
    let f = fix $ memoize << fib_inner;
    // Call the function and extract the value from State monad.
    let ma = f(n);
    ma.eval_state(memo)
);

main : IO ();
main = (
    println(fib_memo(9).to_string);;
    let ans = fib_memo(10);
    print $ ans.to_string
);

