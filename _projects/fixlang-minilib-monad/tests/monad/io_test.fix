module IoTest;


import Minilib.Monad.IO;
import Minilib.Testing.UnitTest;

test_io: TestCase;
test_io = (
    make_test("test_io") $ |_|
    let inner: IO I64 = pure $ 42;
    let outer: IO String = do {
        let val = *inner.lift_io;
        pure $ val.to_string
    };
    let expected = "42";
    let actual = *outer.lift;
    assert_equal("eq", expected, actual)
);

test_iofail: TestCase;
test_iofail = (
    make_test("test_iofail") $ |_|
    let inner_io: IO I64 = pure $ 42;
    let inner_iofail: IOFail I64 = pure $ 57;
    let outer: IOFail String = do {
        let val1 = *inner_io.lift_io;
        let val2 = *inner_iofail.lift_iofail;
        pure $ val1.to_string + "," + val2.to_string
    };
    let expected = "42,57";
    let actual = *outer;
    assert_equal("eq", expected, actual)
);

main: IO ();
main = (
    [
        test_io,
        test_iofail,
    ]
    .run_test_driver
);

