module Main;

import Sandbox.Xml;

test_element: IO ();
test_element = (
    let elt: XmlElement = element("hello").addF $
    element("world");

    // cannot write as `parent.add $ child` since it parses as `add(parent, child)`
    // but it should be `add(child, parent)`.
    // 1. `add_to` = flip $ add
    // 2. use function composition
    //      elem("hello").const >> elem("world").add
    // const: a -> b -> a;
    // elem("hello").const: b -> XmlElement;
    // elem("world").add: XmlElement -> XmlElement;

    //      elem("parent") << children $ [elem("child1"), elem("child2")]
    let doc = XmlDocument::make $ elt;
    println(elt.to_string)
);

test_svg: IO ();
test_svg = (
    let rect = element("rect").attr("width", "100%").attr("height", "100%").attr("fill", "red");
    let circle = element("circle").attr("cx", "150").attr("cy", "100").attr("r", "80").attr("fill", "green");
    let text = element("text").attr("x", "150").attr("y", "125").attr("font-size", "60").attr("text-anchor", "middle")
        .attr("fill", "white").text("SVG");
    let svg = element("svg").attr("version", "1.1").attr("baseProfile", "full").attr("width", "300").attr("height", "200")
        .attr("xmlns", "http://www.w3.org/2000/svg");
    let svg = svg.add(rect).add(circle).add(text);
    let doc = XmlDocument::make(svg);
    println(doc.to_string)
);

main: IO ();
main = test_svg;
