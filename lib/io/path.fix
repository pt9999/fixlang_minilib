// File Path handling, such as joining paths and retrieving directory name.
module Minilib.IO.Path;

import Minilib.Text.StringEx;

// Checks if the byte is a path separator. Currently only '/' is supported.
is_path_sep: U8 -> Bool;
is_path_sep = |c| c == '/';

// `join_paths(path_segments)` joins segments into a path.
join_paths: Array String -> String;
join_paths = |path_segments| (
    path_segments.to_iter.fold(
        "", |result, segment|
        if result == "" {
            segment
        };
        let result = result.strip_last_bytes(is_path_sep);
        let segment = segment.strip_first_bytes(is_path_sep);
        result + "/" + segment
    )
);

// TODO: add basename

// `dirname(path)` returns the path with its last non-slash component and trailing slashes removed.
// if `path` contains no `/`s, returns `"."`.
dirname: String -> String;
dirname = |path| (
    if path == "" {
        "."
    };
    let path = path.strip_last_bytes(is_path_sep);
    if path == "" {
        "/"
    };
    let opt = path.find_last_byte('/');
    if opt.is_none {
        "."
    };
    if opt.as_some == 0 {
        "/"
    };
    let parent_dir = path.substring(0, opt.as_some);
    parent_dir
);

