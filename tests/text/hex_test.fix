module HexTest;


import Minilib.Text.Hex;
import Minilib.Testing.UnitTest;

test_to_string_hex: TestCase;
test_to_string_hex = (
    make_table_test("test_to_string_hex",
        [
            (42_U8.to_string_hex, "2a"),
            (0x0123_U16.to_string_hex, "0123"),
            (3735928559_U32.to_string_hex, "deadbeef"),
            (18446744073709551615_U64.to_string_hex, "ffffffffffffffff")
        ],
        |(actual, expected)|
        assert_equal("eq", expected, actual)
    )
);

test_from_string_hex_ok: [a: Eq, a: ToString, a: FromStringHex] (String, Result ErrMsg a) -> TestCase;
test_from_string_hex_ok = |(str, expected)| (
    let testname = "test_from_string_hex_ok (" + str + "," + expected.to_string + ")";
    make_test(testname) $ |_|
    assert_equal("eq", expected, str.from_string_hex)
);

test_from_string_hex: TestCase;
test_from_string_hex = (
    [
        test_from_string_hex_ok $ ("0", ok $ 0_U64),
        test_from_string_hex_ok $ ("0", ok $ 0_U32),
        test_from_string_hex_ok $ ("0", ok $ 0_U16),
        test_from_string_hex_ok $ ("0", ok $ 0_U8),
        test_from_string_hex_ok $ ("2a", ok $ 0x2a_U64),
        test_from_string_hex_ok $ ("2a", ok $ 0x2a_U32),
        test_from_string_hex_ok $ ("2a", ok $ 0x2a_U16),
        test_from_string_hex_ok $ ("2a", ok $ 0x2a_U8),
        test_from_string_hex_ok $ ("DeadBeef", ok $ 0xdeadbeef_U64),
        test_from_string_hex_ok $ ("DeadBeef", ok $ 0xdeadbeef_U32),
        test_from_string_hex_ok $ ("DeadBeef", (err $ "Too long string"): Result ErrMsg U16),
        test_from_string_hex_ok $ ("DeadBeef", (err $ "Too long string"): Result ErrMsg U8),
        test_from_string_hex_ok $ ("ffffffffffffffff", ok $ 0xffffffffffffffff_U64),
        test_from_string_hex_ok $ ("ffffffffffffffff", (err $ "Too long string"): Result ErrMsg U32),
        test_from_string_hex_ok $ ("ffffffffffffffff", (err $ "Too long string"): Result ErrMsg U16),
        test_from_string_hex_ok $ ("ffffffffffffffff", (err $ "Too long string"): Result ErrMsg U8),
        test_from_string_hex_ok $ ("Dead.beef", (err $ "Not a hexadecimal character: '.'"): Result ErrMsg U64),
        test_from_string_hex_ok $ ("", (err $ "Empty string"): Result ErrMsg U64),
        test_from_string_hex_ok $ ("abcde", (ok $ [ 0xab_U8, 0xcd_U8, 0xe_U8 ])),
        test_from_string_hex_ok $ (" a b c de ", (ok $ [ 0xab_U8, 0xcd_U8, 0xe_U8 ])),
        test_from_string_hex_ok $ ("abcde.", (err $ "Not a hexadecimal character: '.'"): Result ErrMsg (Array U8))
    ].run_tests
);

main: IO ();
main = (
    [
        test_to_string_hex,
        test_from_string_hex,
        TestCase::empty
    ]
    .run_test_driver
);

