module Main;

import Minilib.Crypto.Tls13.Types;
import Minilib.Crypto.Tls13.RecordProtocol;

import Debug;

import Minilib.Crypto.SecureRandom;
import Minilib.Encoding.Binary;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_tls_plaintext_marshal_unmarshal: TestCase;
test_tls_plaintext_marshal_unmarshal = (
    make_test("test_tls_plaintext_marshal_unmarshal") $ |_|
    let pt = TLSPlainText::empty.set_type_(application_data()).set_fragment("abc".get_bytes);
    let buf = ByteBuffer::empty(0, big_endian());
    let buf = buf.marshal(pt);
    let expected = "170303000461626300";
    let actual = buf.@array.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("marshal1", actual, expected);
 
    let buf = buf.set_position(0);
    let (pt: TLSPlainText, buf) = *buf.unmarshal.from_result;
    let buf = ByteBuffer::empty(0, big_endian());
    let buf = buf.marshal(pt);
    let actual = buf.@array.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("marshal2", actual, expected);
    pure()
);

main: IO ();
main = (
    [
        test_tls_plaintext_marshal_unmarshal,
    ]
    .run_test_driver
);
