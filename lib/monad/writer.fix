// Writer monad. (a.k.a Env, CoReader comonad)
//
// For details, see [blog post: The Reader and Writer Monads and Comonads](https://www.olivierverdier.com/posts/2014/12/31/reader-writer-monad-comonad/).
module Minilib.Monad.Writer;

import Minilib.Trait.Monoid;
import Minilib.Trait.Semigroup;
import Minilib.Trait.Comonad;

// Writer monad wraps a pair of an environment and a value.
// `e` is a type of an environment.
// `a` is a type of a value.
type Writer e a = unbox struct {
    data: (e, a)
};

namespace Writer {
    // Creates a writer monad from an enviroment and a value.
    writer: e -> a -> Writer e a;
    writer = |e, a| Writer { data: (e, a) };

    // Runs a writer monad to get an enviroment and a value.
    run_writer: Writer e a -> (e, a);
    run_writer = @data;

    // Creates a writer monad that appends to the environment.
    write: [e: Monoid] e -> Writer e ();
    write = |e| writer(e, ());

    // Gets the envirionment from a writer monad.
    get_env: Writer e a -> e;
    get_env = |ma| ma.@data.@0;

    // Gets the value from a writer monad.
    get_value: Writer e a -> a;
    get_value = |ma| ma.@data.@1;
}

// Env comonad. this is same as a writer monad.
type Env e a = Writer e a;

namespace Env {
    // Creates a env comonad from an enviroment and a value.
    env: e -> a -> Env e a;
    env = Writer::writer;

    // Converts a env comonad to a pair of an enviroment and a value.
    to_tuple: Env e a -> (e, a);
    to_tuple = @data;
}

impl Writer e: Functor {
    map = |f, ma| writer(ma.get_env, f(ma.get_value));
}

impl [e: Monoid] Writer e: Monad {
    pure = |a| writer(mempty, a);
    bind = |f, ma| (
        let mb = f(ma.get_value);
        let env = ma.get_env.sappend(mb.get_env);
        writer(env, mb.get_value)
    );
}

impl Writer e: Comonad {
    extract = get_value;
    extend = |f, wb| writer(wb.get_env, f(wb));
}
