module FunctorMTest;

//import AsyncTask;

import Minilib.Monad.FunctorM;
import Minilib.Monad.Writer;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

iofail_pure: a -> IOFail a;
iofail_pure = pure;

test_map_m: TestCase;
test_map_m = (
    make_test("test_map_m") $ |_|
    let array = [1,2,3];
    let actual = *array.map_m(|i| iofail_pure(i.to_string));
    let expected = ["1", "2", "3"];
    let _ = *assert_equal("array", expected, actual);

    let iter = [4,5,6].to_iter;
    let actual = *iter.map_m(|i| iofail_pure(i.to_string));
    let expected = ["4", "5", "6"];
    let _ = *assert_equal("iter", expected, actual.to_array);

    pure()
);

/*
test_foreach_m: TestCase;
test_foreach_m = (
    make_test("test_foreach_m") $ |_|
    let var = *Var::make([]).lift;
    let array = [1,2,3];
    let _ = *array.foreach_m(|i|
        var.mod(push_back(i.to_string))
    ).lift;
    let actual = *var.get.lift;
    let expected = ["1", "2", "3"];
    let _ = *assert_equal("array", expected, actual);

    let _ = *var.Var::set([]).lift;
    let iter = [4,5,6].to_iter;
    let _ = *iter.foreach_m(|i|
        var.mod(push_back(i.to_string))
    ).lift;
    let actual = *var.get.lift;
    let expected = ["4", "5", "6"];
    let _ = *assert_equal("iter", expected, actual);
    pure()
);
*/

test_foreach_m: TestCase;
test_foreach_m = (
    make_test("test_foreach_m") $ |_|
    let array = [1,2,3];
    let wm = array.foreach_m(|i|
        write(i.to_string)
    );
    let (actual, _) = wm.run_writer;
    let expected = "123";
    let _ = *assert_equal("array", expected, actual);

    let iter = [4,5,6].to_iter;
    let wm = iter.foreach_m(|i|
        write(i.to_string)
    );
    let (actual, _) = wm.run_writer;
    let expected = "456";
    let _ = *assert_equal("iter", expected, actual);
    pure()
);

main: IO ();
main = (
    [
        test_map_m,
        test_foreach_m
    ]
    .run_test_driver
);

