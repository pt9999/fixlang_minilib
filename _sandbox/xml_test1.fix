module Main;

import Sandbox.Xml;

main: IO ();
main = (
    let elt: XmlElement = element("hello")
    .add(element("world"));     
    // cannot write as `parent.add $ child` since it parses as `add(parent, child)`
    // but it should be `add(child, parent)`.
    // 1. `add_to` = flip $ add
    // 2. use function composition
    //      elem("hello").const >> elem("world").add
    // const: a -> b -> a;
    // elem("hello").const: b -> XmlElement;
    // elem("world").add: XmlElement -> XmlElement;

    //      elem("parent") << children $ [elem("child1"), elem("child2")]
    let doc = XmlDocument::make $ elt;
    println(elt.to_string)
);