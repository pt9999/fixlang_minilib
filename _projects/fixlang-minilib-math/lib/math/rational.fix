// Rational number arithmetic, for example `1/2 + 1/3 = 5/6`.
module Minilib.Math.Rational;


import Minilib.Math.Types;
import Minilib.Math.Euclid;

// Rational number
type Rational a = unbox struct {
    num: a,     // numerator
    den: a      // denominator
};

namespace Rational {
    // `make(num, den)` creates a rational number `(num/den)`.
    // Aborts if `den` is zero.
    make: [a: Euclid] a -> a -> Rational a;
    make = |num, den| (
        eval assert(|_| "rational: Divide by zero", den != zero);
        Rational { num: num, den: den }
    );

    // Synonym for `make`.
    rational: [a: Euclid] a -> a -> Rational a;
    rational = make;

    // Reduces a rational number.
    reduce: [a: Euclid] Rational a -> Rational a;
    reduce = |x| (
        let d = gcd(x.@num, x.@den);
        rational(x.@num / d, x.@den / d)
    );
}

impl [a: Euclid, a: ToString] Rational a: ToString {
    to_string = |x| "(" + x.@num.to_string + "/" + x.@den.to_string + ")";
}

impl [a: Euclid] Rational a: Eq {
    eq = |x, y| x.@num == y.@num && x.@den == y.@den;
}

impl [a: Euclid, a: One] Rational a: Zero {
    zero = rational(zero, one);
}

impl [a: Euclid, a: One] Rational a: One {
    one = rational(one, one);
}

impl [a: Euclid] Rational a: Neg {
    neg = |x| (
        rational(-x.@num, x.@den)
    );
}

impl [a: Euclid] Rational a: Add {
    add = |x, y| (
        let num = x.@num * y.@den + y.@num * x.@den;
        let den = x.@den * y.@den;
        rational(num, den).reduce
    );
}

impl [a: Euclid] Rational a: Sub {
    sub = |x, y| add(x, neg(y));
}

impl [a: Euclid] Rational a: Mul {
    mul = |x, y| (
        rational(x.@num * y.@num, x.@den * y.@den).reduce
    );
}

impl [a: Euclid] Rational a: Div {
    div = |x, y| (
        rational(x.@num * y.@den, x.@den * y.@num).reduce
    );
}
