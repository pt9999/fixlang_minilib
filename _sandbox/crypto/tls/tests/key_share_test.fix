module Main;


import Minilib.Crypto.Tls.KeyShare;
import Minilib.Crypto.Tls.Types;
import Minilib.Crypto.Tls.Extensions;     // NamedGroup
import Minilib.Encoding.Binary;
import Minilib.Text.Hex;
import StringEx;
import UnitTest;

test_key_share_entry: TestCase;
test_key_share_entry = (
    make_test("test_key_share_entry") $ |_|
    let kse = KeyShareEntry::make(
        NamedGroup::secp256r1, [ 0x01_U8, 0x02_U8, 0x03_U8 ]
    );
    let bytes = marshal_to_bytes(kse);
    let expected = "00170003010203";
    let actual = bytes.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("bytes", expected, actual);
    let kse2 = *unmarshal_from_bytes(bytes).from_result;
    eval *assert_true("kse", kse == kse2);
    pure()
);

test_key_share_client_hello: TestCase;
test_key_share_client_hello = (
    make_test("test_key_share_client_hello") $ |_|
    let kse = KeyShareEntry::make(
        NamedGroup::secp256r1, [ 0x01_U8, 0x02_U8, 0x03_U8 ]
    );
    let ks = KeyShareClientHello::make([kse]);
    let bytes = marshal_to_bytes(ks);
    let expected = "000700170003010203";
    let actual = bytes.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("bytes", expected, actual);
    let ks2 = *unmarshal_from_bytes(bytes).from_result;
    eval *assert_true("ks", ks.@client_shares == ks2.@client_shares);
    pure()
);

test_key_share_hello_retry_request: TestCase;
test_key_share_hello_retry_request = (
    make_test("test_key_share_hello_retry_request") $ |_|
    let ks = KeyShareHelloRetryRequest::make(NamedGroup::secp256r1);
    let bytes = marshal_to_bytes(ks);
    let expected = "0017";
    let actual = bytes.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("bytes", expected, actual);
    let ks2 = *unmarshal_from_bytes(bytes).from_result;
    eval *assert_true("ks", ks.@selected_group == ks2.@selected_group);
    pure()
);

test_key_share_server_hello: TestCase;
test_key_share_server_hello = (
    make_test("test_key_share_server_hello") $ |_|
    let kse = KeyShareEntry::make(
        NamedGroup::secp256r1, [ 0x01_U8, 0x02_U8, 0x03_U8 ]
    );
    let ks = KeyShareServerHello::make(kse);
    let bytes = marshal_to_bytes(ks);
    let expected = "00170003010203";
    let actual = bytes.to_string_hex;
    //eval *println(actual).lift;
    eval *assert_equal("bytes", expected, actual);
    let ks2 = *unmarshal_from_bytes(bytes).from_result;
    eval *assert_true("ks", ks.@server_share == ks2.@server_share);
    pure()
);
main: IO ();
main = (
    [
        test_key_share_entry,
        test_key_share_client_hello,
        test_key_share_hello_retry_request,
        test_key_share_server_hello,
    ]
    .run_test_driver
);

