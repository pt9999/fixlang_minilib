// Fix test runner
module Main;

import AsyncTask;
import Subprocess;

import Minilib.App.Clap;
import Minilib.IO.FileSystem;
import Minilib.IO.Path;
import Minilib.Monad.FunctorM;
import StringEx;


execute_command: String -> Array String -> IOFail ();
execute_command = |cmd, args| (
    let command_line = args.to_iter.join(" ");
    let _ = *eprintln(">> " + command_line).lift;

    let make_drain_task = |src_fh, dest_fh| (
        AsyncIOTask::make(
            loop_m(
                (), |_|
                let line = *read_line(src_fh);
                if line == "" {
                    break_m $ ()
                };
                let _ = *write_string(dest_fh, line);
                continue_m $ ()
            ).try(eprintln)
        )
    );
    let (_, exit_status) = *Subprocess::run_with_stream(cmd, args,
        |(stdin, stdout, stderr)|
        eval *close_file(stdin).lift; // Send EOF.
        let stdout_task = *make_drain_task(stdout, IO::stdout).lift;
        let stderr_task = *make_drain_task(stderr, IO::stderr).lift;
        let _ = stdout_task.get;
        let _ = stderr_task.get;
        pure()
    );
    if exit_status.is_exit && exit_status.as_exit != 0_U8 {
        throw $ "fixautotest: program exited with exit code " + exit_status.as_exit.to_string
    };
    if exit_status.is_signaled {
        throw $ "fixautotest: program exited with signal " + exit_status.as_signaled.to_string
    };
    if exit_status.is_wait_failed {
        throw $ "fixautotest: waiting for program failed!"
    };
    let _ = *println("").lift;
    pure()
);

type TestResult = unbox struct {
    success: I64,
    fail: I64
};

namespace TestResult {
    empty: TestResult;
    empty = TestResult {
        success: 0,
        fail: 0
    };

    show: TestResult -> IO ();
    show = |test_result| (
        println ((test_result.@success, test_result.@fail)
            .format("AUTOTEST RESULT: SUCCESS: {} FAIL: {}"))
    );
}

// Application
type App = unbox struct {
    test_dirs: Array String,
    test_names: Array String,
    import_lib_dirs: Array String,
    opt_level: Option String,
    keep_going: Option String,
    var_test_result: Var TestResult
};

namespace App {
    get_bin_dir: App -> IOFail String;
    get_bin_dir = |app| (
        let args = *IO::get_args.lift;
        let cmd = args.@(0);
        pure $ dirname(cmd)
    );

    build_test_args: String -> App -> IOFail (Array String);
    build_test_args = |test_file_path, app| (
        let args = [
            *app.get_bin_dir + "/fixautolink",
            "run"
        ].append(
            app.@import_lib_dirs.map(|import_lib_dir|
                [ "-I", import_lib_dir ]
            ).flatten
        ).append(
            [ "-f", test_file_path ]
        ).append(
            app.@opt_level.map_or(
                [], |level| [ "--opt-level", level ]
            )
        );
        pure $ args
    );

    mod_result: (TestResult -> TestResult) -> App -> IO ();
    mod_result = |f, app| (
        app.@var_test_result.mod(f)
    );

    process_test_file: String -> App -> IOFail ();
    process_test_file = |test_file_path, app| (
        let args = *app.build_test_args(test_file_path);
        let res = *execute_command(args.@(0), args).to_result.lift;
        if res.is_ok {
            let _ = *app.mod_result(mod_success(add(1))).lift;
            pure()
        };
        let _ = *app.mod_result(mod_fail(add(1))).lift;
        if app.@keep_going.is_some {
            let _ = *eprintln(res.as_err).lift;
            pure()
        };
        throw $ res.as_err
    );

    process_test_dir: String -> App -> IOFail ();
    process_test_dir = |test_dir, app| (
        let file_paths = (*find_files(test_dir)).to_iter;
        let file_paths = file_paths.filter(|path|
            path.ends_with(".fix") &&
            path.find("/.fixlang/", 0).is_none
        );
        let file_paths = file_paths.filter(|file_path|
            if app.@test_names.is_empty { true };
            app.@test_names.to_iter.map(|test_name|
                file_path.find(test_name, 0).is_some
            ).fold(false, |a, b| a || b)
        );
        file_paths.foreach_m(|file_path|
            app.process_test_file(file_path)
        )
    );

    process_test_dirs: App -> IOFail ();
    process_test_dirs = |app| (
        app.@test_dirs.foreach_m(|test_dir|
            app.process_test_dir(test_dir)
        )
    );

    show_result_and_exit: App -> IO ();
    show_result_and_exit = |app| (
        let test_result = *app.@var_test_result.get;
        let _ = *test_result.show;
        if test_result.@fail > 0 {
            IO::exit(1)
        };
        IO::exit(0)
    );
}

command: Command;
command = (
    Command::new("fixautotest")
    .version("0.1.0")
    .about("Run tests in specified test directory")
    .arg(Arg::new("TEST_NAME").help("Test names to run. If omitted, run all tests.").takes_multiple_values)
    .arg(Arg::new("TEST_DIR").short('T').long("test-dir").help("Test directory").required.takes_multiple_values)
    .arg(Arg::new("IMPORT_LIB_DIR").short('I').long("import-lib-dir").help("Import-lib directory").takes_multiple_values)
    .arg(Arg::new("OPT_LEVEL").short('O').long("opt-level").help("Optimization level").takes_value)
    .arg(Arg::new("KEEP_GOING").short('k').long("keep-going").help("Keep going when some tests fails"))
);

init_app: IOFail App;
init_app = do {
    let _ = *pure();
    let test_result = TestResult {
        success: 0,
        fail: 0
    };
    let matches = *command.get_matches;
    let app = App {
        test_dirs: matches.get_many("TEST_DIR").as_some,
        test_names: matches.get_many("TEST_NAME").as_some_or([]),
        import_lib_dirs: matches.get_many("IMPORT_LIB_DIR").as_some_or([]),
        opt_level: matches.get_one("OPT_LEVEL"),
        keep_going: matches.get_one("KEEP_GOING"),
        var_test_result: *Var::make(test_result).lift
    };
    pure $ app
};

main: IO ();
main = (
    do {
        let _ = *IO::stdout.set_unbuffered_mode.lift;
        let _ = *IO::stderr.set_unbuffered_mode.lift;

        let app = *init_app;
        let _ = *app.process_test_dirs;
        let _ = *app.show_result_and_exit.lift;
        pure()
    }.try(|err|
        let _ = *eprintln(err);
        IO::exit(1)
    )
);
