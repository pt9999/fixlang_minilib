module Main;

import Minilib.IO.FileSystem;
import Minilib.IO.Path;
import Minilib.Terminal.Ncurses;
import Minilib.Trait.Traversable;
import Minilib.Text.StringEx;

namespace StringUtils {
    pad_right: I64 -> U8 -> String -> String;
    pad_right = |result_size, char, str| (
        let str_size = str.get_size;
        if str_size >= result_size {
            str.get_sub(0, result_size)
        };
        let pad_size = result_size - str_size;
        let pad = Array::fill(pad_size, char)._unsafe_to_string;
        str + pad
    );

    pad_left: I64 -> U8 -> String -> String;
    pad_left = |result_size, char, str| (
        let str_size = str.get_size;
        if str_size >= result_size {
            str.get_sub(str_size - result_size, str_size)
        };
        let pad_size = result_size - str_size;
        let pad = Array::fill(pad_size, char)._unsafe_to_string;
        pad + str
    );

    ellipsis: I64 -> String -> String;
    ellipsis = |result_size, str| (
        let str_size = str.get_size;
        let result_size = max(0, result_size);
        if str_size <= result_size { str };
        if result_size < 3 { str.get_sub(0, result_size) };
        "..." + str.get_sub(str_size - (result_size - 3), str_size)
    );
}

namespace CustomColorPair {
    cp_selected: ColorPair;
    cp_selected = 10;

    init_custom_color_pairs: IOFail ();
    init_custom_color_pairs = (
        pure();;    // make it lazy
        init_color_pair(cp_selected, white, blue);;
        pure()
    );
}

type Action = unbox union {
    action: String,
};

type ListItem = unbox struct {
    text: String,
    attr: ChType
};

type ListView = unbox struct {
    window: Window,
    visible: Bool,
    has_focus: Bool,
    title: String,
    items: Array ListItem,
    scroll_top: I64,
    selected_index: I64,
    message: String,
};

namespace ListView {
    make: Window -> Array ListItem -> IOFail ListView;
    make = |window, items| (
        pure $ ListView {
            window: window,
            visible: true,
            has_focus: false,
            title: "",
            items: items,
            scroll_top: 0,
            selected_index: -1,
            message: "",
        }
    );

    show: ListView -> IOFail ListView;
    show = |list_view| (
        let ListView {
            has_focus: has_focus,
            title: title,
            items: items,
            scroll_top: scroll_top,
            selected_index: selected_index,
            message: message,
            window: window
        } = list_view;

        window.clear;;

        let (w, h) = *window.get_window_size;
        let visible_lines = max(0, h - 2);
        let scroll_top = if selected_index < 0 { scroll_top }
        else if selected_index < scroll_top || scroll_top + visible_lines <= selected_index {
            max(0, selected_index - visible_lines / 2)
        } else { scroll_top };
        let list_view = list_view.set_scroll_top(scroll_top);

        loop_m(
            0, |i|
            let item_index = scroll_top + i;
            if i >= visible_lines || item_index >= items.get_size { break_m $ () };
            let item = items.@(item_index);
            if item_index == selected_index {
                if (has_focus) {
                    window.set_color_pair(cp_selected, normal)
                } else {
                    window.set_color_pair(cp_selected, dim)
                }
            } else {
                //window.set_color_pair(cp_white, normal)
                window.set_attr(item.@attr)
            };;
            window.move_add_str(1, i + 1, item.@text);;
            continue_m $ i + 1
        );;
        if (has_focus) {
            window.set_color_pair(cp_green, normal)
        } else {
            window.set_color_pair(cp_white, normal)
        };;
        window.draw_border;;
        window.move_add_str(2, 0, " " + ellipsis(w - 6, title) + " ").when(title != "");;
        window.move_add_str(2, h - 1, " " + ellipsis(w - 6, message) + " ").when(message != "");;
        window.refresh;;
        pure $ list_view
    );

    select_next_item: ListView -> IOFail ListView;
    select_next_item = |list_view| (
        pure $ list_view.mod_selected_index(|index| min(list_view.@items.get_size - 1, index + 1))
    );

    select_prev_item: ListView -> IOFail ListView;
    select_prev_item = |list_view| (
        pure $ list_view.mod_selected_index(|index| max(0, index - 1))
    );
}

type FileItem = box struct {
    file_name: String,
    file_path: String,
    stat: FileStat,
};

namespace FileItem {
    get_file_item: String -> String -> IOFail FileItem;
    get_file_item = |dir_path, file_name| (
        let file_path = join_paths([dir_path, file_name]);
        pure $ FileItem {
            file_name: file_name,
            file_path: file_path,
            stat: *stat(file_path)
        }
    );

    get_file_items: String -> IOFail (Array FileItem);
    get_file_items = |dir_path| (
        let file_names = *list_dir(dir_path);
        file_names.map_m(|name| get_file_item(dir_path, name))
    );

    format_file_item: FileItem -> String;
    format_file_item = |item| (
        let name = item.@file_name;
        let stat = item.@stat;
        let name = if stat.is_dir { name + "/" }
        else if stat.st_mode.bit_and(0o100_U32) == 0o100_U32 { name + "*" }
        else { name };
        name.pad_right(20, ' ') +
        stat.st_size.to_string.pad_left(13, ' ')
    );

    get_attr: FileItem -> ChType;
    get_attr = |item| (
        let stat = item.@stat;
        if stat.is_dir { color_pair(cp_blue).bit_or(bold) };
        if stat.st_mode.bit_and(0o100_U32) == 0o100_U32 { color_pair(cp_green).bit_or(bold) };
        color_pair(cp_white)
    );

    to_list_item: FileItem -> ListItem;
    to_list_item = |file_item| (
        ListItem {
            text: file_item.format_file_item,
            attr: file_item.get_attr
        }
    );
}

type FileListView = unbox struct {
    list_view: ListView,
    dir_path: String,
    file_items: Array FileItem,
};

namespace FileListView {
    make: Window -> String -> IOFail FileListView;
    make = |window, dir_path| (
        let file_items = *get_file_items(dir_path);
        let list_items = file_items.map(to_list_item);
        let list_view = *ListView::make(window, list_items);
        let list_view = list_view.set_title(dir_path);
        pure $ FileListView {
            list_view: list_view,
            dir_path: dir_path,
            file_items: file_items,
        }
    );

    get_selected_item: FileListView -> Option FileItem;
    get_selected_item = |file_list_view| (
        let file_items = file_list_view.@file_items;
        let selected_index = file_list_view.@list_view.@selected_index;
        if 0 <= selected_index && selected_index < file_items.get_size {
            some $ file_items.@(selected_index)
        } else {
            none()
        }
    );

    select_item_by_name: String -> FileListView -> IOFail FileListView;
    select_item_by_name = |name, file_list_view| (
        let file_items = file_list_view.@file_items;
        match file_items.find_by(|item| item.@file_name == name) {
            none() => pure $ file_list_view,
            some(index) => pure $ file_list_view.mod_list_view(set_selected_index(index))
        }
    );

    show: FileListView -> IOFail FileListView;
    show = |file_list_view| (
        file_list_view.act_list_view(ListView::show)
    );

    handle_keys: FileListView -> IOFail Action;
    handle_keys = |file_list_view| (
        let list_view = file_list_view.@list_view;
        let ch = *list_view.@window.getch;
        //let key = *list_view.@window.get_key;
        let key = *keyname(ch);
        eval debug_eprintln(key);
        if key == "q" || key == "Q" || key == "KEY_ESC" {
            pure $ action("app_quit")
        };
        if key == "j" || key == "KEY_DOWN" {
            pure $ action("flv_select_next_item")
        };
        if key == "k" || key == "KEY_UP" {
            pure $ action("flv_select_prev_item")
        };
        if key == "^J" || key == "KEY_ENTER" {
            pure $ action("flv_open_file")
        };
        if key == "^" {
            pure $ action("flv_up_directory")
        };
        pure $ action("")
    );

    select_next_item: FileListView -> IOFail FileListView;
    select_next_item = |file_list_view| (
        file_list_view.act_list_view(ListView::select_next_item)
    );

    select_prev_item: FileListView -> IOFail FileListView;
    select_prev_item = |file_list_view| (
        file_list_view.act_list_view(ListView::select_prev_item)
    );

    open_directory: String -> FileListView -> IOFail FileListView;
    open_directory = |dir_path, file_list_view| (
        let opt = file_list_view.get_selected_item;
        if opt.is_none {
            pure $ file_list_view
        };
        let item = opt.as_some;
        if ! item.@stat.is_dir {
            pure $ file_list_view
        };
        let dir_path = item.@file_path;
        FileListView::make(file_list_view.@list_view.@window, dir_path)
    );

    up_directory: FileListView -> IOFail FileListView;
    up_directory = |file_list_view| (
        let dir_path = file_list_view.@dir_path;
        if dir_path == "/" {
            pure $ file_list_view
        };
        let dir_name = Path::basename(dir_path);
        let parent_path = Path::dirname(dir_path);
        let file_list_view = *FileListView::make(file_list_view.@list_view.@window, parent_path);
        let file_list_view = *file_list_view.select_item_by_name(dir_name);
        pure $ file_list_view
    );
}

type FileView = unbox struct {
    list_view: ListView,
};

namespace FileView {
    make: Window -> IOFail FileView;
    make = |win| (
        pure $ FileView {
            list_view: *ListView::make(win, []),
        }
    );

    open_file: String -> FileView -> IOFail FileView;
    open_file = |file_path, file_view| (
        let contents = *read_file_bytes(Path::parse(file_path).as_some);
        let contents = contents._unsafe_to_string;
        let items = contents.split("\n").to_array.map(|line|
            ListItem {
                text: line,
                attr: normal
            }
        );
        pure $ file_view.mod_list_view(set_items(items) >> set_title(Path::basename(file_path)))
    );

    show: FileView -> IOFail FileView;
    show = |file_view| (
        file_view.act_list_view(ListView::show)
    );

}

type App = unbox struct {
    window: Window,
    file_list_view: FileListView,
    file_view: FileView,
};

namespace App {
    make: Window -> IOFail App;
    make = |win| (
        let (w, h) = *win.get_window_size;
        let flv_w = w * 1 / 3;
        let flv_win = *win.make_sub_window(0, 0, flv_w, h);
        let fv_win = *win.make_sub_window(flv_w, 0, w - flv_w, h);
        let flv = *FileListView::make(flv_win, *realpath("."));
        let flv = flv.mod_list_view(set_has_focus(true));
        let fv = *FileView::make(fv_win);
        pure $ App {
            window: win,
            file_list_view: flv,
            file_view: fv
        }
    );

    show: App -> IOFail App;
    show = |app| (
        app.act_file_list_view(FileListView::show)
        .bind(act_file_view(FileView::show))
    );

    handle_keys: App -> IOFail Action;
    handle_keys = |app| (
        app.@file_list_view.handle_keys
    );

    handle_action: Action -> App -> IOFail App;
    handle_action = |act, app| (
        match act {
            action(name) => (
                if name == "flv_select_next_item" { app.act_file_list_view(FileListView::select_next_item) };
                if name == "flv_select_prev_item" { app.act_file_list_view(FileListView::select_prev_item) };
                if name == "flv_up_directory" { app.act_file_list_view(FileListView::up_directory) };
                if name == "flv_open_file" {
                    match app.@file_list_view.get_selected_item {
                        none() => pure $ app,
                        some(item) => (
                            if item.@stat.is_dir {
                                app.act_file_list_view(FileListView::open_directory(item.@file_path))
                            };
                            if item.@stat.is_file {
                                app.act_file_view(FileView::open_file(item.@file_path))
                            };
                            pure $ app
                        )
                    }
                };
                pure $ app
            ),
        }
    );
}

main: IO ();
main = do {
    Ncurses::run $ |win| (
        init_custom_color_pairs;;
        let app = *App::make(win);
        loop_m(
            app, |app|
            let app = *app.show;
            let action = *app.handle_keys;
            if action.is_action && action.as_action == "app_quit" {
                break_m $ ()
            };
            let app = *app.handle_action(action);
            continue_m $ app
        )
    )
}.try(eprintln);
