// Env comonad. (a.k.a CoReader comonad)
//
// For details, see [blog post: The Reader and Writer Monads and Comonads](https://www.olivierverdier.com/posts/2014/12/31/reader-writer-monad-comonad/).
module Minilib.Comonad.Env;

import Minilib.Comonad.IdentityC;
import Minilib.Trait.Monoid;
import Minilib.Trait.Semigroup;
import Minilib.Trait.Comonad;

// Env comonad wraps a pair of an environment and a value.
// `e` is a type of an environment.
// `w` is a type of an underlyind comonad.
// `a` is a type of a value.
type [w: * -> *] EnvT e w a = unbox struct {
    env: e,
    value: w a
};

type Env e a = EnvT e IdentityC a;

namespace Env {
    // Creates a generic env comonad from an enviroment and a value.
    env_t: [w: Comonad] e -> w a -> EnvT e w a;
    env_t = |e, wa| EnvT { env: e, value: wa };

    // Creates an env comonad from an enviroment and a value.
    env: e -> a -> Env e a;
    env = |e, a| env_t(e, IdentityC::make(a));

    // Gets the envirionment from an env comonad.
    get_env: [w: Comonad] EnvT e w a -> e;
    get_env = |wa| wa.@env;

    // Gets the value from an env comonad.
    get_value: [w: Comonad] EnvT e w a -> a;
    get_value = |wa| wa.@value.extract;

    // Converts a env comonad to a pair of an enviroment and a value.
    to_tuple: [w: Comonad] EnvT e w a -> (e, a);
    to_tuple = |wa| (wa.@env, wa.@value.extract);
}

impl [w: Comonad] EnvT e w: Functor {
    map = |f, wa| env_t(wa.@env, wa.@value.extend(extract >> f));
}

impl [w: Comonad] EnvT e w: Comonad {
    extract = |wa| wa.@value.extract;
    extend = |f, wb| (
        env_t(wb.@env, wb.@value.extend(|_| f(wb)))
    );
}

