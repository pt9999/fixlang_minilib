module Main;

import RBTree;

namespace TreeSet {
    trait TreeSetElem = RBNodeElem;

    type TreeSet a = unbox struct {
        root: RBNode a,
        less_than: a -> a -> Bool
    };

    make: [a: TreeSetElem, a: LessThan] () -> TreeSet a;
    make = |_| (
        make_lt(|x,y| x < y)
    );

    make_lt: [a: TreeSetElem] (a -> a -> Bool) -> TreeSet a;
    make_lt = |less_than| (
        TreeSet {
            root: RBNode::empty(),
            less_than: less_than
        }
    );
    
    add: [a: TreeSetElem] a -> TreeSet a -> TreeSet a;
    add = |x, ts| (
       ts.mod_root(insert_lt(x, ts.@less_than))
    );

    add_all: [a: TreeSetElem] Iterator a -> TreeSet a -> TreeSet a;
    add_all = |iter, ts| (
        iter.fold(
            ts, |ts, a|
            ts.add(a)
        )
    );

    remove: [a: TreeSetElem] a -> TreeSet a -> TreeSet a;
    remove = |x, ts| (
       ts.mod_root(remove_lt(x, ts.@less_than))
    );

    remove_all: [a: TreeSetElem] Iterator a -> TreeSet a -> TreeSet a;
    remove_all = |iter, ts| (
        iter.fold(
            ts, |ts, a|
            ts.remove(a)
        )
    );

    is_empty: [a: TreeSetElem] TreeSet a -> Bool;
    is_empty = |ts| (
        ts.@root.is_empty
    );

    contains: [a: TreeSetElem] a -> TreeSet a -> Bool;
    contains = |x, ts| (
        let (path, node) = ts.lookup(x, ts.@less_than);
        !node.is_empty
    );

    to_iter: [a: TreeSetElem] TreeSet a -> Iterator a;
    to_iter = |ts| (
        ts.@root.to_iter
    );

    from_iter_lt: [a: TreeSetElem] (a -> a -> Bool) -> Iterator a -> TreeSet a;
    from_iter_lt = |less_than, iter| (
        TreeSet {
            root: RBNode::from_iter_lt(less_than, iter),
            less_than: less_than
        }
    );

    from_iter: [a: LessThan, a: TreeSetElem] Iterator a -> TreeSet a;
    from_iter = |iter| (
        TreeSet::from_iter_lt(RBNode::_less_than, iter) 
    );
}

impl [a: TreeSetElem] TreeSet a: ToString {
    to_string = |ts| (
        "TreeSet{" + ts.to_iter.map(to_string).join(",") + "}"
    );
}

main: IO ();
main = (
    let ts = TreeSet::from_iter(Iterator::range(0, 10));
    let _ = *println(ts.to_string);
    let ts = ts.remove_all(Iterator::range(0, 10));
    let _ = *println(ts.to_string);
    pure() 
);
