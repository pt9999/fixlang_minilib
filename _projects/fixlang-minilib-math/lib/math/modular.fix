// This is an arithmetic with a modulus (modulo), for example `2 * 5 = 10 = 3 (mod 7)`.
//
// For details, see [Wikipedia: Modular Arithmetic](https://en.wikipedia.org/wiki/Modular_arithmetic).
module Minilib.Math.Modular;

import Minilib.Common.Assert;
import Minilib.Math.Types;
import Minilib.Math.Euclid;

// A type that performs Modular Arithmetic.
type Modular a = unbox struct {
    value: a,
    modulus: a          // zero if unknown
};

// `Modular::make(v, m)` creates `v modulo m`.
// It is an equivalence class of a quotient ring `Z/mZ`.
make: [a: Euclid] a -> a -> Modular a;
make = |value, modulus| (
    let value = if modulus == zero { value } else { value % modulus };
    Modular { value: value, modulus: modulus }
);

// Synonym for `Modular::make`.
modulo: [a: Euclid] a -> a -> Modular a;
modulo = make;

// Returns modulus of either `x` or `y`.
_get_modulus: [a: Euclid] Modular a -> Modular a -> a;
_get_modulus = |x, y| (
    eval if x.@modulus != y.@modulus &&
            x.@modulus != zero &&
            y.@modulus != zero {
        debug_eprintln("warning: modulus mismatch")
    } else { () };
    if x.@modulus != zero {
        x.@modulus
    };
    y.@modulus
);

// `x.nonneg` changes `@value` with a equivalent non-negative value.
// For example, `modulo(-1, 3)` will be changed to `modulo(2,3)`
// because `-1 == 2 mod 3`.
nonneg: [a: Euclid, a: LessThan] Modular a -> Modular a;
nonneg = |x| (
    if x.@modulus == zero { x };
    let value = x.@value;
    let modulus = x.@modulus;
    let modulus = if modulus < zero { -modulus } else { modulus };
    let value = if value < zero { (value + modulus) % modulus } else { value };
    modulo(value, modulus)
);

impl [a: ToString] Modular a: ToString {
    to_string = |x| x.@value.to_string;         // does not show modulus
}

impl [a: Euclid] Modular a: Eq {
    eq = |x, y| (
        let modulus = _get_modulus(x, y);
        if modulus == zero { x.@value == y.@value };
        (x.@value - y.@value) % modulus == zero
    );
}

impl [a: Euclid] Modular a: Zero {
    zero = Modular::make(zero, zero);       // modulus is unknown
}

impl [a: Euclid] Modular a: One {
    one = Modular::make(one, zero);       // modulus is unknown
}

impl [a: Euclid] Modular a: Neg {
    neg = |x| (
        Modular::make(-x.@value, x.@modulus)
    );
}

impl [a: Euclid] Modular a: Add {
    add = |x, y| (
        if x == zero { y };
        if y == zero { x };

        let modulus = _get_modulus(x, y);
        Modular::make(x.@value + y.@value, modulus)
    );
}

impl [a: Euclid] Modular a: Sub {
    sub = |x, y| (
        if x == zero { -y };
        if y == zero { x };

        let modulus = _get_modulus(x, y);
        Modular::make(x.@value - y.@value, modulus)
    );
}

impl [a: Euclid] Modular a: Mul {
    mul = |x, y| (
        if x == zero { zero };
        if y == zero { zero };

        let modulus = _get_modulus(x, y);
        Modular::make(x.@value * y.@value, modulus)
    );
}

impl [a: Euclid] Modular a: Div {
    div = |x, y| (
        assert_lazy(|_| "Divide by zero", y != zero) $ |_|
        if x == zero { zero };

        let modulus = _get_modulus(x, y);
        if modulus == zero { 
            // TODO correct?
            Modular::make(x.@value / y.@value, modulus)
        };
        let (u, v, d) = extended_euclid(y.@value, modulus);
        // y.@value * u + modulus * v = d
        assert_lazy(|_| "cannot inverse", u % d == zero) $ |_|
        Modular::make(x.@value * (u / d), modulus)
    );
}
