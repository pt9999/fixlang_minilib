module Mylib;

FFI_EXPORT[add_i64, add_i64];
add_i64: I64 -> I64 -> I64;
add_i64 = |a, b| a + b;

FFI_EXPORT[add_string, add_string];
add_string: Ptr -> Ptr -> Ptr;
add_string = |a, b| (
    eval debug_println("add_string: a=" + a.to_string + " b="+b.to_string);
    let a: Box String = FFI::boxed_from_retained_ptr(a);
    let b: Box String = FFI::boxed_from_retained_ptr(b);
    let c: Box String = Box::make $ a.@value + b.@value;
    let c: Ptr = FFI::boxed_to_retained_ptr(c);
    eval debug_println("add_string: c=" + c.to_string);
    c
);

// Pushes back a (wrapped) string to a Fix array.
// `rp_str_array` is a retained pointer to a Fix array.
// Returns a retained pointer to a push-backed Fix array.
push_back_string: Ptr -> Ptr -> Ptr;
push_back_string = |rp_str_array, str| (
    let str: String = _unsafe_from_c_str_ptr(str);
    let str_array: Array String = FFI::boxed_from_retained_ptr(rp_str_array);
    let str_array = str_array.push_back(str);
    FFI::boxed_to_retained_ptr(str_array)
);
FFI_EXPORT[push_back_string, push_back_string];
