// An implementation of simple regular expression.
//
// Currently it only supports patterns below:
// - Character classes: `[xyz]`, `[^xyz]`, `.`, `\d`, `\D`, `\w`, `\W`, `\s`,
//   `\S`, `\t`, `\r`, `\n`, `\v`, `\f`, `[\b]`, x|y
// - Assertions: `^`, `$`
// - Groups: `(x)`
// - Quantifiers: `x*`, `x+`, `x?`, `x{n}`, `x{n,}`, `x{n,m}`
//
// For details, see
// [mdn web docs: Regular expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions).
//
// LIMITATION:
//
// Currently, only single bytes can be specified in character classes. Non-ascii characters
// (U+100 or hier) cannot be specified in character classes.
//
module RegExp;

import Debug;

import StringEx;
import RegExpPattern;
import RegExpNFA;

// A compiled regular expression.
type RegExp = unbox struct {
    flags: String, 
    nfa: NFA
};

namespace RegExp {

    // `RegExp::compile(pattern, flags)` compiles `pattern` into a regular expression.
    compile: String -> String -> Result ErrMsg RegExp;
    compile = |pattern_str, flags| (
        let pattern = *Pattern::parse(pattern_str);
        let pattern = pgroup $ (0, pattern); // since whole pattern is group 0
        // add ".*" in front of pattern
        let pattern = psequence $ [*Pattern::parse(".*"), pattern];
        let nfa = NFA::compile(pattern);
        ok $ RegExp { flags: flags, nfa:nfa }
    );

    // `regexp.match(target)` matches `target` against `regexp`.
    //
    // If the flags do not contain "g", the first match of the regular expression is returned.
    // Group 0 is a substring that matches the entire regular expression.
    // Group 1 and beyond are the results captured in each group. If not captured, the group will be an empty string.
    //
    // If the flags contain "g", all matching results will be returned, but captured groups will not be included.
    //
    // If the match against the regular expression fails, a _NotMatch error is reported.
    match: String -> RegExp -> Result ErrMsg (Array String);
    match = |target, regexp| (
        let executor = regexp.@nfa.execute(target);
        let states: Array NFAState = executor.@accepted_states.to_iter.to_array;
        if regexp.@flags.find_byte('g').is_some {
            let states = collect_all_non_overlapping(states);
            let groups0 = states.to_iter.map(|state| state.@groups.@(0)).to_array;
            if groups0.is_empty {
                err $ "NotMatch"
            };
            ok $ target._convert_groups_to_string(groups0)
        } else {
            let opt = collect_first_match(states);
            if opt.is_none {
                err $ "NotMatch"
            };
            let state = opt.as_some;
            let groups = state.@groups;
            ok $ target._convert_groups_to_string(groups)
        }
    );

    _convert_groups_to_string: Array Group -> String -> Array String;
    _convert_groups_to_string = |groups, target| (
        groups.to_iter.map(|(begin, end)|
            if begin < 0 || end < 0 { "" };
            target.substring(begin, end)
        ).to_array
    );

    // `regexp.match_all(target)` matches `target` against `regexp`.
    // All matching results will be returned including captured groups.
    //
    // If the match against the regular expression fails, an empty array is returned.
    match_all: String -> RegExp -> Array (Array String);
    match_all = |target, regexp| (
        let executor = regexp.@nfa.execute(target);
        let states: Array NFAState = executor.@accepted_states.to_iter.to_array;
        let states = collect_all_non_overlapping(states);
        let groups_array = states.to_iter.map(|state| 
            target._convert_groups_to_string(state.@groups)
        ).to_array;
        groups_array
    );

    replace_all: String -> String -> RegExp -> String;
    replace_all = |target, replacement, regexp| (
        let executor = regexp.@nfa.execute(target);
        let states: Array NFAState = executor.@accepted_states.to_iter.to_array;
        let states = collect_all_non_overlapping(states);
        let rep_frags = Replacement::compile(replacement);
        let output: Array String = Array::empty(0);
        let (output, last) = states.to_iter.fold(
            (output, 0), |(output, last), state|
            let (begin, end) = state.@groups.@(0);
            let output = output.push_back(target.substring(last, begin));
            let output = output.push_back(calc_replacement(target, rep_frags, state));
            (output, end)
        );
        let output = output.push_back(target.substring(last, target.get_size));
        output.to_iter.concat_iter
    );
}
