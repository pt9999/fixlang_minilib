module Main;

import Debug;
import HashMap;

import UnitTest;
import SimpleParser;
import Json;
import JsonEncoder;
import JsonDecoder;

test_eq_1: (Json, Json, Bool) -> TestCase;
test_eq_1 = |(j1, j2, b)| (
    let testname = "test_eq (" + j1.to_string + "," + j2.to_string + "," + b.to_string + ")";
    make_test(testname) $ |_|
    let _ = *(assert_equal("eq", j1 == j2, b));
    pure()
);

test_eq: TestCase;
test_eq = (
    let json1 = [("null", null()), ("true", bool(true)), ("false", bool(false))].to_object;
    let json2 = [("true", bool(true)), ("false", bool(false)), ("null", null())].to_object;
    let json3 = [("true", bool(true)), ("false", bool(true)), ("null", null())].to_object;
    [
        test_eq_1 $ (null(), null(), true),
        test_eq_1 $ (null(), bool(true), false),
        test_eq_1 $ (bool(true), bool(true), true),
        test_eq_1 $ (bool(true), bool(false), false),
        test_eq_1 $ (json1, json2, true),
        test_eq_1 $ (json2, json3, false)
    ]
    .run_tests
);

test_encode_ok: (Json, String) -> TestCase;
test_encode_ok = |(json, expected)| (
    let testname = "test_encode_ok ("+expected+")";
    make_test(testname) $ |_|
    let actual = json.encode;
    //let _ = *(lift $ println (actual));
    let _ = *(assert_equal("encode", expected, actual));
    pure()
);

test_encode: TestCase;
test_encode = (
    let obj = [("null", null()), ("true", bool(true)), ("false", bool(false))].to_object;
    let obj2 = [("num", number(1.2)), ("str", string("abc")), ("obj", obj)].to_object;
    [
        test_encode_ok $ (null(), "null"),
        test_encode_ok $ (bool(true), "true"),
        test_encode_ok $ (bool(false), "false"),
        test_encode_ok $ (number(123.0), "123.000000"),
        test_encode_ok $ (string("abcあいう"), "\"abcあいう\""),
        test_encode_ok $ (string("\"\\/\n\r\t\u0008\u000c"), "\"\\\"\\\\/\\n\\r\\t\\u0008\\u000c\""),
        test_encode_ok $ (string("\u0001\u001f"), "\"\\u0001\\u001f\""),
        test_encode_ok $ (array([number(1.2), string("hoge")]), "[1.200000,\"hoge\"]"),
        test_encode_ok $ (obj, "{\"false\":false,\"null\":null,\"true\":true}"),
        test_encode_ok $ (obj2, "{\"num\":1.200000,\"obj\":{\"false\":false,\"null\":null,\"true\":true},\"str\":\"abc\"}")
    ]
    .run_tests
);

test_parser: TestCase;
test_parser = (
    make_test("test_parser") $ |_|
    let _ = *(assert_true("null", _parse_null.run_parser_str("null012").is_ok));
    let _ = *(assert_true("true", let res = _parse_bool.run_parser_str("true012"); 
            res.is_ok && let (b, s) = res.as_ok; b == true));
    let _ = *(assert_true("false", let res = _parse_bool.run_parser_str("false012");
            res.is_ok && let (b, s) = res.as_ok; b == false));
    let _ = *(assert_true("nonbool", _parse_bool.run_parser_str("null012").is_err));
    pure()
);

test_parse_string_ok: (String, String) -> TestCase;
test_parse_string_ok = |(text, expected)| (
    let testname = "test_parse_string(" + text + "," + expected + ")";
    make_test(testname) $ |_| 
    let (actual, next) = *(from_result $ _parse_string.run_parser_str(text));
    let _ = *(assert_equal("eq", expected, actual));
    pure()
    
);


test_parse_string: TestCase;
test_parse_string = (
    [
        test_parse_string_ok $ ("\"abc\"", "abc"),
        test_parse_string_ok $ ("\"ab\\nc\"", "ab\nc"),
        test_parse_string_ok $ ("\"ab\\\\\\\"\\u0008cd\\u000cef\"", "ab\\\"\u0008cd\u000cef"),
        test_parse_string_ok $ ("\"\\\"\\\\\\/\\n\\r\\t\\b\\f\"", "\"\\/\n\r\t\u0008\u000c"),
        test_parse_string_ok $ ("\"\\\"\\\\\\/\\n\\r\\t\\u0008\\u000c\"", "\"\\/\n\r\t\u0008\u000c")
        
    ]
    .run_tests
);

test_decode_ok: (String, Json) -> TestCase;
test_decode_ok = |(text, expected)| (
    let testname = "test_decode_ok(" + text + "," + expected.to_string + ")";
    make_test(testname) $ |_| 
    let actual = *(from_result $ decode(text));
    let _ = *(assert_equal("eq", expected, actual));
    pure()
);

test_decode_ng: (String, String) -> TestCase;
test_decode_ng = |(text, expected_err)| (
    let testname = "test_decode_bg(" + text + "," + expected_err.to_string + ")";
    make_test(testname) $ |_| 
    let res = decode(text);
    let _ = *(assert_true("the result is not an error", res.is_err));
    let actual_err: ErrMsg = res.as_err;
    let _ = *(assert_true("does not contain expected error message: " + actual_err, 
        actual_err.find(expected_err, 0).is_some));
    pure()
);

test_decode_object: TestCase;
test_decode_object = (
    if (false) {
        make_test("t") $ |_|
        let p = _parse_object.debug("dummy");
        let res = p.run_parser_str(" { ");
        eval debug_eprintln("res="+res.to_string);
        pure()
    };
    [
        test_decode_ok $ (" {} ", [].to_object),
        test_decode_ok $ (" { \"a\": null } ", [("a", null())].to_object),
        test_decode_ok $ (" { \"a\": \"b\", \"c\": true } ", [("a", string("b")), ("c", bool(true))].to_object),
        test_decode_ng $ (" { ", "Missing '}'"),
        test_decode_ng $ (" { \"a\", \"b\" }", "Missing ':'"),
        test_decode_ng $ (" { \"a\": \"b\" \"c\" }", "Missing '}'"),
        test_decode_ok $ (" [ \"a\" , true , [ null ], [ ] ] ", [string("a"), bool(true), [null()].array, [].array].array),
        TestCase::empty        
    ]
    .run_tests
);

main: IO ();
main = (
    [
        test_eq,
        test_encode,
        test_parser,
        test_parse_string,
        test_decode_object,
        TestCase::empty
    ]
    .run_test_driver
);