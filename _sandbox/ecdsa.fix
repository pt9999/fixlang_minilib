// 
// secp256r1ï¼ˆNIST P-256)
// https://doi.org/10.6028/NIST.FIPS.186-5

module Main;

import Minilib.Math.BigInt;
import Minilib.Encoding.Binary;

namespace BigInt {
// 2.3.8 OctetString-to-Integer Conversion
from_bytes: Array U8 -> Result ErrMsg BigInt;
from_bytes = |bytes| (
    let u8_len = bytes.get_size;
    let u32_len = (u8_len + 3) / 4;
    if u32_len == 0 { ok $ zero };
    let bytes = if 4 * u32_len == u8_len { bytes }
    else { Array::fill(4 * u32_len - u8_len, 0_U8).append(bytes) };
    let nat = Array::from_map(u32_len, |i|
        bytes.get_u32_be(4 * i)
    );
    ok $ BigInt::make(1, nat) 
);


// Elliptic Curve Domain Parameters
// E(F(p)): y^2 = x^3 + a*x + b
// cf. [2.1 Properties of Elliptic Curve Domain Parameters over F(p)](https://www.secg.org/sec2-v2.pdf#page=7.31)
type ECParam = unbox struct {
    p: BigInt,      // a prime `p` for F(p)
    a: BigInt,      // coefficient of `x`
    b: BigInt,      // constant
    g: (BigInt, BigInt),    // a base point `G`
    n: BigInt,      // a prime `n` which is order of `G`
    h: BigInt       // the cofactor `h = #E(F(p)) / n`
};

