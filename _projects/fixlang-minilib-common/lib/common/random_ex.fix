// Extension of `Random` module. For example, generating a random integer in range, or a random array.
module Minilib.Common.RandomEx;

import Random;

// `random.generate_U8` generates a random integer of U8.
generate_U8: Random -> (Random, U8);
generate_U8 = generate_U64 >> map(to_U8);

// `random.generate_U16` generates a random integer of U16.
generate_U16: Random -> (Random, U16);
generate_U16 = generate_U64 >> map(to_U16);

// `random.generate_U32` generates a random integer of U32.
generate_U32: Random -> (Random, U32);
generate_U32 = generate_U64 >> map(to_U32);

// `random.generate_I64_range(begin, end)` generates a random integer `r`
// such that `begin <= r && r < end`.
// if `begin >= end`, it panicks.
generate_I64_range: I64 -> I64 -> Random -> (Random, I64);
generate_I64_range = |begin, end, random| (
    if !(begin < end) { undefined("generate_I64_range: begin >= end") };
    let n = (end - begin).to_U64;
    let (random, r) = random.generate_U64;
    let r = r / (U64::maximum / n);
    if r >= n {
        generate_I64_range(begin, end, random)  // try again
    };
    let r = r.to_I64 + begin;
    (random, r)
);

// `random.generate_array(size, f)` generates a random array.
// Each element of the array is generated by `f`.
generate_array: I64 -> (Random -> (Random, a)) -> Random -> (Random, Array a);
generate_array = |size, f, random| (
    let array = Array::empty(size);
    let inner = fix $ |inner, array, i, random| (
        if i >= size {
            (random, array)
        };
        let (random, r) = f(random);
        inner(array.push_back(r), i + 1, random)
    );
    inner(array, 0, random)
);

// Shuffles an array.
shuffle: Array a -> Random -> (Random, Array a);
shuffle = |array, random| (
    loop(
        (random, array, array.get_size - 1), |(random, array, i)|
        if i <= 0 {
            break $ (random, array)
        };
        let (random, j) = random.generate_U64;
        let j = (j % (i + 1).to_U64).to_I64;
        let tmp = array.@(i);
        let array = array.set(i, array.@(j));
        let array = array.set(j, tmp);
        continue $ (random, array, i - 1)
    )
);
