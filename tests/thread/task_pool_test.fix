module Main;

import AsyncTask;
import Debug;

import Minilib.IO.Channel;
import Minilib.IO.FileSystem;
import Minilib.Monad.FunctorM;
import Minilib.Thread.Future;
import Minilib.Thread.TaskPool;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_task_count: TestCase;
test_task_count = (
    make_test("test_task_count") $ |_|
    let pool = *TaskPool::make(4).lift;
    let _ = *assert_equal("task_count", 4, pool.@tasks.get_size);
    let pool = *pool.shutdown.lift;
    let _ = *assert_equal("after shutdown", 0, pool.@tasks.get_size);
    pure()
);

test_simple: TestCase;
test_simple = (
    make_test("test_simple") $ |_|
    let pool = *TaskPool::make(4).lift;
    let futures = *Iterator::range(0, 10).map_m(|i|
        Future::make(pool, do {
            pure $ i * 2
        })
    );
    let total = *futures.fold_m(
        0, |sum, future| pure $ sum + *future.get
    );
    let _ = *assert_equal("total", 45 * 2, total);
    pure()
);

test_lock: TestCase;
test_lock = (
    make_test("test_lock") $ |_|
    let var_count1 = *Var::make(0).lift;
    let var_count2 = *Var::make(0).lift;
    let var_lock1 = *Var::make(false).lift;
    let var_lock2 = *Var::make(false).lift;
    let pool = *TaskPool::make(4).lift;
    let futures = *Iterator::range(0, 12).map_m(|i|
        Future::make(pool, do {
            let _ = *var_count1.mod(|n| n + 1);
            let _ = *var_lock1.wait(|b| b);
            let _ = *var_count2.mod(|n| n + 1);
            let _ = *var_lock2.wait(|b| b);
            pure $ i
        })
    );
    let receiver = do {
        let _ = *var_count2.Var::set(0);
        let _ = *var_count1.wait(|n| n == 4);
        let _ = *var_lock2.Var::set(false);
        let _ = *var_lock1.Var::set(true);
        let _ = *var_count1.Var::set(0);
        let _ = *var_count2.wait(|n| n == 4);
        let _ = *var_lock1.Var::set(false);
        let _ = *var_lock2.Var::set(true);
        pure()
    };
    let _ = *receiver.lift;
    let _ = *receiver.lift;
    let _ = *receiver.lift;
    let total = *futures.fold_m(
        0, |sum, future| pure $ sum + *future.get
    );
    let _ = *assert_equal("total", 45 + 10 + 11, total);
    pure()
);

test_is_shutdown: TestCase;
test_is_shutdown = (
    make_test("test_is_shutdown") $ |_|
    let pool = *TaskPool::make(2).lift;
    let _ = *assert_equal("before shutdown", false, *pool.is_shutdown.lift);
    let pool = *pool.shutdown.lift;
    let _ = *assert_equal("after shutdown", true, *pool.is_shutdown.lift);
    pure()
);

test_shutdown_future_make: TestCase;
test_shutdown_future_make = (
    make_test("test_shutdown_future_make") $ |_|
    let pool = *TaskPool::make(2).lift;
    let pool = *pool.shutdown.lift;
    let res = *Future::make(pool, pure(1)).to_result.lift;
    //let _ = *assert_equal("res", err $ Channel::closed_error, res);
    let _ = *assert_true("res.is_err", res.is_err);
    let _ = *assert_equal("res", "Closed", res.as_err);
    pure()
);


// TODO: shutdown test

main: IO ();
main = (
    [
        test_task_count,
        test_simple,
        test_lock,
        test_is_shutdown,
        test_shutdown_future_make,
        TestCase::empty
    ].run_test_driver
);
