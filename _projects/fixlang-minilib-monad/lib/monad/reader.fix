// Reader monad.
//
// For details, see [blog post: The Reader and Writer Monads and Comonads](https://www.olivierverdier.com/posts/2014/12/31/reader-writer-monad-comonad/).
module Minilib.Monad.Reader;

import Minilib.Monad.Identity;
import Minilib.Monad.Trans;
import Minilib.Monad.Error;
import Minilib.Monad.IO;

// A trait for the interface of generic reader monads.
trait MonadReader = Monad + MonadReaderIF;

// A trait for generic reader monads that manages the internal environment.
trait [rm: * -> *] rm: MonadReaderIF {
    // The type of the internal environment.
    type EnvType rm;
    // A monad that returns the internal environment as a value.
    ask: rm (EnvType rm);
    // `rm.local(f)` creates a reader monad with an environment modified by `f`.
    local: (EnvType rm -> EnvType rm) -> rm a -> rm a;
}

//------------------------------------------------------------------------

// Reader monad wraps a function from an environment to a value.
// `e` is a type of an environment.
// `m` is a type of an underlyind monad.
// `a` is a type of a value.
type [m: * -> *] ReaderT e m a = unbox struct {
    data: e -> m a
};

type Reader e a = ReaderT e Identity a;

// Creates a generic reader monad from a function.
reader_t: [m: Monad] (e -> m a) -> ReaderT e m a;
reader_t = |f| ReaderT { data: f };

// Creates a reader monad from a function.
reader: (e -> a) -> Reader e a;
reader = |f| reader_t $ |e| Identity::make $ f(e);

// Runs a generic reader monad with the supplied environment.
run_reader_t: [m: Monad] e -> ReaderT e m a -> m a;
run_reader_t = |e, rma| (rma.@data)(e);

// Runs a reader monad with the supplied environment.
run_reader: e -> Reader e a -> a;
run_reader = |e, rma| rma.run_reader_t(e).get;

// A reader monad that returns the environment as a value.
read: [m: Monad] ReaderT e m e;
read = reader_t $ |e| pure $ e;

// Maps an underlying monad and a value using the specified function.
map_reader_t: [m: Monad, n: Monad] (m a -> n b) -> ReaderT e m a -> ReaderT e n b;
map_reader_t = |f, rma| reader_t $ |e| f(rma.run_reader_t(e));

// Creates a reader monad with the modified environment.
with_reader_t: [m: Monad] (e1 -> e) -> ReaderT e m a -> ReaderT e1 m a;
with_reader_t = |f, rma| reader_t $ |e1| rma.run_reader_t(f(e1));

// Lifts an underlying monad to a reader monad.
lift_reader: [m: Monad] m a -> ReaderT e m a;
lift_reader = |ma| reader_t $ |_| ma;

impl [m: Monad] ReaderT e m: Functor {
    map = |f, rma| reader_t $ |e| (
        let a = *rma.run_reader_t(e);
        pure $ f(a)
    );
}

impl [m: Monad] ReaderT e m: Monad {
    pure = |a| reader_t $ |_| pure $ a;
    bind = |f, rma| reader_t $ |e| (
        let a = *rma.run_reader_t(e);
        f(a).run_reader_t(e)
    );
}

impl [m: Monad] ReaderT e m: MonadReaderIF {
    type EnvType (ReaderT e m) = e;
    ask = reader_t $ |e| pure $ e;
    local = |f, rma| reader_t $ f >> rma.@data;
}

impl ReaderT e: MonadTrans {
    lift_t = lift_reader;
}

impl [m: MonadError] ReaderT e m: MonadErrorIF {
    error = lift_t << error;
    catch = |handler, rma| (
        reader_t $ |e|
        rma.run_reader_t(e).catch(
            handler >> run_reader_t(e)
        )
    );
}

impl [m: MonadIO] ReaderT e m: MonadIOIF {
    lift_io = lift_t << lift_io;
}

impl [m: MonadIOFail] ReaderT e m: MonadIOFailIF {
    lift_iofail = lift_t << lift_iofail;
}
