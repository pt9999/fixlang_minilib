module Main;

import Minilib.Crypto.Cipher.CipherApi;
import Minilib.Crypto.Cipher.CipherApiDefault;
//import Minilib.Crypto.Cipher.CipherApiMock;
import Minilib.Crypto.Cert.CertApi;
import Minilib.Crypto.Cert.CertApiDefault;
//import Minilib.Crypto.Cert.CertApiMock;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;
import Minilib.Testing.UnitTest;


test_load_ca_certificates: TestCase;
test_load_ca_certificates = (
    make_test("test_load_ca_certificates") $ |_|
    let cipher_api = *make_cipher_api.from_result;
    let cert_api = *make_cert_api(cipher_api).from_result;
    let cert_api = *@load_ca_certificates(cert_api);
    pure()
);

test_get_now: TestCase;
test_get_now = (
    make_test("test_get_now") $ |_|
    let cipher_api = *make_cipher_api.from_result;
    let cert_api = *make_cert_api(cipher_api).from_result;
    let time = *@get_now(cert_api).lift;
    assert_equal("eq", true, time != "")
);

// TODO: add tests

main: IO ();
main = (
    [
        test_load_ca_certificates,
        test_get_now,
    ]
    .run_test_driver
);
