module Main;

import Minilib.Monad.State;
import StringEx;

type StringWriter = State String ();

namespace StringWriter {
    write: [a: ToString] a -> StringWriter;
    write = |a| (
        mod_state(|state| state + a.to_string)
    );

    collect_string: StringWriter -> String;
    collect_string = |w| w.exec_state("");
}

namespace Tuple2 {
    concat_str: [a: ToString, b: ToString] (a,b) -> String;
    concat_str = |(a,b)| a.to_string + b.to_string;
}

namespace Tuple3 {
    concat_str: [a: ToString, b: ToString, c:ToString] (a,b,c) -> String;
    concat_str = |(a,b,c)| a.to_string + b.to_string + c.to_string;
}

namespace Tuple4 {
    concat_str: [a: ToString, b: ToString, c:ToString, d:ToString] (a,b,c,d) -> String;
    concat_str = |(a,b,c,d)| a.to_string + b.to_string + c.to_string + d.to_string;
}


test_string_writer: IO ();
test_string_writer = (
    let text = collect_string $ do {
        let _ = *write("hello ");
        let _ = *write("world");
        let _ = *write(((" ", 1).concat_str, " ", 2.2, "\n").concat_str);
        pure()
    };
    println (text)
);

main: IO ();
main = test_string_writer;

