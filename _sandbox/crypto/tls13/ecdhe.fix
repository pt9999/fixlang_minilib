// Elliptic-Curve Diffieâ€“Hellman (Ephemeral) exchange for TLS 1.3
//
// RFC8446 - The Transport Layer Security (TLS) Protocol Version 1.3
// https://tex2e.github.io/rfc-translater/html/rfc8446.html
module Minilib.Crypto.Tls13.ECDHE;

import Character;
import Debug;

import Minilib.Crypto.Tls13.ECDSA;
import Minilib.Monad.Random;
import Minilib.Crypto.Tls13.Extensions;
import Minilib.Crypto.Tls13.KeyShare;
import Minilib.Crypto.Tls13.Types;
import Minilib.Monad.Error;

// 4.2.8.2. ECDHE Parameters
/*
type UncompressedPointRepresentation = unbox struct {
    legacy_form: U8, // uint8 legacy_form = 4;
    x: Array U8,    // opaque X[coordinate_length];
    y: Array U8,    // opaque Y[coordinate_length];
}
*/
type ECDHE = unbox struct {
    ec: ECParam,
    local_key_pair: ECKeyPair,
};

impl ECDHE: ToString {
    to_string = |ecdhe| (
        "ECDHE {" +
        " ec=" + ecdhe.@ec.@id.to_string +
        " local_key_pair=" + ecdhe.@local_key_pair.to_string +
        " }"
    );
}

namespace ECDHE {
    make: [m: MonadRandom] ECParam -> m ECDHE;
    make = |ec| (
        let local_key_pair = *generate_keypair(ec);
        pure $ ECDHE {
            ec: ec,
            local_key_pair: local_key_pair
        }
    );

    get_named_group: ECDHE -> NamedGroup;
    get_named_group = |ecdhe| (
        let id = ecdhe.@ec.@id;
        if id == "secp256r1" { NamedGroup::secp256r1 };
        eval assert(|_| "unsupported named group: " + id, false);
        0_U16
    );

    get_pub_key: ECDHE -> UncompressedPointRepresentation;
    get_pub_key = |ecdhe| (
        ecdhe.@local_key_pair.@q.to_bytes_uncompressed
    );

    to_key_share_entry: ECDHE -> KeyShareEntry;
    to_key_share_entry = |ecdhe| (
        KeyShareEntry {
            group: ecdhe.get_named_group,
            key_exchange: ecdhe.get_pub_key,
        }
    );

    accept_server_share: KeyShareEntry -> ECDHE -> Result ErrMsg SharedSecret;
    accept_server_share = |server_share, ecdhe| (
        if server_share.@group != ecdhe.get_named_group {
            err $ "named group unmatch"
        };
        ecdhe.accept_remote_pub_key(server_share.@key_exchange)
    );

    accept_remote_pub_key: UncompressedPointRepresentation -> ECDHE -> Result ErrMsg SharedSecret;
    accept_remote_pub_key = |remote_pub_key, ecdhe| (
        let ec = ecdhe.@ec;
        let local_key_pair = ecdhe.@local_key_pair;
        let remote_pub_key: ECPoint = *ECPoint::from_bytes_ec(ec, remote_pub_key);
        eval *remote_pub_key.validate_pubkey;
        let dQ = remote_pub_key.mul_by_ECInt(local_key_pair.@d);
        if dQ.@xy.is_none {
            err $ "cannot calculate shared secret"
        };
        let dQx: ECField = dQ.@xy.as_some.@0;
        let shared_secret = dQx.to_bytes;
        pure $ shared_secret
    );
}