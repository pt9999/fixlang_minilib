module Minilib.Trait.TraversableA;

import Minilib.Trait.Applicative;

// A trait for types which can traverse all elements with `Applicative`.
// NOTE: This trait is similar to `Traversable`, but this is for `Applicative`.
trait [t: * -> *] t: TraversableA {
    sequence_a: [f: Applicative] t (f a) -> f (t a);
}

// `ta.traverse_a(f)` maps each element with `f`, then performs all elements sequentially and collects the results.
traverse_a: [f: Applicative, t: TraversableA, t: Functor] (a -> f b) -> t a -> f (t b);
traverse_a = |f, ta| ta.map(f).sequence_a;


impl Array: TraversableA {
    sequence_a = |array| (
        array.to_iter.fold(
            pure_a(Array::empty(array.get_size)), |a, output|
            lift_a2(push_back, a, output)
        )
    );
}

impl DynIterator: TraversableA {
    sequence_a = |iter| (
        let output = iter.fold(
            pure_a([]), |a, output|
            lift_a2(push_back, a, output)
        );
        output.lift_a(Array::to_iter >> to_dyn)
    );
}