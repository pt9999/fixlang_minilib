
module Main;

import Debug;
import Random;

import Minilib.Crypto.AES;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;
import Minilib.Testing.UnitTest;

// Test Cases for AES
// cf. [NIST FIPS 197](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197-upd1.pdf)

byte_array_from_string_hex: String -> Array U8;
byte_array_from_string_hex = |str| (
    str.split(" ").map(from_string_hex >> as_ok).to_array
);

// Appendix A — Key Expansion Examples
test_key_expansion_128: TestCase;
test_key_expansion_128 = (
    make_test("test_key_expansion_128") $ |_|
    let key = "2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c";
    let key = key.byte_array_from_string_hex;
    let aes = AES::_empty(128);
    let w = aes._key_expansion(key);
    /*
    let _ = *Iterator::range(0, 4 * (aes._get_number_of_rounds + 1)).fold_m(
        (), |_, i|
        println((i, w.@(i).to_string_hex).format("w[{}] = {}")).lift
    );
    */
    let _ = *assert_equal("w[4]", 0xa0fafe17_U32, w.@(4));
    let _ = *assert_equal("w[43]", 0xb6630ca6_U32, w.@(43));
    pure()
);

// Appendix B — Cipher Example
test_encrypt_decrypt_block: TestCase;
test_encrypt_decrypt_block = (
    make_test("test_encrypt_decrypt_block") $ |_|
    let input = "32 43 f6 a8 88 5a 30 8d 31 31 98 a2 e0 37 07 34";
    let key = "2b 7e 15 16 28 ae d2 a6 ab f7 15 88 09 cf 4f 3c";
    let input = input.byte_array_from_string_hex;
    let key = key.byte_array_from_string_hex;
    let aes = AES::make(key);
    let output = aes.encrypt_block(input);
    //let _ = *println(output.to_string_hex).lift;
    let output_expect = "3925841d02dc09fbdc118597196a0b32";
    let _ = *assert_equal("output", output_expect, output.to_string_hex);
    let input2 = aes.decrypt_block(output);
    //let _ = *println(input2.to_string_hex).lift;
    assert_equal("decrypt", input, input2)
);

main: IO ();
main = (
    [
        test_key_expansion_128,
        test_encrypt_decrypt_block,
        TestCase::empty
    ]
    .run_test_driver
);
