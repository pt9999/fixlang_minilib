module Main;

import Math;

import Minilib.Math.Complex;
import Sandbox.Image;
import Sandbox.Png;

loop_max: I64;
loop_max = 20;

mandelbrot: F64 -> F64 -> I64;
mandelbrot = |re, im| (
    let c = complex(re, im);
    let z = complex(0.0, 0.0);
    loop(
        (z, 0), |(z, i)|
        let z = z * z + c;
        let a = z.abs2;
        if a > 4.0 {
            break $ i
        };
        if i >= loop_max {
            break $ -1
        };
        continue $ (z, i + 1)
    )
);

palette: I64 -> (U8, U8, U8);
palette = |i| (
    if i == -1 { (0_U8, 0_U8, 0_U8) };
    let c = i.to_F64 / loop_max.to_F64 * 512.0;
    let r = max(0.0, min(255.0, c - 256.0)).to_U8;
    let g = max(0.0, min(255.0, c - 128.0)).to_U8;
    let b = max(0.0, min(255.0, c)).to_U8;
    (r, g, b)
);

test_image: IO ();
test_image = (
    do {
        let width = 512;
        let height = 512;
        let xrange = (-2.0, 0.5);
        let yrange = (-1.25, 1.25);
        let image = Image::make(width, height, "RGB");
        let image = Iterator::range(0, height).fold(
            image, |image, y|
            let im = y.to_F64 / height.to_F64 * (yrange.@1 - yrange.@0) + yrange.@0;
            Iterator::range(0, width).fold (
                image, |image, x|
                let re = x.to_F64 / width.to_F64  * (xrange.@1 - xrange.@0) + xrange.@0;
                let color = mandelbrot(re, im).palette;
                let index = image.calc_index(x, y, 0);
                image.set_rgb(index, color)
            )
        );
        let filepath = "tmp.mandelbrot.png";
        let _ = *image.write_png_file(filepath);
        let _ = *println("Wrote " + filepath).lift;
        pure()
    }.try(eprintln)
);

main: IO ();
main = test_image;
