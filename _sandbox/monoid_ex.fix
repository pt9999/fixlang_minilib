module Sandbox.MonoidEx;

import Minilib.Trait.Monoid;
import Minilib.Math.Types;

//-------------------------------------------------------
//  Sum
//-------------------------------------------------------

namespace Sum {
    type Sum a = unbox struct {
        data: a
    };

    to_sum: a -> Sum a;
    to_sum = |a| Sum { data: a };

    get_sum: Sum a -> a;
    get_sum = @data;
}

impl [a: Additive] Sum a: Monoid {
    mempty = zero.to_sum;
    mappend = |b, a| (a.get_sum + b.get_sum).to_sum;
}

impl Sum: Functor {
    map = |f, ma| f(ma.get_sum).to_sum;
}

//-------------------------------------------------------
//  Product
//-------------------------------------------------------

namespace Product {
    type Product a = unbox struct {
        data: a
    };

    to_product: a -> Product a;
    to_product = |a| Product { data: a };

    get_product: Product a -> a;
    get_product = @data;
}

impl [a: Mul, a: One] Product a: Monoid {
    mempty = one.to_product;
    mappend = |b, a| (a.get_product * b.get_product).to_product;
}

impl Product: Functor {
    map = |f, ma| f(ma.get_product).to_product;
}

//-------------------------------------------------------
// First
//-------------------------------------------------------

namespace First {
    type First a = unbox struct {
        data: Option a
    };

    to_first: Option a -> First a;
    to_first = |opt| First { data: opt };

    get_first: First a -> Option a;
    get_first = @data;
}

impl First a: Monoid {
    mempty = to_first(none());
    mappend = |b, a| (
        if a.@data.is_some { a } else { b }
    );
}

//-------------------------------------------------------
// Last
//-------------------------------------------------------

namespace Last {
    type Last a = unbox struct {
        data: Option a
    };

    to_last: Option a -> Last a;
    to_last = |opt| Last { data: opt };

    get_last: Last a -> Option a;
    get_last = @data;
}

impl Last a: Monoid {
    mempty = to_last(none());
    mappend = |b, a| (
        if b.@data.is_some { b } else { a }
    );
}


//-------------------------------------------------------
// Endo
//-------------------------------------------------------

namespace Endo {
    // Endomorphism.
    // `mappend` is same as `<<`.
    type Endo a = unbox struct {
        f: a -> a
    };

    endo: (a -> a) -> Endo a;
    endo = |f| Endo { f: f };

    appEndo: a -> Endo a -> a;
    appEndo = |x, e| (e.@f)(x);

}

impl Endo a: Monoid {
    mempty = Endo { f: |x| x };
    mappend = |b, a| Endo { f: a.@f << b.@f };
}

