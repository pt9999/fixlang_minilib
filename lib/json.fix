module Json;

import Debug;
import HashMap;

type Json = box union {
    null: (),
    bool: Bool,
    number: F64,
    string: String,
    object: HashMap String Json,
    array:  Array Json
};

to_object: Array (String, Json) -> Json;
to_object = |arr| (
    let hashmap = arr.to_iter.fold(
        HashMap::empty(arr.get_size),
        |h, (k, v)| h.insert(k, v)
    );
    object $ hashmap
);

impl Json: Eq {
    eq = |j1, j2| (
        eval debug_eprintln("eq");
        if j1.is_null && j2.is_null {
            true
        };
        if j1.is_bool && j2.is_bool {
            j1.as_bool == j2.as_bool
        };
        if j1.is_number && j2.is_number {
            j1.as_number == j2.as_number
        };
        if j1.is_string && j2.is_string {
            j1.as_string == j2.as_string
        };
        if j1.is_object && j2.is_object {
            let a1 = j1.as_object.to_iter.to_array._sort_by_key;
            let a2 = j2.as_object.to_iter.to_array._sort_by_key;
            a1 == a2
        };
        if j1.is_array && j2.is_array {
            j1.as_array == j2.as_array
        };
        false
    );
}

_sort_by_key: Array (String, a) -> Array (String, a);
_sort_by_key = |array| (
    array.sort_by(
        |((k1,v1), (k2,v2))| _string_less_than $ (k1, k2))
);

_string_less_than: (String, String) -> Bool;
_string_less_than = |(str1, str2)| (
    let a1 = str1.get_bytes;
    let a2 = str2.get_bytes;
    let n1 = a1.get_size;
    let n2 = a2.get_size;
    loop(0, |i|
        if i >= n1 && i >= n2 {
            break $ false
        };
        if i >= n1 {
            break $ true
        };
        if i >= n2 {
            break $ false
        };
        let c1 = a1.@(i);
        let c2 = a2.@(i);
        if c1 < c2 {
            break $ true
        };
        if c1 > c2 {
            break $ false
        };
        continue $ i + 1
    )
);

_DOUBLEQUOTE: U8;
_DOUBLEQUOTE = 34_U8; // '\"'

_BACKSLASH: U8;
_BACKSLASH = 92_U8; // '\\'

_ASCII_LOWER_U: U8;
_ASCII_LOWER_U = 117_U8; // 'u'

_escape_from: Array U8;
_escape_from = "\"\\\u0008\u000c\n\r\t".get_bytes.pop_back;

_escape_to: Array U8;
_escape_to = "\"\\bfnrt".get_bytes.pop_back;

_escape_table: Array U8;
_escape_table = (
    Iterator::count_up(0).take(256)
    .map(|i| 
        _escape_from.find_by(|x| x == i.to_U8)
        .map_or(0_U8,
            |pos| _escape_to.@(pos)
        )
    )
    .to_array
);

_unescape_table: Array U8;
_unescape_table = (
    Iterator::count_up(0).take(256)
    .map(|i| 
        _escape_to.find_by(|x| x == i.to_U8)
        .map_or(0_U8,
            |pos| _escape_from.@(pos)
        )
    )
    .to_array
);

_hex_table: Array U8;
_hex_table = (
    Iterator::count_up(0).take(16)
    .map(|i|
        if i < 10 { /* '0' = */ 48_U8 + i.to_U8 } 
        else { /* 'a' = */ 97_U8 + (i - 10).to_U8 }
    )
    .to_array
);
