module Main;

import AsyncTask;
import Random;

import Minilib.Crypto.Cipher.Ec.EcApi;
import Minilib.Crypto.Cipher.Ec.EcApiDefault;

import Minilib.Monad.Random;
import Minilib.Monad.State;
import Minilib.Monad.Trans;
import Minilib.Monad.Error;
import Minilib.Monad.IO;
import Minilib.Text.Hex;
import Minilib.Testing.UnitTest;

/*
ecdsa_secp256r1_sha256
_check_certificate_verify_ecdsa
content=20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020544c5320312e332c20736572766572204365727469666963617465566572696679002c880d54f48aa14ccae9a61266daa13eb5e02482aa9e2328ccc348b2ffbdb9e5
signature=304402201914a5cd7522f5c16ae71f8bfd69a9643ca6e1fd19a18a439006ec75a99597ff022047f171f24d694c12c80516efd157831e6d76af5e2f80b3b1d8e708f8f2954e38
ec_point=048df968a8d14aa3a9cc0b63d8030a5c680237003027f35a0e70e30ce79376b427b3521a66364ac79aaf8eff2f60ca70c59e62b38b5a163bef576a41017def38ef
*/

test_ecdsa_verify: TestCase;
test_ecdsa_verify = (
    make_test("test_ecdsa_verify") $ |_|
    let curve_name = "secp256r1";
    let hash_name = "sha256";
    let message = "20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020544c5320312e332c20736572766572204365727469666963617465566572696679002c880d54f48aa14ccae9a61266daa13eb5e02482aa9e2328ccc348b2ffbdb9e5";
    let signature = "304402201914a5cd7522f5c16ae71f8bfd69a9643ca6e1fd19a18a439006ec75a99597ff022047f171f24d694c12c80516efd157831e6d76af5e2f80b3b1d8e708f8f2954e38";
    let public_key = "048df968a8d14aa3a9cc0b63d8030a5c680237003027f35a0e70e30ce79376b427b3521a66364ac79aaf8eff2f60ca70c59e62b38b5a163bef576a41017def38ef";
    let message: Array U8 = *message.from_string_hex.from_result;
    let signature: Array U8 = *signature.from_string_hex.from_result;
    let public_key: Array U8 = *public_key.from_string_hex.from_result;

    let var_random = *Var::make(Random::init_by_seed(123_U64)).lift_io;
    let sm: StateT (Var Random) IOFail () = do {
        let api = *EcApiDefault::make;
        pure()
    };
    sm.eval_state_t(var_random)
);

main: IO ();
main = (
    [
        test_ecdsa_verify,
    ]
    .run_test_driver
);
