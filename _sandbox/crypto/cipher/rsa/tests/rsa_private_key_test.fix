module Main;

import Minilib.Crypto.Cipher.Rsa.RSAPrivateKey;
import Minilib.Crypto.Cert.Asn1;
import Minilib.Crypto.Cert.Asn1Der;
import Minilib.Crypto.Cert.Asn1DerEncode;
import Minilib.Crypto.Cert.Pem;
import Minilib.Text.Hex;
import Minilib.Testing.UnitTest;

// generated by `openssl genrsa -out test1.key 1024` command.
private_key_pem_1: String;
private_key_pem_1 = "
-----BEGIN PRIVATE KEY-----
MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAOs2sspSMNH0vv1h
2EvBZYWe43ZkX2yIWc53ffkdD9OEVApNwfM4pobCZqjKqdrD+GxdklIHSjjgEAlU
VKsv94wRg1oEvjkT8JsJS0e6Pp4U+WnLsvzhriql0F3leUvMSHWMzya/GuY0uLGy
V1Cq8TiPv8ScDP17bSt+rFhyE0zzAgMBAAECgYEA5iVeKYLkS/s7CXg8iFtSN70w
+X3atLpxjQj0VNSv0JmxFWfh91cd8cuzYULzkZ+gqn+gFO0XHbF3X3mJYvsLLb0R
WAtnz+2jJi4DPZ4Z0Nsml3k9qxiiQjuBR1DvLuIcSWX2ytpfkCUeWAqBADMN4qWX
QxnOYHRxDb+B8HwVU7ECQQD4pOt+ZPy9oij9TvSvIVFejxHTckpHvKAgK2NkwRbV
kCZfGWH2od7nxLsrQ4dxQ8Z+9U+eL7as4IzAIyeba/nZAkEA8iwQTD8jKBGEaQnI
mLEz9QDc93YyIYybVYtacUy3sftFwICoOu56ICeOvjKNFy0zhJGvY6ro8FtzjObv
irwRqwJAAXP9SFTQwU70TF6swWVBc3sEkKbHVln82ZNHVmxmdMMN5lpgny9c/R/C
NEOFxBywSUenunXu7F23lNvfvGHKKQJAWcz5JizrbnpAbWrRVb2wFJQDXEgaAtLO
7wPDv+vA2mDg1qdeuquf4biJeAHqy8NZLTmQnhbMVgSzbnZcMUfYDQJBALnqIGza
WpVxhpN+zT311LLjS1sxgWsGyPIHA3coEe3zK/Ob66TnFyD6HHo55MVWiwfFiubl
xLHS9HBJWeO9/J8=
-----END PRIVATE KEY-----
";

test_read_rsa_private_key_from_pem_string: TestCase;
test_read_rsa_private_key_from_pem_string = (
    make_test("test_read_rsa_private_key_from_pem_string") $ |_|
    // Decode a RSA private key from PEM string.
    let private_key = *read_rsa_private_key_from_pem_string(private_key_pem_1).from_result;
    // Encode a RSA private key back to DER-encoded bytes.
    let private_key_bytes = *encode_der_to_bytes(private_key).from_result;
    //let triplets1 = *dump_der_triplets(private_key_bytes).from_result;
    //eval *write_file_string(Path::parse("tmp.private_key_1.txt").as_some, triplets1);

    // Extract DER-encoded bytes of the RSA private key from original PEM string.
    let private_key_info: PrivateKeyInfo = *read_private_key_info_from_pem_string(private_key_pem_1).from_result;
    let private_key_bytes2 = private_key_info.@privateKey.to_bytes;
    //let triplets2 = *dump_der_triplets(private_key_bytes2).from_result;
    //eval *write_file_string(Path::parse("tmp.private_key_2.txt").as_some, triplets2);

    eval *assert_equal("eq", private_key_bytes2, private_key_bytes);
    pure()
);

main: IO ();
main = (
    [
        test_read_rsa_private_key_from_pem_string,
    ]
    .run_test_driver
);