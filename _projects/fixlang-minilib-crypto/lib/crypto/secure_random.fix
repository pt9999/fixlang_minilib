// Secure random number generator.
//
// Currently only Linux is supported, because it uses `/dev/urandom` as a secure random source.
module Minilib.Crypto.SecureRandom;

import Minilib.Common.Common;

type SecureRandom = unbox struct {
    data: Destructor IOHandle
};

namespace SecureRandom {
    // Creates a SecureRandom instance.
    make: IOFail SecureRandom;
    make = (
        let handle = *open_file(Path::parse("/dev/urandom").as_some, "r");
        pure $ SecureRandom {
            data: Destructor::make(handle, _unsafe_close)
        }
    );

    // Generates a random byte array with specified size.
    generate_bytes: I64 -> SecureRandom -> IOFail (SecureRandom, Array U8);
    generate_bytes = |size, secure_random| (
        assert_lazy(|_| "invalid size", size >= 0) $ |_|
        let bytes = *secure_random.@data.borrow(|handle| read_n_bytes(handle, size));
        pure $ (secure_random, bytes)
    );
}

