module EuclidTest;

import Math;

import Minilib.Math.Euclid;
import Minilib.Math.BigInt;
import Minilib.Testing.UnitTest;
import Minilib.Text.StringEx;

test_gcd: TestCase;
test_gcd = (
    make_table_test("test_gcd",
        [
            (30, 24, 6),
            (24, 34, 2),
            (-24, 34, 2),
            (24, -34, -2),      // sign may or may not be preserved
            (-24, -34, -2),     // sign may or may not be preserved
            (0, 6, 6)
        ],
        |(a, b, expected)|
        let a = BigInt::from_I64(a);
        let b = BigInt::from_I64(b);
        let expected = BigInt::from_I64(expected);
        assert_equal("gcd", expected, Euclid::gcd(a, b))
    )
);

test_extended_euclid: TestCase;
test_extended_euclid = (
    make_table_test("test_extended_euclid",
        [
            (5, 7),
            (10, 15),
            (-24, 31),
            (-24, -31),
            (0, 6)
        ],
        |(a, b)|
        let a = BigInt::from_I64(a);
        let b = BigInt::from_I64(b);
        let (x, y, d) = extended_euclid(a, b);
        let _ = *assert_equal("d", d, a * x + b * y);
        assert_equal("gcd", d, Euclid::gcd(a, b))
    )
);

main: IO ();
main = (
    [
        test_gcd,
        test_extended_euclid,
        TestCase::empty
    ]
    .run_test_driver
);

