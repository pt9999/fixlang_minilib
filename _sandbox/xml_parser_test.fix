module Main;

import Sandbox.Xml;
import Sandbox.XmlParser;
import Minilib.Testing.UnitTest;
import Minilib.Text.SimpleParser;
import Minilib.Text.StringEx;

// trim err string like "Line 0, Column 13: XXXX"
trim_err: Result ErrMsg a -> Result ErrMsg a;
trim_err = |res| (
    if res.is_ok { res };
    let e = res.as_err;
    let (loc, e) = e.split_first(": ");
    err(e)
);

test_parse_comment: TestCase;
test_parse_comment = (
    make_table_test("test_parse_comment",
        [
            ("<!--abc-->", ok("abc")),
            ("<!---a-a-aa-a-->", ok("-a-a-aa-a")),
            ("<!---a-a-aa-a--->", err("Missing end of comment"))
        ],
        |(input, expect)|
        let res = _parse_comment.run_parser_str(input);
        let res = res.map(|(node,_)| 
            if !node.is_comment_node { err $ "type" };
            ok $ node.as_comment_node.@content
        ).flatten.trim_err;
        assert_equal("res", expect, res)
    )
);

test_parse_attribute: TestCase;
test_parse_attribute = (
    make_table_test("test_parse_attribute",
        [
            (":Aa0.='bbb'", ok $ (":Aa0.", "bbb")),
            ("_:Aa0.-  =  \"bbb&lt;&gt;&amp;&quot;\"", ok $ ("_:Aa0.-", "bbb<>&\"")),
            ("_:Aa0.-  =  \"bbb<\"", err $ "Missing end quote"),
            ("_:Aa0.-  =  \"bbb&\"", err $ "Missing end quote")
        ],
        |(input, expect)|
        let res = _parse_attribute.run_parser_str(input);
        let res = res.map(|(attr, _)|
            (attr.@name, attr.@value)
        ).trim_err;
        assert_equal("res", expect, res)
    )
);

main: IO ();
main = (
    [
        test_parse_comment,
        test_parse_attribute,
        TestCase::empty
    ].run_test_driver
);
