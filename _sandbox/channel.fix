// TODO: Use AsyncTask::Var
module Main;

import AsyncTask;
import Random;

import Minilib.IO.IOEx;
import Minilib.Text.StringEx;

impl String: FromString {
    from_string = |s| ok $ s;
}

trait MutState = ToString + FromString + Add;

run_state_manager_task: [s: MutState] s -> IOHandle -> IO ();
run_state_manager_task = |state, req_read_fh| (
    loop_m(
        state, |state|
        let line = *read_line(req_read_fh);
        let line = line.strip_spaces;  
        if line == "shutdown" || line == "" {
            let _ = *println("manager: complete").lift;
            break_m $ ()
        };
        let state = *_handle_request(state, _handler, line);
        continue_m $ state
    )
    .finally(|_| close_file(req_read_fh))
    .try(|err| eprintln(err))
);

_handle_request: [s: MutState] s -> (String -> (String, s) -> IOFail (String, s)) -> String -> IOFail s;
_handle_request = |state, handler, line| (
    let fields = line.split_ex(" ").to_array;
    let cmd: String = fields.@(0);
    let read_fd: I32 = *from_string(fields.@(1)).from_result; 
    let write_fd: I32 = *from_string(fields.@(2)).from_result; 
    let read_fh = *fdopen(read_fd, "r");
    let write_fh = *fdopen(write_fd, "w");
    do {
        let input = *read_string(read_fh);
        let (output, state) = *handler(cmd, (input, state));
        let _ = *write_string(write_fh, output);
        pure $ state
    }
    .finally(|_|
        let _ = *close_file(write_fh);
        close_file(read_fh)
    )
);

_handler: [s: MutState] String -> (String, s) -> IOFail (String, s);
_handler = |cmd, (input, state)| (
    if cmd == "set" {
        let state = *from_string(input).from_result;
        pure $ ("", state)
    };
    if cmd == "add" {
        let input = *from_string(input).from_result;
        let state = state + input;
        pure $ ("", state)
    };
    if cmd == "get" {
        let output = state.to_string;
        pure $ (output, state)
    };
    throw $ "unknown command: " + cmd
);

finally: (() -> IO ()) -> IOFail a -> IOFail a;
finally = |f, iof| (
    let res = *iof.to_result.lift;
    let _ = *f().lift;
    if res.is_err { throw $ res.as_err };
    pure $ res.as_ok
);

catch_err: IOFail a -> IO ();
catch_err = |iof| (
    iof.map(|_| ()).try(|err| eprintln(err))
);

_request: String -> String -> IOHandle -> IOFail String;
_request = |cmd, input, req_write_fh| (
    let (read_fd_peer, write_fd) = *pipe;
    let (read_fd, write_fd_peer) = *pipe;
    let read_fh = *fdopen(read_fd, "r");
    let write_fh = *fdopen(write_fd, "w");
    do {
        let line = cmd + " " + read_fd_peer.to_string + " " + write_fd_peer.to_string ;
        let _ = *println("send: " + line).lift;
        let _ = *write_string(req_write_fh, line + "\n");
        let _ = *fflush(req_write_fh);
        let _ = *write_string(write_fh, input);
        let _ = *fflush(write_fh);
        let _ = *close_file(write_fh).lift;
        let output = *read_string(read_fh);
        pure $ output
    }
    .finally(|_|
        let _ = *close_file(write_fh);
        close_file(read_fh)
    )
);

run_client_task: String -> Random -> IOHandle -> IO ();
run_client_task = |name, random, req_write_fh| (
    loop_m (
        (random, 0), |(random, i)|
        if i >= 10 {
            let _ = *println(name + ": complete").lift;
            break_m $ ()
        };
        let output: String = *_request("get", "", req_write_fh);
        let _ = *println(name + ":" + i.to_string + ": got " + output).lift;
        let (r, random) = random.generate_I64_nonneg;
        let input = name + ":" + i.to_string + " ";
        let _ = *println(name + ":" + i.to_string + ": send " + input).lift;
        let output: String = *_request("add", input, req_write_fh);
        let _ = *usleep((r % 100000).to_U32);
        continue_m $ (random, i + 1)
    )
    .catch_err
);

do_main:  IOFail ();
do_main = (
    let (req_read_fh, req_write_fh) = *open_pipe;
    let state = "";
    let state_manager_task = *AsyncIOTask::make(
        run_state_manager_task(state, req_read_fh)
    ).lift;

    let client1_task = *AsyncIOTask::make(
        run_client_task("client1", Random::init_by_seed(1_U64), req_write_fh)
    ).lift;
    let client2_task = *AsyncIOTask::make(
        run_client_task("client2", Random::init_by_seed(1_U64), req_write_fh)
    ).lift;
    let _ = *client1_task.get.lift;
    let _ = *client2_task.get.lift;
    let _ = *write_string(req_write_fh, "shutdown\n");
    let _ = *fflush(req_write_fh);
    let _ = *close_file(req_write_fh).lift;
    let _ = *state_manager_task.get.lift;
    let _ = *close_file(req_read_fh).lift;
    let _ = *println("completed").lift;
    pure()    
);

main: IO ();
main = (
    do_main.catch_err    
);
