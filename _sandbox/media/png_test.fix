// $ ../bin/fixautolink run -I ../lib -I . -f png_test.fix -d png -d z
module Main;

import Math;
import Minilib.Media.Image;
import Minilib.Media.Png;
//import Sandbox.NdArray;

/*
namespace NdArrayIO {
    write_png_file: String -> String -> NdArray U8 -> IOFail ();
    write_png_file = |filepath, format, image| (
        let shape = image.@shape;
        if shape.get_size != 3 {
            throw $ "shape should be `[height, width, channels]`"
        };
        let height = shape.@(0);
        let width = shape.@(1);
        let channels = shape.@(2);
        // TODO channels and format check
        let imgio = PngImageIO::empty;
        let imgio = imgio.set_width(width);
        let imgio = imgio.set_height(height);
        let imgio = imgio.set_format(PngImageIO::parse_format(format));
        let row_stride = width * channels;
        imgio.write_to_file(filepath, false, image.@data, row_stride)
    );
}
*/

render: F64 -> F64 -> (F64, F64, F64);
render = |x, y| (
    let frac = |f| f - Math::floor(f);
    let noise = 0;
    let (x, y) = if noise == 0 {
        (x, y)
    } else if noise == 1 {   // add jitter noise
        let bx = frac(x*34567.0);
        let by = frac(y*12345.0);
        (x + by * 0.06, y + bx * 0.06)
    } else {            // add jitter noise
        let bx = (x * 0x123456789ABCDE_U64.to_F64).to_U64;
        let by = (y * 0xABC123ABC123FF_U64.to_F64).to_U64;
        let b = bx.bit_xor(by);
        let bx = b.shift_right(16_U64).bit_and(0xFFFF_U64).to_F64 / 65535.0;
        let by = b.shift_right(0_U64).bit_and(0xFFFF_U64).to_F64 / 65535.0;
        (x + bx * 0.02, y + by * 0.02)
    };
    let angle = Math::atan2(y, x) / (2.0 * Math::pi64);
    let radius = Math::sqrt(x * x + y * y);
    let c1 = frac(5.0 * (angle + 0.3 / (radius + 0.1)));
    let c2 = frac(4.0 * (angle - 0.4 / (radius + 0.05)));
    (0.9 * c1 + 0.5 * c2,
     0.5 * c1 + 0.7 * c2,
     0.3 * c1 + 1.2 * c2)
);

test_image: IO ();
test_image = (
    do {
        let width = 512;
        let height = 512;
        let to_byte = |f| max(0.0, min(255.0, f * 255.0)).to_U8;
        let image = Image::make(width, height, "RGB");
        let image = Iterator::range(0, height).fold(
            image, |y, image|
            let fy = (y.to_F64 / height.to_F64) * 2.0 - 1.0;
            Iterator::range(0, width).fold (
                image, |x, image|
                let fx = (x.to_F64 / width.to_F64) * 2.0 - 1.0;
                let rgb = render(fx, fy);
                let index = image.calc_index(x, y, 0);
                image.set_rgb(index, (rgb.@0.to_byte, rgb.@1.to_byte, rgb.@2.to_byte))
            )
        );
        let filepath = "tmp.test.png";
        let _ = *if false {
            image.write_png_file(filepath)
        } else {
            let output = *image.write_png_to_memory;
            write_file_bytes(filepath, output)
        };
        let _ = *println("Wrote " + filepath).lift;
        pure()
    }.try(eprintln)
);

/*
test_ndarray: IO ();
test_ndarray = (
    do {
        let width = 512;
        let height = 512;
        let image: NdArray U8 = NdArray::zeros([height, width, 3]);
        let image = Iterator::range(0, height).fold(
            image, |image, y|
            Iterator::range(0, width).fold (
                image, |image, x|
                image.set((x, y, 0), x.to_U8)
                    .set((x, y, 1), y.to_U8)
                    .set((x, y, 2), 0_U8)
            )
        );
        let color_pixel = |r,g,b| NdArray::make([1,1,3], [r.I64::to_U8, g.I64::to_U8, b.I64::to_U8]);
        let white = color_pixel(255, 255, 255);
        let image = image.set_sub(([20, 480], [10, 20], all), white);
        let image = image.set_sub(([20, 480], [40, 50], all), white);
        let filepath = "tmp.test_ndarray.png";
        let _ = *image.write_png_file(filepath, "RGB");
        let _ = *println("Wrote " + filepath).lift;
        pure()
    }.try(eprintln)
);
*/

main: IO ();
main = (
    let _ = *test_image;
    //let _ = *test_ndarray;
    pure()
);

