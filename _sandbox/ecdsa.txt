### FIPS 186-5 Digital Signature Standard
6. The Elliptic Curve Digital Signature Algorithm (ECDSA)

### 「電子政府推奨暗号リスト」掲載の暗号仕様書一覧
- https://www.cryptrec.go.jp/method.html

### SECG: Standards for Efficient Cryptography Group
- [SEC 1: Elliptic Curve Cryptography (September 20, 2000 Version 1.0)] (https://www.secg.org/SEC1-Ver-1.0.pdf)

- [SEC 2: Recommended Elliptic Curve Domain Parameters](https://www.secg.org/sec2-v2.pdf)
  - [2.4.1 Recommended Parameters secp256k1](https://www.secg.org/sec2-v2.pdf#page=12.83)

SECG に従って調査を進める。

## 1.1 Overview
elliptic curve cryptography
- signature scheme
- encryption scheme
- key agreement scheme

# 2 Mathematical Foundations

an elliptic curve over a finite field
- 2.1 finite fields
- 2.2 elliptic curves over finite fields
- 2.3 data types and convensions
- Appendix B implementation discussion

## 2.1 Finite Fields

F(q)  q is a power of a prime     also denotes as GF(q)

Here only two types of finite fields are used.
F(p)  p is an odd prime       -- prime finite fields
F(q)  q = 2^m                 -- characteristic 2 finite fields

### 2.1.1 Prime finite field F(p)
F(p) = { 0, 1, 2, ..., p-1 }
addition: a + b (mod p)
multiplication: a * b (mod p)   or denotes a . b (mod p)

Here the prime finite fields F(p) used should have:
ceil(log2(p)) in { 112, 128, 160, 192, 224, 256, 384, 521 }

### 2.1.2 Characteristic 2 finite field F(2^m)

{ a[m-1] x^(m-1) + a[m-2] x^(m-2) + ... + a[1] * x + a[0] }, a[i] in { 0, 1 } 

irreducible binary polynomial f(x) 既約多項式
reduction polynomial 簡約多項式

m \in { 113, 131, 163, ..., 571 }

Reduction polynomials
F(2**113): x^113 + x^9 + 1
...

## 2.2 Elliptic Curves
### 2.2.1 Elliptic Curves over F(p)

let a, b \in F(p) satisfying 4*a^3 + 27*b^2 != 0 (mod p).

Then the elliptic curve E(F(p)) over F(p) defined by the parameters a,b consts of the set of solutions P = (x,y) for x, y \in F(p)
to the equation:
  y^2 == x^3 + a * x + b (mod p)             -- the defining equation of E(F(p))
together with an extra point O called the point at infinity.

The number of points in E(F(p)) is denoted by #E(F(p)).
  p + 1 - 2*sqrt(p) <= #E(F(p)) <= p + 1 + 2*sqrt(p).    -- by Hasse Transform

#### Addition rule
1. O + O = O
2. (x,y) + O = O + (x,y) = (x,y)  forall (x,y) \in E(F(p)).
3. (x,y) + (x,-y) = O             forall (x,y) \in E(F(p)).
4. for (x1,y1) \in E(F(p)), (x2,y2) \in E(F(p)), x1 != x2:
   (x3, y3) = (x1, y1) + (x2, y2) where
     x3 := lambda^2 - x1 - x2 (mod p)
     y3 := lambda * (x1 - x3) - y1 (mod p)
     lambda := (y2 - y1) / (x2 - x1) (mod p)
5. double a point
   (x1, y1) \in E(F(p)), y1 != 0
   Then (x3, y3) = (x1, y1) + (x1, y1) where
     x3 := lambda^2 - 2 * x1 (mod p)
     y3 := lambda * (x1 - x3) - y1 (mod p)
     lambda := (3 * x1^2 + a) / (2 * y1) (mod p)

The set of points on E(F(p)) forms a group under this addition rule.  (this group is abelian)

#### Scalar Multiplication

Cryptographic schemes based on ECC rely on scalar multiplication of elliptic curve points.
Given an integer k and a point P \in E(F(p)), scalar multiplication kP is the process of adding P to itself k times.
It can be calculated efficiently with the double-and-add algorithm.

### 2.2.2 Elliptic Curves over F(2^m)

let a, b \in F(2^m) satisfying b != 0
(non-supersingular) elliptic curve E(F(2^m)) 
  y^2 + x*y == x^3 + a*x^2 + b  in F(2^m)

#### Addition Rule

1. O + O = O
2. (x,y) + O = O + (x,y) = (x,y)  forall (x,y) \in E(F(p)).
3. (x,y) + (x,x+y) = O            forall (x,y) \in E(F(p)).    NOTE!! not `-y` but `x+y`
4. for (x1,y1) \in E(F(p)), (x2,y2) \in E(F(p)), x1 != x2:
   (x3, y3) = (x1, y1) + (x2, y2) where
     x3 := lambda^2 + lambda + x1 + x2 + a (in F(2^m))         NOTE!! difference
     y3 := lambda * (x1 + x3) + x3 + y1 (in F(2^m))
     lambda := (y1 + y2) / (x1 + x2) (in F(2^m))
5. double a point
   (x1, y1) \in E(F(p)), y1 != 0
   Then (x3, y3) = (x1, y1) + (x1, y1) where
     x3 := lambda^2 + lambda + a (in F(2^m))
     y3 := x1^2 + (lambda + 1) * x3 (in F(2^m))
     lambda := x1 + y1 / x1 (in F(2^m))
