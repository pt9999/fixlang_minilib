module Minilib.Trait.Traversable;

trait [t: * -> *] t: Traversable {
    sequence: [m: Monad] t (m a) -> m (t a);
}

traverse: [m: Monad, t: Traversable, t: Functor] (a -> m b) -> t a -> m (t b);
traverse = |f, ta| ta.map(f).sequence;

map_m: [m: Monad, t: Traversable, t: Functor] (a -> m b) -> t a -> m (t b);
map_m = traverse;

foreach_m: [m: Monad, t: Traversable, t: Functor] (a -> m ()) -> t a -> m ();
foreach_m = |f, ta| ta.map(f).sequence.forget;

impl Array: Traversable {
    sequence = |array| (
        array.to_iter.fold_m(
            Array::empty(array.get_size), |output, a|
            pure $ output.push_back(*a)
        )
    );
}

impl Iterator: Traversable {
    sequence = |iter| (
        let output = *iter.fold_m(
            [], |output, a|
            pure $ output.push_back(*a)
        );
        pure $ output.to_iter
    );
}
