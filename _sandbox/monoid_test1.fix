module Main;

import Minilib.Trait.Monoid;
import Minilib.Math.Types;
import Minilib.Text.StringEx;

import Sandbox.MonoidEx;

test_endo: IO ();
test_endo = (
    let _ = *println("test_endo");
    let _ = *println(Iterator::range(0, 10).map(endo << |i| add(i.to_string + ",")).mconcat.appEndo("!"));
    let _ = *println(Iterator::range(0, 10).fold("", |s, i| s + i.to_string + ",") + "!");
    pure()
);

test_sum: IO ();
test_sum = (
    let _ = *println("test_sum");
    let _ = *println(Iterator::range(0, 10).map(to_sum).map(map(add(1))).mconcat.get_sum.to_string);
    let _ = *println(Iterator::range(0, 10).map(add(1)).sum.to_string);
    pure()
);

product: [a: Mul, a:One] Iterator a -> a;
product = fold(One::one, Mul::mul);

test_product: IO ();
test_product = (
    let _ = *println("test_product");
    let _ = *println(Iterator::range(0, 10).map(to_product).map(map(add(1))).mconcat.get_product.to_string);
    let _ = *println(Iterator::range(0, 10).map(add(1)).product.to_string);
    pure()
);

test_first: IO ();
test_first = (
    let _ = *println("test_first");
    let check = |i| if i % 3 == 2 { some(i) } else { none() };
    let _ = *println(Iterator::range(0, 10).map(check).map(to_first).mconcat.get_first.to_string);
    let _ = *println(Iterator::range(0, 10).map(check).fold(none(), |opt, i| if opt.is_some { opt } else { i }).to_string);
    pure()
);

test_last: IO ();
test_last = (
    let _ = *println("test_last");
    let check = |i| if i % 3 == 2 { some(i) } else { none() };
    let _ = *println(Iterator::range(0, 10).map(check).map(to_last).mconcat.get_last.to_string);
    let _ = *println(Iterator::range(0, 10).map(check).fold(none(), |opt, i| if i.is_some { i } else { opt }).to_string);
    pure()
);

test_max: IO ();
test_max = (
    let _ = *println("test_max");
    let _ = *println(Iterator::range(0, 10).map(to_max >> some).mconcat.as_some.get_max.to_string);
    let _ = *println(Iterator::range(0, 10).fold(I64::minimum, max).to_string);
    pure()
);

test_min: IO ();
test_min = (
    let _ = *println("test_min");
    let _ = *println(Iterator::range(0, 10).map(to_min >> some).mconcat.as_some.get_min.to_string);
    let _ = *println(Iterator::range(0, 10).fold(I64::maximum, min).to_string);
    pure()
);

main: IO ();
main = (
    let _ = *test_endo;
    let _ = *test_sum;
    let _ = *test_product;
    let _ = *test_first;
    let _ = *test_last;
    let _ = *test_max;
    let _ = *test_min;
    pure()
);

