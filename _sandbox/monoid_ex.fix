module Sandbox.MonoidEx;

import Minilib.Trait.Semigroup;
import Minilib.Trait.Monoid;
import Minilib.Math.Types;

//-------------------------------------------------------
//  Sum
//-------------------------------------------------------

namespace Sum {
    type Sum a = unbox struct {
        data: a
    };

    to_sum: a -> Sum a;
    to_sum = |a| Sum { data: a };

    get: Sum a -> a;
    get = @data;
}

impl [a: Add] Sum a: Semigroup {
    sappend = |b, a| (a.get + b.get).to_sum;
}

impl [a: Zero] Sum a: MEmpty {
    mempty = zero.to_sum;
}

impl Sum: Functor {
    map = |f, ma| f(ma.get).to_sum;
}

//-------------------------------------------------------
//  Product
//-------------------------------------------------------

namespace Product {
    type Product a = unbox struct {
        data: a
    };

    to_product: a -> Product a;
    to_product = |a| Product { data: a };

    get: Product a -> a;
    get = @data;
}

impl [a: Mul] Product a: Semigroup {
    sappend = |b, a| (a.get * b.get).to_product;
}

impl [a: One] Product a: MEmpty {
    mempty = one.to_product;
}

impl Product: Functor {
    map = |f, ma| f(ma.get).to_product;
}

//-------------------------------------------------------
// First
//-------------------------------------------------------

namespace First {
    type First a = unbox struct {
        data: Option a
    };

    to_first: Option a -> First a;
    to_first = |opt| First { data: opt };

    get: First a -> Option a;
    get = @data;
}

impl First a: Semigroup {
    sappend = |b, a| (
        if a.@data.is_some { a } else { b }
    );
}

impl First a: MEmpty {
    mempty = to_first(none());
}

//-------------------------------------------------------
// Last
//-------------------------------------------------------

namespace Last {
    type Last a = unbox struct {
        data: Option a
    };

    to_last: Option a -> Last a;
    to_last = |opt| Last { data: opt };

    get: Last a -> Option a;
    get = @data;
}

impl Last a: Semigroup {
    sappend = |b, a| (
        if b.@data.is_some { b } else { a }
    );
}

impl Last a: MEmpty {
    mempty = to_last(none());
}

//-------------------------------------------------------
// Max
//-------------------------------------------------------

namespace Max {
    type Max a = unbox struct {
        data: a
    };

    to_max: a -> Max a;
    to_max = |a| Max { data: a };

    get: Max a -> a;
    get = @data;
}

impl [a: LessThan] Max a: Semigroup {
    sappend = |b, a| (
        if a.get > b.get { a } else { b }
    );
}

//-------------------------------------------------------
// Min
//-------------------------------------------------------

namespace Min {
    type Min a = unbox struct {
        data: a
    };

    to_min: a -> Min a;
    to_min = |a| Min { data: a };

    get: Min a -> a;
    get = @data;
}

impl [a: LessThan] Min a: Semigroup {
    sappend = |b, a| (
        if a.get < b.get { a } else { b }
    );
}

//-------------------------------------------------------
// Endo
//-------------------------------------------------------

namespace Endo {
    // Endomorphism.
    // `sappend` is same as `<<`.
    type Endo a = unbox struct {
        f: a -> a
    };

    endo: (a -> a) -> Endo a;
    endo = |f| Endo { f: f };

    appEndo: a -> Endo a -> a;
    appEndo = |x, e| (e.@f)(x);

}

impl Endo a: Semigroup {
    sappend = |b, a| Endo { f: a.@f << b.@f };
}

impl Endo a: MEmpty {
    mempty = Endo { f: |x| x };
}

