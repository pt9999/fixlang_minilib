// Reader monad.
//
// For details, see [blog post: The Reader and Writer Monads and Comonads](https://www.olivierverdier.com/posts/2014/12/31/reader-writer-monad-comonad/).
module Minilib.Monad.Reader;

import Minilib.Monad.Identity;

// Reader monad wraps a function from an environment to a value.
// `e` is a type of an environment.
// `m` is a type of an underlyind monad.
// `a` is a type of a value.
type [m: * -> *] ReaderT e m a = unbox struct {
    data: e -> m a
};

type Reader e a = ReaderT e Identity a;

namespace Reader {
    // Creates a generic reader monad from a function.
    reader_t: [m: Monad] (e -> m a) -> ReaderT e m a;
    reader_t = |f| ReaderT { data: f };

    // Creates a reader monad from a function.
    reader: (e -> a) -> Reader e a;
    reader = |f| reader_t $ |e| Identity::make $ f(e);

    // Runs a generic reader monad with the supplied environment.
    run_reader_t: [m: Monad] e -> ReaderT e m a -> m a;
    run_reader_t = |e, ma| (ma.@data)(e);

    // Runs a reader monad with the supplied environment.
    run_reader: e -> Reader e a -> a;
    run_reader = |e, ma| ma.run_reader_t(e).get;

    // A reader monad that returns the environment as a value.
    read: [m: Monad] ReaderT e m e;
    read = reader_t $ |e| pure $ e;
}

impl [m: Monad] ReaderT e m: Functor {
    map = |f, ma| reader_t $ |e| (
        let a = *ma.run_reader_t(e);
        pure $ f(a)
    );
}

impl [m: Monad] ReaderT e m: Monad {
    pure = |a| reader_t $ |_| pure $ a;
    bind = |f, ma| reader_t $ |e| (
        let a = *ma.run_reader_t(e);
        f(a).run_reader_t(e)
    );
}
