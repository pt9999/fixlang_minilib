module Main;

act_0: [f: Functor] (a -> f a) -> (a, b) -> f (a, b);
act_0 = |fun, t| (
    fun(t.@0).map(|x| (x, t.@1))
);


test_act_0: IO ();
test_act_0 = (
    let f = |x| [x + 1, x + 2];
    let t = (3, "a");
    let t = t.act_0(f);
    println(t.to_string)
);

type True a b = a;

type False a b = b;

type [cond: * -> * -> *] IfElse cond a b = cond a b;

type [f: * -> *] Fix f = unbox struct {
    data: f (Fix f)
};

type Pair a b = unbox struct {
    a: a,
    b: b
};

type Either a b = unbox union {
    left: a,
    right: b
};

type Tag a = unbox struct {
    tag: a
};

trait a: HasTag {
    _has_tag: a -> String;
}

impl IO a: HasTag {
    _has_tag = |_| "io";
}

impl Pair a (IO b): HasTag {
    _has_tag = |e| e.@b._has_tag;
}

impl Pair (IO a) b: HasTag {
    _has_tag = |e| e.@a._has_tag;
}


main: IO ();
main = (
    let a: IfElse True I64 String = 1;
    let b: IfElse False I64 String = "a";
    let c: Fix Array -> Fix Array = |x| Fix { data: x.@data.get_sub(0, 1) };
    let d: Pair (IO ()) (IO ()) = Pair { a: pure(), b: pure() };
    eval *println(d._has_tag);
    pure()
);