module Main;

import BinaryHeap;

type Job = unbox struct {
    name: String,
    prio: I64,
};

namespace Job {
    make: String -> I64 -> Job;
    make = |name, prio| Job {
        name: name,
        prio: prio,
    };
}

impl Job: ToString {
    to_string = |j| (
        "Job {"
        + " name=" + j.@name
        + " prio=" + j.@prio.to_string
        + " }"
    );
}

impl Job: LessThan {
    less_than = |a, b| (
        less_than(a.@prio, b.@prio)
    );
}

test1: IO ();
test1 = (
    let heap = MaxBinaryHeap::empty;
    let heap = heap.push(Job::make("aaa", 1));
    let heap = heap.push(Job::make("bbb", 5));
    let heap = heap.push(Job::make("ccc", 3));
    loop_m(
        heap, |heap|
        match heap.get_top {
            none() => break_m $ (),
            some(job) => (
                println(job.to_string);;
                continue_m $ heap.pop
            )
        }
    )
);

main: IO ();
main = test1;
