module Main;

type ScanIterator i s a = unbox struct {
    front : Option s,
    state : s,
    op : a -> s -> s,
    iter : i,
};

impl [i : Iterator, Item i = a] ScanIterator i s a : Iterator {
    type Item (ScanIterator i s a) = s;
    advance = |self| (
        match self.@front {
            some(s) => (
                let self = self.set_front(none());
                some $ (self, s)
            ),
            none() => match self.@iter.advance {
                none() => none(),
                some((iter, a)) => (
                    let s = (self.@op)(a, self.@state);
                    let self = self.set_state(s).set_iter(iter);
                    some $ (self, s)
                )
            }
        }
    );
}

// Create an iterator that generates the inclusive scan of an iterator.
//
// Conceptually, `[a0, a1, a2, ...].to_iter.scan(s, op) = [s1, s2, ...].to_iter` such that
// `s0 = s, s1 = op(a0,s0), s2 = op(a1,s1), ...`.
//
// # Parameters
//
// * `s` - The initial state.
// * `op` - The function to be called on the pair of an element and the current state.
// * `iter` - The iterator to be scaned.
scan : [i : Iterator, Item i = a] s -> (a -> s -> s) -> i -> ScanIterator i s a;
scan = |s, op, iter| ScanIterator { front: none(), state: s, op: op, iter: iter };

// Create an iterator that generates the exclusive scan of an iterator.
//
// Conceptually, `[a0, a1, a2, ...].to_iter.ex_scan(s, op) = [s0, s1, s2, ...].to_iter` such that
// `s0 = s, s1 = op(a0,s0), s2 = op(a1,s1), ...`.
//
// # Parameters
//
// * `s` - The initial state.
// * `op` - The function to be called on the pair of an element and the current state.
// * `iter` - The iterator to be scaned.
ex_scan : [i : Iterator, Item i = a] s -> (a -> s -> s) -> i -> ScanIterator i s a;
ex_scan = |s, op, iter| ScanIterator { front: some(s), state: s, op: op, iter: iter };

main: IO ();
main = (
    let a = range(0,10).map(add(1));
    let b = a.scan(0, add);
    println(b.to_array.to_string);;
    let b = a.ex_scan(0, add);
    println(b.to_array.to_string)
);
