// Fix document generator
module Main;

import Character;

import StringEx;
import IOEx;
import SimpleParser;
import Clap;

// Matches `/^module\s+(\w+)/`.
match_module: Parser String;
match_module = do {
    let _ = *match_str("module");
    let _ = *one_or_more(match_char_class(is_space));
    let chars = *one_or_more(match_char_class(|c| c.is_alnum || c == '_'));
    pure $ chars._unsafe_to_string
};

// Matches `/^type\s+(\w+)/`.
match_type: Parser String;
match_type = do {
    let _ = *match_str("type");
    let _ = *one_or_more(match_char_class(is_space));
    let chars = *one_or_more(match_char_class(|c| c.is_alnum || c == '_'));
    pure $ chars._unsafe_to_string
};

// Matches `/^(impl [^{]+)/`.
match_impl: Parser String;
match_impl = do {
    let _ = *match_str("impl ");
    let decl = *one_or_more(match_char_class(|c| c != '{'));
    pure $ ("impl " + decl._unsafe_to_string).strip_spaces
};

// Matches `/^[a-z]\w*\s*:[^;]*;/`. Note that a line that begins with '_' does not match.
match_global: Parser ();
match_global = do {
    let _ = *match_char_class(is_lower);
    let _ = *zero_or_more(match_char_class(|c| c.is_alnum || c == '_'));
    let _ = *zero_or_more(match_char_class(is_space));
    let _ = *match_char(':');
    let _ = *zero_or_more(match_char_class(|c| c != ';'));
    let _ = *match_char(';');
    pure()    
};

// Matches `/^namespace\s+(\w+)`.
match_namespace: Parser String;
match_namespace = do {
    let _ = *match_str("namespace");
    let _ = *one_or_more(match_char_class(is_space));
    let chars = *one_or_more(match_char_class(|c| c.is_alnum || c == '_'));
    pure $ chars._unsafe_to_string
};

// `parser.matches(str)` runs the parser and returns the parsed result.
matches: String -> Parser a -> Result ErrMsg a;
matches = |str, parser| (
    parser.run_parser_str(str).map(|(x,_)| x)
);

// The state of parsing FixLang source code.
type State = unbox struct {
    output: IOHandle,   // output file handle
    module_summary: String, // module summary
    doc: String,        // document (function comment etc.)
    type_name: String,  // name of type declaration
    type_decl: String    // body of type declaration
};

namespace State {
    // Creates new state and sets the output stream.
    make: IOHandle -> State;
    make = |output| (
        State{
            output: output,
            module_summary: "",
            doc: "",
            type_name: "",
            type_decl: ""
        }
    );

    // Prints a string to the output stream.
    print: String -> State -> IOFail ();
    print = |str, state| (
        write_string(state.@output, str)
    );

    // Prints a string and a newline to the output stream.
    println: String -> State -> IOFail ();
    println = |str, state| (
        state.print(str + "\n")
    );

    // Prints the doc comment, and clears the doc comment.
    print_doc: State -> IOFail State;
    print_doc = |state| (
        let _ = *if state.@doc == "" {
            state.print("") 
        } else {
            state.print(state.@doc + "\n")
        };
        pure $ state.set_doc("")
    );

    // Prints the declaration of the type.
    print_type_declaration: State -> IOFail State;
    print_type_declaration = |state| (
        let _ = *state.println("```");
        let _ = *state.print(state.@type_decl);
        let _ = *state.println("```");
        pure $ state.set_type_decl("")
    );

    process_comment: String -> State -> IOFail State;
    process_comment = |line, state| (
        let after_comment = line.get_sub(2, line.get_size).strip_spaces + "\n";
        let state = state.mod_doc(|doc| doc + after_comment);
        pure $ state
    );

    process_module_decl: String -> State -> IOFail State;
    process_module_decl = |module_name, state| (
        let _ = *state.println("## module " + module_name + "\n");
        let state = state.set_module_summary(state.@doc);
        let state = *state.print_doc;
        pure $ state
    );

    process_impl_decl: String -> State -> IOFail State;
    process_impl_decl = |impl_, state| (
        let _ = *state.println("#### `" + impl_ + "`\n");
        let state = *state.print_doc;
        pure $ state
    );

    process_global_decl: String -> State -> IOFail State;
    process_global_decl = |line, state| (
        let _ = *state.println("#### " + line + "\n");
        let state = *state.print_doc;
        pure $ state
    );

    process_type_decl: String -> String -> Result ErrMsg String -> State -> IOFail State;
    process_type_decl = |orig_line, line, type_name, state| (
        let state = if type_name.is_ok { 
            state.set_type_name(type_name.as_ok) 
        } else { 
            state 
        };
        let state = state.mod_type_decl(|t| t + orig_line + "\n");
        if state.@type_decl.find(";", 0).is_none {
            pure $ state
        };
        let _ = *state.println("### type " + state.@type_name + "\n");
        let state = *state.print_doc;
        let state = *state.print_type_declaration;
        pure $ state
    );

    process_namespace_decl: String -> String -> State -> IOFail State;
    process_namespace_decl = |line, namespace_name, state| (
        let _ = *state.println("### namespace " + namespace_name + "\n");
        let state = *state.print_doc;
        pure $ state
    );

    process_other: String -> State -> IOFail State;
    process_other = |line, state| (
        let state = state.set_doc("");
        pure $ state
    );

    process_line: String -> State -> IOFail State;
    process_line = |orig_line, state| (
        let line = orig_line.strip_spaces;
        let is_comment = line.substring(0, 2) == "//";
        if is_comment && state.@type_decl == "" {
            state.process_comment(line)
        };
        let module_decl = match_module.matches(line);
        if module_decl.is_ok {
            state.process_module_decl(module_decl.as_ok)
        };
        let impl_decl: Result ErrMsg String = match_impl.matches(line);
        if impl_decl.is_ok {
            state.process_impl_decl(impl_decl.as_ok)
        };
        let global_decl: Result ErrMsg () = match_global.matches(line);
        if global_decl.is_ok {
            state.process_global_decl(line)
        };
        let type_name: Result ErrMsg String = match_type.matches(line);
        if type_name.is_ok || state.@type_decl != "" {
            state.process_type_decl(orig_line, line, type_name)
        };
        let namespace_decl: Result ErrMsg String = match_namespace.matches(line);
        if namespace_decl.is_ok {
            state.process_namespace_decl(line, namespace_decl.as_ok)
        };
        state.process_other(line)
    );

    // Reads an input file (*.fix) and writes an output file (*.md).
    // Returns the final state.
    process_file: String -> String -> IOFail State;
    process_file = |input_file_path, output_file_path| (
        let _ = *eprintln("Writing: " + output_file_path).lift;
        let contents = *read_file_string(Path::parse(input_file_path).as_some);
        let input_filename = input_file_path.split_ex("/").to_array.get_last.as_some;
        let _ = *make_parent_dir(output_file_path, none());
        let output_fh = *open_file(Path::parse(output_file_path).as_some, "w");
        let state = State::make(output_fh);
        let _ = *state.println("# " + input_filename);
        let _ = *state.println("");
        let state = *contents.split("\n").loop_iter_m(
            state,
            |state, orig_line|
            let state = *state.process_line(orig_line);
            continue_m $ state
        );
        let _ = *close_file(output_fh).lift;
        pure $ state
    );
}

// Type of module summary information
type ModuleInfo = unbox struct {
    file_path: String,
    summary: String
};

namespace ModuleInfo {
    // An empty module summary information.
    empty: ModuleInfo;
    empty = ModuleInfo {
        file_path: "",
        summary: ""
    };
}

// Type of document index information
type IndexInfo = unbox struct {
    modules: Array ModuleInfo
};

namespace IndexInfo
{
    // An empty document index.
    empty: IndexInfo;
    empty = IndexInfo {
        modules: Array::empty(0)
    };

    // Adds a module information to the document index.
    add_module: ModuleInfo -> IndexInfo -> IndexInfo;
    add_module = |module, index| (
        index.mod_modules(push_back(module))
    );

    // Writes contents of document index file to the output stream.
    write_index: IOHandle -> IndexInfo -> IOFail ();
    write_index = |output_fh, index| (
        let print = |str| write_string(output_fh, str);
        let println = |str| print(str + "\n");
        
        let _ = *println("# Index");
        let _ = *index.@modules.to_iter.fold_m(
            (), |_, module|
            let fix_path = module.@file_path;
            let doc_path = *fix_path.replace_suffix(".fix", ".md").from_result;
            let link = "[" + fix_path + "](" + doc_path + ")";
            let _ = *println("### " + link);
            let summary = module.@summary; 
            let _ = if summary == "" { println("\n") } else { println ("\n" + summary + "\n") };
            pure() 
        );
        pure()
    );

    // Creates a document index file.
    create_index_file: String -> IndexInfo -> IOFail ();
    create_index_file = |output_dir, index| (
        let index_file_path = join_paths([output_dir, "index.md"]);
        let output_fh = *open_file(Path::parse(index_file_path).as_some, "w");
        let state = *write_index(output_fh, index);
        let _ = *close_file(output_fh).lift;
        pure() 
    );
}

namespace BatchMode
{
    make_parent_dir: String -> Option U32 -> IOFail ();
    make_parent_dir = |file_path, mode| (
        let parent_dir = dirname(file_path);
        make_dirs(parent_dir, mode)
    );

    process_files_recursively: String -> String -> IOFail ();
    process_files_recursively = |input_dir, output_dir| (
        let input_file_paths = *find_files(input_dir);
        let input_file_paths = input_file_paths.to_iter.filter(|path| path.ends_with(".fix"));
        let index = IndexInfo::empty; 
        let index = *input_file_paths.loop_iter_m(
            index, |index, input_file_path|
            let output_file_path = *join_paths([output_dir, input_file_path]).replace_suffix(".fix", ".md").from_result;
            let state = *process_file(input_file_path, output_file_path);
            let module = ModuleInfo::empty;
            let module = module.set_file_path(input_file_path).set_summary(state.@module_summary);
            let index = index.add_module(module);
            continue_m $ index
        );
        create_index_file(output_dir, index)
    );
}

command: Command;
command = (
    Command::new("fixdoc")
    .version("0.1.0")
    .about("Output a reference document from a fix source file")
    .arg(Arg::new("input").short('i').long("input").help("Input Directory, or in single mode, input file (*.fix)").required.takes_value)
    .arg(Arg::new("output").short('o').long("output").help("Output Directory, or in single mode, output file (*.md)").required.takes_value)
    .arg(Arg::new("single").short('s').long("single").help("single mode"))
);

main: IO ();
main = (
    do {
        let matches = *command.get_matches;
        let single_mode = matches.get_one("single");
        let input = matches.get_one("input").as_some;
        let output = matches.get_one("output").as_some;
        //let _ = *process_file(input, output);
        let _ = *if single_mode == some("true") {
            let _ = *process_file(input, output);
            pure()
        } else {
            process_files_recursively(input, output)
        };
        
        pure()
    }
    .try(|err| eprintln (err))
);
