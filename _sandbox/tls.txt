RFC 8446 - The Transport Layer Security (TLS) Protocol Version 1.3
https://tex2e.github.io/rfc-translater/html/rfc8446.html


3. Presentation Language

3.1. Basic Block Size
- basic data size: one byte
- network byte order

3.2
- comments are `/*...*/`
- optional components are denoted `[[...]]`
- A type alias T' for an existing type T is denoted by:
  `T T';`

3.3 Numbers
- uint8
- larger numbers are constructed, and unsigned
  ```
  uint8 uint16[2];
  uint8 uint24[3];
  uint8 uint32[4];
  uint8 uint64[8];
  ```

3.4 vectors
- A vector (single-dimensioned array)
  is a stream of homogenious data elements.
- vector length = byte count  (not element count)
### fixed-length vector: n = byte size
  `T T'[n];`
- example
  ```
  opaque Datum[3]; sizeof(Datum) = 3
  Datum  Data[9];  sizeof(Data) = 9, len(Data) = 3
  ```
### variable-length vector
  length range: <floor..ceiling>
  `T T'<floor..ceiling>;`
- the actual length precedes the vector's contents
- the length consumes as many bytes as required to represent `ceiling`
- example
  ```
  opaque mandatory<300..400>;       // length(uint16) + content(300..400 bytes)
  uint16 longer<0..800>;            // length(uint16) + content(0..800 bytes), 0 <= len(longer) <= 400
  ```

3.5 Enumerateds

  `enum { e1(v1), e2(v2), ..., en(vn) [[, (n)]] } Te;`

- NOTE: Future extension may define new values.
  Implementations need to ignore unknown values.
- An enumerated occupies as much space as would its maximal defined ordinal value.
  `enum { red(3), blue(5), white(7) } Color;`   // one byte
 
3.6 Constructed types
  struct {
    T1 f1;      // may be assigned a constant value
    T2 f2;
  } T;
3.8 Variants
  struct {
    T1 f1;
    select(E) {
      case e1: Te1 [[fe1]];
      case e2: Te2 [[fe2]];
    }
  } Tv;



