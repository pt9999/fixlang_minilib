module Main;

//import AsyncTask;
//import Random;
import HashMap;

import Minilib.Crypto.Cert.Pkcs1;
import Minilib.Math.BigInt;
//import Minilib.Monad.State;
//import Minilib.Monad.Trans;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;


// These test vectors were obtained using the steps below:
// 1. Visit the NIST website:
//    [CAVP Testing: Digital Signatures](https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures)
//
// 2. Download the test vector from "Test Vectors" section on the above page:
//    [FIPS 186-4 RSA](https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/dss/186-3rsatestvectors.zip)
//
// 3. Unzip the downloaded zip file (`186-3rsatestvectors.zip`).
//
// 4. Open `SigGenPSS_186-3.txt` and extract lines.

test_cavp_rsassa_pss_verify: TestCase;
test_cavp_rsassa_pss_verify = (
    make_test("test_cavp_rsassa_pss_verify") $ |_| (
        let testvec = "
// SigGenPSS_186-3.txt line 8
n = c5062b58d8539c765e1e5dbaf14cf75dd56c2e13105fecfd1a930bbb5948ff328f126abe779359ca59bca752c308d281573bc6178b6c0fef7dc445e4f826430437b9f9d790581de5749c2cb9cb26d42b2fee15b6b26f09c99670336423b86bc5bec71113157be2d944d7ff3eebffb28413143ea36755db0ae62ff5b724eecb3d316b6bac67e89cacd8171937e2ab19bd353a89acea8c36f81c89a620d5fd2effea896601c7f9daca7f033f635a3a943331d1b1b4f5288790b53af352f1121ca1bef205f40dc012c412b40bdd27585b946466d75f7ee0a7f9d549b4bece6f43ac3ee65fe7fd37123359d9f1a850ad450aaf5c94eb11dea3fc0fc6e9856b1805ef

ec94f
d = 49e5786bb4d332f94586327bde088875379b75d128488f08e574ab4715302a87eea52d4c4a23d8b97af7944804337c5f55e16ba9ffafc0c9fd9b88eca443f39b7967170ddb8ce7ddb93c6087c8066c4a95538a441b9dc80dc9f7810054fd1e5c9d0250c978bb2d748abe1e9465d71a8165d3126dce5db2adacc003e9062ba37a54b63e5f49a4eafebd7e4bf5b0a796c2b3a950fa09c798d3fa3e86c4b62c33ba9365eda054e5fe74a41f21b595026acf1093c90a8c71722f91af1ed29a41a2449a320fc7ba3120e3e8c3e4240c04925cc698ecd66c7c906bdf240adad972b4dff4869d400b5d13e33eeba38e075e872b0ed3e91cc9c283867a4ffc3901d2069f

// SigGenPSS_186-3.txt line 64
SHAAlg = SHA256
Msg = dfc22604b95d15328059745c6c98eb9dfb347cf9f170aff19deeec555f22285a6706c4ecbf0fb1458c60d9bf913fbae6f4c554d245d946b4bc5f34aec2ac6be8b33dc8e0e3a9d601dfd53678f5674443f67df78a3a9e0933e5f158b169ac8d1c4cd0fb872c14ca8e001e542ea0f9cfda88c42dcad8a74097a00c22055b0bd41f
S = 8b46f2c889d819f860af0a6c4c889e4d1436c6ca174464d22ae11b9ccc265d743c67e569accbc5a80d4dd5f1bf4039e23de52aece40291c75f8936c58c9a2f77a780bbe7ad31eb76742f7b2b8b14ca1a7196af7e673a3cfc237d50f615b75cf4a7ea78a948bedaf9242494b41e1db51f437f15fd2551bb5d24eefb1c3e60f03694d0033a1e0a9b9f5e4ab97d457dff9b9da516dc226d6d6529500308ed74a2e6d9f3c10595788a52a1bc0664aedf33efc8badd037eb7b880772bdb04a6046e9edeee4197c25507fb0f11ab1c9f63f53c8820ea8405cfd7721692475b4d72355fa9a3804f29e6b6a7b059c4441d54b28e4eed2529c6103b5432c71332ce742bcc
SaltVal = e1256fc1eeef81773fdd54657e4007fde6bcb9b1
";
        let hmap = testvec.split("\n").map(split_first("=")).filter(|(k,v)| v != "")
        .fold(HashMap::empty(10), |hmap, (k, v)| hmap.insert(k.strip_spaces, v.strip_spaces));
        let n: BigInt = *hmap.find("n").as_some.from_string_hex.bind(from_bytes).from_result;
        let e: BigInt = *hmap.find("e").as_some.from_string_hex.bind(from_bytes).from_result;
        let d: BigInt = *hmap.find("d").as_some.from_string_hex.bind(from_bytes).from_result;
        let _M: Array U8 = *hmap.find("Msg").as_some.from_string_hex.from_result;
        let _S: Array U8 = *hmap.find("S").as_some.from_string_hex.from_result;
        let _SaltVal: Array U8 = *hmap.find("SaltVal").as_some.from_string_hex.from_result;
        let options = emsa_pss_options_sha256;
        //  NOTE: `SigGenPSS_186-3.txt` does not have testcases of slen==32 but slen==20 for SHA-256,
        //        so set `options.@slen` to _SaltVal size.
        let options = options.set_slen(_SaltVal.get_size);

        // Verifying
        let res = rsassa_pss_verify((n, e), _M, _S, options);
        eval *assert_equal("verifying", ok $ (), res);
        pure()
    )
);

main: IO ();
main = (
    [
        test_cavp_rsassa_pss_verify,
    ]
    .run_test_driver
);
