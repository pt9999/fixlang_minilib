module Main;

type [m: Monad] OptionT m a = unbox struct { _data: m (Option a) };
//type OptionT m a = unbox struct { _data: m (Option a) };

namespace OptionT {
    run_option_t: OptionT m a -> m (Option a);
    run_option_t = |ma| ma.@_data;
}

impl [m: Monad] OptionT m: Monad
{
    pure = |a| OptionT { _data: pure(some(a)) };
    bind = |f, ma| OptionT { _data: 
        let a = *(ma.@_data);
        if a.is_none {
            pure(none())
        };
        f(a.as_some).@_data
    };
}

main: IO ();
main = (
    let ma = pure(1) : OptionT Array I64;
    pure()
);