module PolynomialTest;

import Random;

import Minilib.Math.Types;
import Minilib.Math.Rational;
import Minilib.Math.Polynomial;
import Minilib.Common.RandomEx;
//import Minilib.Monad.State;
import Minilib.Testing.UnitTest;
import Minilib.Text.StringEx;

test_make: TestCase;
test_make = (
    make_table_test("test_make",
        [
            ([3, -2, 1], [3, -2, 1]),
            ([0, 0, 1, 0, 0], [0, 0, 1]),
            ([0, 0, 0], [0]),
            ([1], [1]),
            ([0], [0])
        ],
        |(a, expected)|
        let f = Polynomial::make(a);
        assert_equal("expected", expected, f.@coeff)
    )
);

test_at_degree: TestCase;
test_at_degree = (
    make_table_test("test_at_degree",
        [
            (5, 4, [0, 0, 0, 0, 5]),
            (3, 2, [0, 0, 3]),
            (2, 0, [2])
        ],
        |(a, n, expected)|
        let f = a.at_degree(n);
        assert_equal("expected", expected, f.@coeff)
    )
);

test_get: TestCase;
test_get = (
    make_table_test("test_get",
        [
            ([10, 11, 12], 2, 12),
            ([10, 11, 12], 3, 0),
            ([10, 11, 12], -1, 0),
            ([0], 0, 0)
        ],
        |(a, n, expected)|
        let f = Polynomial::make(a);
        assert_equal("expected", expected, f.get(n))
    )
);

test_set: TestCase;
test_set = (
    make_table_test("test_set",
        [
            ([10, 11, 12], 2, 22, [10, 11, 22]),
            ([10, 11, 12], 4, 24, [10, 11, 12, 0, 24]),
            ([0], 1, 3, [0, 3]),
            ([0], 0, 0, [0])
        ],
        |(a, n, x, expected)|
        let f = Polynomial::make(a);
        let f = f.set(n, x);
        assert_equal("expected", expected, f.@coeff)
    )
);

test_get_degree: TestCase;
test_get_degree = (
    make_table_test("test_get_degree",
        [
            ([10, 11, 12], 2),
            ([10, 11, 0], 1),
            ([1], 0),
            ([0], 0)
        ],
        |(a, expected)|
        let f = Polynomial::make(a);
        assert_equal("expected", expected, f.get_degree)
    )
);

test_divmod_rational: TestCase;
test_divmod_rational = (
    // divmod() requires `[a: Field]`, so we use Rational here.
    let r = rational;
    let ri = |i| rational(i, 1);
    make_table_test("test_divmod_rational",
        [
            ([ri(5), ri(2), ri(1)], [ri(-1), ri(1)], [ri(3), ri(1)], [ri(8)]),
            ([ri(5), ri(2), ri(1)], [ri(-2), ri(2)], [r(3,2), r(1,2)], [ri(8)]),
            ([ri(0)], [ri(1)], [ri(0)], [ri(0)])
        ],
        |(num, den, exp_quo, exp_rem)|
        let num = Polynomial::make(num);
        let den = Polynomial::make(den);
        let exp_quo = Polynomial::make(exp_quo);
        let exp_rem = Polynomial::make(exp_rem);
        let (quo, rem) = divmod(num, den);
        let _ = *assert_equal("quo", exp_quo, quo);
        assert_equal("rem", exp_rem, rem)
    )
);

test_divmod_F64: TestCase;
test_divmod_F64 = (
    make_table_test("test_divmod_F64",
        [
            ([5.0, 2.0, 1.0], [-1.0, 1.0], [3.0, 1.0], [8.0]),
            ([5.0, 2.0, 1.0], [-0.01, 0.01], [300.0, 100.0], [8.0]),
            ([2.0], [10.0], [0.2], [0.0])
        ],
        |(num, den, exp_quo, exp_rem)|
        let num = Polynomial::make(num);
        let den = Polynomial::make(den);
        let exp_quo = Polynomial::make(exp_quo);
        let exp_rem = Polynomial::make(exp_rem);
        let (quo, rem) = divmod(num, den);
        let _ = *assert_equal("quo", exp_quo, quo);
        assert_equal("rem", exp_rem, rem)
    )
);

gen_polynomial_F64: I64 -> Random -> (Random, Polynomial F64);
gen_polynomial_F64 = |max_degree, random| (
    let (random, degree) = random.generate_I64_range(1, max_degree + 1);
    let (random, coeff) = loop(
        (random, []), |(random, coeff)|
        if coeff.get_size >= degree + 1 {
            break $ (random, coeff)
        };
        let (random, r) = random.generate_F64;
        let r = r * 2.0 - 1.0;
        continue $ (random, coeff.push_back(r))
    );
    (random, Polynomial::make(coeff))
);

test_divmod_F64_random: TestCase;
test_divmod_F64_random = (
    make_table_test("test_divmod_F64_random",
        Iterator::range(0, 20).to_array.map(|i|
            let random = Random::init_by_seed(123_U64 + i.to_U64);
            let (random, num) = random.gen_polynomial_F64(7);
            let (random, den) = random.gen_polynomial_F64(5);
            (num, den)
        ),
        |(num, den)|
        let (quo, rem) = divmod(num, den);
        /*
        eval debug_println(
            "num=" + num.to_string
            + " den=" + den.to_string
            + " quo=" + quo.to_string
            + " rem=" + rem.to_string
        );
        */
        let residue = num - (den * quo + rem);
        let residue_abs = residue.@coeff.to_iter.map(abs).fold(0.0, add);
        assert_true("residue_abs=" + residue_abs.to_string_exp,
                residue_abs < 1.0e-10)
    )
);

test_to_string: TestCase;
test_to_string = (
    make_table_test("test_to_string",
        [
            ([10, 11, 12], "12x^2 + 11x + 10"),
            ([0, 1, 1], "x^2 + x"),
            // In general, a ring cannot determine its sign (positive or negative).
            ([-1, -1, -1], "-1x^2 + -1x + -1"),
            ([0], "0")
        ],
        |(a, expected)|
        let f = Polynomial::make(a);
        assert_equal("expected", expected, f.to_string)
    )
);

test_eq: TestCase;
test_eq = (
    make_table_test("test_eq",
        [
            ([10, 11, 12], [10, 11, 12, 0], true),
            ([0, 0, 1], [0, 1, 1], false),
            ([0], [0], true)
        ],
        |(a, b, expected)|
        let f = Polynomial::make(a);
        let g = Polynomial::make(b);
        assert_equal("expected", expected, f == g)
    )
);

test_zero: TestCase;
test_zero = (
    make_test("test_zero") $ |_|
    assert_equal("expected", [0.0], zero.@coeff)
);

test_one: TestCase;
test_one = (
    make_test("test_one") $ |_|
    assert_equal("expected", [1.0], one.@coeff)
);

test_neg: TestCase;
test_neg = (
    make_table_test("test_neg",
        [
            ([10, -11, 12], [-10, 11, -12]),
            ([1], [-1])
        ],
        |(a, expected)|
        let f = Polynomial::make(a);
        let expected = Polynomial::make(expected);
        assert_equal("expected", expected, -f)
    )
);

test_add: TestCase;
test_add = (
    make_table_test("test_add",
        [
            ([10, -11, 12], [3], [13, -11, 12]),
            ([10, -11, 12], [3, 4], [13, -7, 12]),
            ([1], [-3, 0, 0, 4], [-2, 0, 0, 4])
        ],
        |(a, b, expected)|
        let f = Polynomial::make(a);
        let g = Polynomial::make(b);
        let expected = Polynomial::make(expected);
        assert_equal("expected", expected, f + g)
    )
);

test_sub: TestCase;
test_sub = (
    make_table_test("test_sub",
        [
            ([10, -11, 12], [3], [7, -11, 12]),
            ([10, -11, 12], [3, 4, 12], [7, -15]),
            ([10, -11, 12], [3, 4, 12, 5], [7, -15, 0, -5]),
            ([1], [-3, 0, 0, 4], [4, 0, 0, -4])
        ],
        |(a, b, expected)|
        let f = Polynomial::make(a);
        let g = Polynomial::make(b);
        let expected = Polynomial::make(expected);
        assert_equal("expected", expected, f - g)
    )
);

// TODO: add test case for a noncommutative ring,
// such as a matrix ring or quaternions

test_mul: TestCase;
test_mul = (
    make_table_test("test_mul",
        [
            ([10, -11, 12], [0], [0]),
            ([10, -11, 12], [3], [30, -33, 36]),
            ([10, -11, 12], [3, 4], [30, 7, -8, 48]),
            ([1, 2, 1], [1, 1], [1, 3, 3, 1]),
            ([3], [4], [12])
        ],
        |(a, b, expected)|
        let f = Polynomial::make(a);
        let g = Polynomial::make(b);
        let expected = Polynomial::make(expected);
        assert_equal("expected", expected, f * g)
    )
);


// TODO: add tests

main: IO ();
main = (
    [
        test_make,
        test_at_degree,
        test_get,
        test_set,
        test_divmod_rational,
        test_divmod_F64,
        test_divmod_F64_random,
        test_to_string,
        test_eq,
        test_zero,
        test_one,
        test_neg,
        test_add,
        test_sub,
        test_mul,
        TestCase::empty
    ]
    .run_test_driver
);


