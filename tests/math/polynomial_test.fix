module Main;

import Debug;

import Minilib.Math.Types;
import Minilib.Math.Rational;
import Minilib.Math.Polynomial;
import Minilib.Testing.UnitTest;
import Minilib.Text.StringEx;

test_make: TestCase;
test_make = (
    make_table_test("test_make",
        [
            ([3, -2, 1], [3, -2, 1]),
            ([0, 0, 1, 0, 0], [0, 0, 1]),
            ([0, 0, 0], [0]),
            ([1], [1]),
            ([0], [0])
        ],
        |(a, expected)|
        let f = Polynomial::make(a);
        assert_equal("expected", expected, f.@coeff)
    )
);

test_at_degree: TestCase;
test_at_degree = (
    make_table_test("test_at_degree",
        [
            (5, 4, [0, 0, 0, 0, 5]),
            (3, 2, [0, 0, 3]),
            (2, 0, [2])
        ],
        |(a, n, expected)|
        let f = a.at_degree(n);
        assert_equal("expected", expected, f.@coeff)
    )
);

// TODO: add tests

main: IO ();
main = (
    [
        test_make,
        test_at_degree,
        TestCase::empty
    ]
    .run_test_driver
);

