module Main;

import Debug;
import AsyncTask;

//import Tcp;

/*
_usleep: I64 -> I64;
_usleep = |usec| (
    0
);
*/

/*
echo: Socket -> IOFail ();
echo = |socket| (
    let _ = *(lift $ eprintln ("Echo session start: socket=" + socket.to_string));
    let bufsock = BufferedSocket::make(socket);
    let bufsock = *(bufsock.write_str("> "));
    let bufsock = *(bufsock.flush);
    loop_m(
        bufsock, |bufsock|
        //let _ = *(lift $ eprintln ("recv start"));
        let (line, bufsock) = *(bufsock.read_line);
        eval _usleep(1000);
        //let _ = *(lift $ eprintln ("read_line end: size=" + line.get_size.to_string));
        if line.get_size == 0 {
            let _ = *(lift $ eprintln ("Echo session end"));
            break_m $ ()
        };
        let _ = *(lift $ eprint("> " + line));
        //let _ = *(lift $ eprintln ("send start"));
        let bufsock = *(bufsock.write_str(line));
        let bufsock = *(bufsock.write_str("> "));
        let bufsock = *(bufsock.flush);
        //let _ = *(lift $ eprintln ("send end"));
        continue_m $ bufsock
    )
);
*/

server_test: IO ();
server_test = (
    do {
        let _ = *(lift $ eprintln ("Server started"));
        let server_host_port = "127.0.0.1:2525";
        let host = "127.0.0.1";
        let ret: Array U8 = Array::fill(100, 0_U8);    
        let buf: Array U8 = Array::fill(1024, 0_U8);
        let buflen = buf.get_size.to_U64;
        let result: Array Ptr = Array::fill(1, nullptr);
        let h_errornop: Array I32 = Array::fill(1, 0_I32);
        let res = host.borrow_c_str(|p_host| 
            ret.borrow_ptr(|p_ret|
                            -1_I32 /*
                buf.borrow_ptr(|p_buf|
                    result.borrow_ptr(|p_result|
                        h_errornop.borrow_ptr(|p_h_errornop|
                        )
                    )
                )
                    */
            )
        );

        let _ = *(lift $ eprintln ("Listening on " + server_host_port));
        loop_m(
            Array::empty(0), |tasks|
            let _ = *(lift $ eprintln ("Accepting connections"));
            //let (accepted_socket, addr) = *(socket.accept);
            //let _ = *(lift $ eprintln ("Accepted new connection: addr=" + addr.to_string));
            //let _ = *echo(accepted_socket);
            if true {
                break_m $ ()
            };
            if false {

                //let _ = *echo(accepted_socket);
                continue_m $ tasks
            } else {
                //let _ = *(lift $ eprintln ("creating task"));
                let task = AsyncIOTask::make(
                    pure()
                    //echo(accepted_socket)
                    .try(|err| eprintln("error: " + err))
                );
                //let _ = *(lift $ eprintln ("creating task done"));
                let tasks = tasks.push_back(task);
                continue_m $ tasks
            }
        )
    }
    .try(|err| eprintln (err))
);

main: IO ();
main = server_test;
