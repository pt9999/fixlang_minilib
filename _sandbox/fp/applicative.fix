module Minilib.Trait.Applicative;

// A trait which can create a lifted value,
// and apply a lifted function to a lifted value.
trait [f : *->*] f : Applicative {
    // Creates a lifted value from a value.
    pure_a: a -> f a;
    // Applies a lifted function to a lifted value.
    app_a: f (a -> b) -> f a -> f b;
}

// Applies a lifted two-argument function to two lifted values.
lift_a2: [f: Functor, f: Applicative] (a -> b -> c) -> f a -> f b -> f c;
lift_a2 = |f, xs, ys| app_a(xs.map(f), ys);

// Applies a lifted function to a lifted value.
// NOTE: A monad is an applicative.
app: [f: Monad] f (a -> b) -> f a -> f b;
app = |fs, xs| (
    let f = *fs;
    let x = *xs;
    pure $ f(x)
);

impl Array: Applicative {
    pure_a = pure;
    app_a = app;
}

impl Arrow a: Applicative {
    pure_a = pure;
    app_a = app;
}

impl IO: Applicative {
    pure_a = pure;
    app_a = app;
}

impl IOFail: Applicative {
    pure_a = pure;
    app_a = app;
}

impl Iterator: Applicative {
    pure_a = pure;
    app_a = app;
}

impl Option: Applicative {
    pure_a = pure;
    app_a = app;
}

impl Result e: Applicative {
    pure_a = pure;
    app_a = app;
}
