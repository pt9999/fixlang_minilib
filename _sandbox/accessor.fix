module Main;

import Sandbox.StateMonad;

type Accessor a b = unbox struct {
    getter: a -> b,
    modifier: (b -> b) -> a -> a
};

namespace Accessor {
    make: (a -> b) -> ((b -> b) -> a -> a) -> Accessor a b;
    make = |getter, modifier| (
        Accessor { getter: getter, modifier: modifier }
    );

    accessor: (a -> b) -> ((b -> b) -> a -> a) -> Accessor a b;
    accessor = make;

    get: a -> Accessor a b -> b;
    get = |a, acc| (acc.@getter)(a);
    
    mod: (b -> b) -> a -> Accessor a b -> a;
    mod = |f, a, acc| (acc.@modifier)(f, a);
    
    set: b -> a -> Accessor a b -> a;
    set = |b, a, acc| acc.mod(|_| b, a);

    compose: Accessor b c -> Accessor a b -> Accessor a c;
    compose = |acc2, acc1| (
        Accessor { 
            getter: acc1.@getter >> acc2.@getter, 
            modifier: acc1.@modifier << acc2.@modifier 
         }
    );
}

liftState: Accessor s t -> State t a -> State s a;
liftState = |accessor, state| (
    make_state_monad $ |s|
    let t = accessor.get(s);
    let (a, t) = state.run_state(t);
    let s = accessor.set(t, s);
    (a, s)
);

//-------------------

type Foo = unbox struct {
    bar: Bar
};

type Bar = unbox struct {
    baz: Baz
};

type Baz = unbox struct {
    n: I64
};


test1: IO ();
test1 = (
    let acc = accessor(Foo::@bar, Foo::mod_bar);
    let acc = acc.compose(accessor(Bar::@baz, Bar::mod_baz));
    let acc = acc.compose(accessor(Baz::@n, Baz::mod_n));
    
    let foo = Foo { bar: Bar { baz: Baz { n: 0 } } };
    let foo = acc.set(3, foo);
    let foo = acc.mod(add(1), foo);
    let a = acc.get(foo);
    println(a.to_string)
);

test2: IO ();
test2 = (
    // 以下のように関数合成を使えばいいので、わざわざ Accessor を使うまでもない
    /*
    let set = |n, foo| foo.mod_bar(mod_baz(set_n(n)));
    let get = |foo| foo.@bar.@baz.@n;
    let mod = |f, foo| foo.mod_bar(mod_baz(mod_n(f)));
    */
    let set = mod_bar << mod_baz << set_n;
    let get = @bar >> @baz >> @n;
    let mod = mod_bar << mod_baz << mod_n;

    let foo = Foo { bar: Bar { baz: Baz { n: 0 } } };
    let foo = foo.set(3);
    let foo = foo.mod(add(1));
    let a = foo.get;
    println(a.to_string)
);

main: IO ();
main = test1;

