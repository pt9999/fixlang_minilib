// Simple queue (FIFO).
module Sandbox.Queue;

// A type that represents a queue.
type Queue a = unbox struct {
    iter: Iterator a
};

namespace Queue {
    // Creates an empty queue.
    empty: Queue a;
    empty = Queue {
        iter: Iterator::empty
    };

    // Pushes an element to the back of the queue.
    push: a -> Queue a -> Queue a;
    push = |x, q| q.mod_iter(append(Iterator::empty.push_front(x)));

    // Pops an element from the front of the queue. If the queue is empty, `none()` is returned.
    pop: Deque a -> Option (a, Deque a);
    pop = |q| (
        let opt = q.@iter.advance;
        if opt.is_none { none() };
        let (x, iter) = opt.as_some;
        some $ (x, q.set_iter(iter))
    );
}

