module Minilib.Crypto.Cipher.Ec.EcApi;

import Minilib.Monad.Random;

type EcCurveName = String;
type EcHashName = String;
type EcPublicKey = Array U8;    // UncompressedPointRepresentation
type EcSharedSecret = Array U8;
type EcSignature = Array U8;
type EcSigMessage = Array U8;

type EcApi = unbox struct {
    make_ecdhe: EcCurveName -> Result ErrMsg (FreeRandom EcdheApi),
    make_ecdsa: EcCurveName -> EcHashName -> Result ErrMsg EcdsaApi,
};

type EcdheApi = unbox struct {
    curve_name: EcCurveName,
    key_exchange: EcPublicKey,
    accept_peer_key_exchange: EcPublicKey -> Result ErrMsg EcSharedSecret,
};

type EcdsaApi = unbox struct {
    curve_name: EcCurveName,
    hash_name: EcHashName,
    verify: EcPublicKey -> EcSignature -> EcSigMessage -> Result ErrMsg (),
};
