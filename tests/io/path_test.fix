module Main;

import Character;
import Debug;
import HashMap;

import Minilib.IO.Path;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_join_paths_ok: (Array String, String) -> TestCase;
test_join_paths_ok = |(path_segments,expected)| (
    let testname = "test_join_paths_ok (" + path_segments.to_string + ")";
    make_test(testname) $ |_|
    let actual = join_paths(path_segments);
    let _ = *(assert_equal("eq", expected, actual));
    pure()
);

test_join_paths: TestCase;
test_join_paths = (
    [
        test_join_paths_ok $ ([], ""),
        test_join_paths_ok $ ([""], ""),
        test_join_paths_ok $ (["/"], "/"),
        test_join_paths_ok $ (["/", "/"], "/"),
        test_join_paths_ok $ (["/", "a"], "/a"),
        test_join_paths_ok $ (["/", "/a"], "/a"),
        test_join_paths_ok $ (["a"], "a"),
        test_join_paths_ok $ (["a", "b", "c"], "a/b/c"),
        test_join_paths_ok $ (["/a/b/", "/c/d/", "/e/f/"], "/a/b/c/d/e/f/"),
        test_join_paths_ok $ (["a/b", "", "c/d", "", "e/f"], "a/b/c/d/e/f"),
        TestCase::empty
    ].run_tests
);

test_dirname_ok: (String, String) -> TestCase;
test_dirname_ok = |(path,expected)| (
    let testname = "test_dirname_ok (" + path + "," + expected + ")";
    make_test(testname) $ |_|
    let actual = dirname(path);
    let _ = *(assert_equal("eq", expected, actual));
    pure()
);

test_dirname: TestCase;
test_dirname = (
    [
        test_dirname_ok $ ("", "."),
        test_dirname_ok $ ("/", "/"),
        test_dirname_ok $ ("/a", "/"),
        test_dirname_ok $ ("/a/", "/"),
        test_dirname_ok $ ("/a/b", "/a"),
        test_dirname_ok $ ("/a/b/", "/a"),
        test_dirname_ok $ ("/a/b/c", "/a/b"),
        test_dirname_ok $ ("a", "."),
        test_dirname_ok $ ("a/b", "a"),
        test_dirname_ok $ ("a/b/", "a"),
        test_dirname_ok $ ("a/b/c/", "a/b"),
        TestCase::empty
    ].run_tests
);

main: IO ();
main = (
    [
        test_join_paths,
        test_dirname,
        TestCase::empty
    ]
    .run_test_driver
);
