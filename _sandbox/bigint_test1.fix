module Main;

import Debug;
import Random;

import Minilib.Math.BigInt;
import Minilib.Text.StringEx;
import Minilib.Testing.Timeit;

namespace BigIntPrime {

    // Calculates `a^n`.
    pow_by_U64: BigInt -> U64 -> BigInt;
    pow_by_U64 = |a, n| (
        loop(
            (BigInt::from_I64(1), a, n), |(prod, a, n)|
            if n == 0_U64 {
                break $ prod
            };
            let prod = if n.bit_and(1_U64) != 0_U64 {
                prod * a
            } else { prod };
            continue $ (prod, a*a, n.shift_right(1_U64))
        )
    );

    // Calculates `a^n mod m`.
    modpow: BigInt -> BigInt -> BigInt -> BigInt;
    modpow = |a, n, m| (
        loop(
            (BigInt::one, a, n), |(prod, a, n)|
            if n == zero {
                break $ prod
            };
            let (quo, rem) = BigInt::divmod(n, BigInt::two);
            let prod = if rem != zero {
                prod * a
            } else { prod };
            let prod = prod % m;
            let a = (a * a) % m;
            continue $ (prod, a, quo)
        )
    );

    // Generates random BigInt `r` such that `begin <= r && r < end`.
    generate_range: BigInt -> BigInt -> Random -> (BigInt, Random);
    generate_range = |begin, end, random| (
        if begin > end {
            generate_range(end, begin, random)      // swap range and retry
        };
        let n = end - begin;
        eval assert(|_| "invalid range", n > zero);
        let size = n.@nat.get_size;
        let (nat, random) = loop(
            ([], 0, random), |(nat, i, random)|
            let (u64, random) = random.generate_U64;
            if i == size - 1 {
                let m = n.@nat.@(size - 1).to_U64;
                // choose 0..m uniformly
                let u64 = u64 / (U64::maximum / (m + 1_U64));
                if u64 > m {
                    continue $ (nat, i, random)     // try again
                };
                let nat = nat.push_back(u64.to_U32);
                break $ (nat, random)
            };
            let (_, rem) = BigNat::_divmod_base(u64);
            let nat = nat.push_back(rem.to_U32);
            continue $ (nat, i + 1, random)
        );
        let r = BigInt::make(1, nat);
        if r >= n {
            generate_range(begin, end, random)      // try again
        };
        let r = begin + r;
        (r, random)
    );

    // Performs Miller-Rabin primality test.
    // Returns true if `n` is probably prime.
    // Probability of false prime is less than or equal to `2^-100`.
    miller_rabin: BigInt -> Random -> (Bool, Random);
    miller_rabin = |n, random| (
        // For optimization purposes, let's check if `n` is divisible by a small prime number.
        let (_, rem) = BigInt::divmod(n, BigInt::from_I64(2*3*5*7));
        let rem = rem.to_I64;
        if rem % 2 == 0 || rem % 3 == 0 || rem % 5 == 0 || rem % 7 == 0 {
            // composite
            (false, random)
        };
        // Determine `s` and `d` such that `n - 1 == 2^s * d`.
        let n_minus_one = n - BigInt::one;
        let (s, d) = loop(
            (0, n_minus_one), |(s, d)|
            let (quo, rem) = BigInt::divmod(d, BigInt::two);
            if rem.to_I64 != 0 {
                break $ (s, d)
            };
            continue $ (s+1, quo)
        );
        // `k` is the number of rounds of testing to perform.
        // Accoding to Wikipedia, probability of false prime <= `4^(-k)`.
        let k = 50;
        loop(
            (k, random), |(k, random)|
            if k < 0 {
                // probably prime
                break $ (true, random)
            };
            let (a, random) = random.generate_range(two, n - two);
            let x = modpow(a, d, n);
            let (opt, y) = loop(
                (s, x, x), |(s, x, y)|
                if s < 0 {
                    break $ (none(), y)
                };
                let y = (x*x) % n;
                if y == one && x != one && x != n_minus_one {
                    // composite
                    break $ (some(false), y)
                }; 
                let x = y;
                continue $ (s-1, x, y)
            );
            if opt.is_some {
                break $ (opt.as_some, random)
            };
            if y != one {
                // composite
                break $ (false, random)
            }; 
            continue $ (k - 1, random) 
        )
    );

    // `next_probable_prime(n, random)` returns a probable prime number greater than or equal to `n`.
    next_probable_prime: BigInt -> Random -> (BigInt, Random);
    next_probable_prime = |n, random| (
        let (ret, random) = miller_rabin(n, random);
        if ret {
            (n, random)
        };
        next_probable_prime(n + BigInt::one, random)
    );

    // `probable_prime(bit_length, random)` returns a probable prime number with specified bit length.
    probable_prime: I64 -> Random -> (BigInt, Random);
    probable_prime = |bit_length, random| (
        let end = pow_by_U64(BigInt::two, bit_length.to_U64);
        let (begin, _) = end.divmod_by_two;
        let (n, random) = random.generate_range(begin, end);
        let (n, random) = next_probable_prime(n, random);
        if begin <= n && n < end {
            (n, random)
        };
        probable_prime(bit_length, random)  // try again
    );

    // `gcd(m,n)` returns the greatest common divisor of `abs(m)` and `abs(n)`.
    gcd: BigInt -> BigInt -> BigInt;
    gcd = |m, n| (
        let m = m.abs;
        let n = n.abs;
        let cmp = BigInt::cmp(m, n);
        if cmp < 0 { gcd(n, m) };
        if cmp == 0 { n };
        let loop = fix $ |loop, m, n| (
            let rem = m % n;
            if rem.is_zero { n };
            loop(n, rem)
        ) in loop(m, n)
    );

    // Calculates Jacobi symbol `(m/n)`.
    // see: https://en.wikipedia.org/wiki/Jacobi_symbol
    jacobi_symbol: BigInt -> BigInt -> I64;
    jacobi_symbol = |m, n| (
        eval assert(|_| "invalid `n`", n.is_positive && !n.is_even);
        eval assert(|_| "invalid `n`", n.is_positive && !n.is_even);
        let m = if m >= n { m % n }
        abort()
    );

}


or_abort: Result ErrMsg a -> a;
or_abort = |res| (
    if res.is_err {
        eval debug_eprintln("error: " + res.as_err);
        abort()
    };
    res.as_ok
);

test_perf: IO ();
test_perf = (
    let a: BigInt = *timeit("a", |_| from_string("10000000000000000000000000000000000000000000000000000000000000000000000").or_abort);
    let b: BigInt = *timeit("b", |_| from_string("7777777777777777").or_abort);
    let _ = *timeit("a==b", |_| a==b);
    let _ = *timeit("a>b", |_| a>b);
    let _ = *timeit("a>=b", |_| a>=b);
    let _ = *timeit("a+b", |_| a+b);
    let _ = *timeit("a-b", |_| a-b);
    let _ = *timeit("a*b", |_| a*b);
    let _ = *timeit("a/b", |_| a/b);
    let _ = *timeit("a%b", |_| a%b);
    let _ = *timeit("b/a", |_| b/a);
    let _ = *timeit("b%a", |_| b%a);
    let _ = *timeit("a/a", |_| a/a);
    let _ = *timeit("a%a", |_| a%a);
    let _ = *notimeit("from_U64(U64::maximum)", |_| BigInt::from_U64(U64::maximum));
    let _ = *notimeit("from_U64(U64::minimum)", |_| BigInt::from_U64(U64::minimum));
    let _ = *notimeit("from_I64(I64::maximum)", |_| BigInt::from_I64(I64::maximum));
    let _ = *notimeit("from_I64(I64::minimum)", |_| BigInt::from_I64(I64::minimum));
    let _ = *notimeit("(-1 * 0).@sign", |_| (BigInt::from_I64(-1) * BigInt::from_I64(0)).@sign);
    pure()
);

test_prime: IO ();
test_prime = (
    let _ = *pure();
    let _ = CALL_C[() setbuf(Ptr, Ptr), IO::stdout._file_ptr, nullptr];
    let time = CALL_C[I32 time(Ptr), nullptr];
    let random = Random::init_by_seed(time.to_U64);
    let a = pow_by_U64(two, 256_U64);
    let (b, random) = random.generate_range(zero, a);
    //let _ = *println(a.to_string);
    let _ = *loop_m(
        (b, random), |(b, random)|
        // Miller-Rabin Primality test.
        let (ret, random) = miller_rabin(b, random);
        let _ = *println(b.to_string + ": " + if ret { "prime" } else { "composite" });
        if ret {
            break_m $ ()
        };
        continue_m $ (b + one, random)
    );
    pure()
);

test_probable_prime: IO ();
test_probable_prime = (
    let _ = *pure();
    let _ = CALL_C[() setbuf(Ptr, Ptr), IO::stdout._file_ptr, nullptr];
    let time = CALL_C[I32 time(Ptr), nullptr];
    let random = Random::init_by_seed(time.to_U64);
    let bit_length = 512;
    let _ = *println("Searching a probable prime of " + bit_length.to_string + " bits...");
    let (n, random) = probable_prime(bit_length, random);
    println(n.to_string)
);

test_gcd: IO ();
test_gcd = (
    do {
        let test = |a, b| (
            let a: BigInt = *from_string(a).from_result;
            let b: BigInt = *from_string(b).from_result;
            println((a, b, gcd(a,b)).format("gcd({},{})={}")).lift
        );
        let _ = *test("5", "2");
        let _ = *test("6", "10");
        let _ = *test("-6", "-10");
        let _ = *test("57", "51");
        pure()
    }.try(eprintln)
);

main: IO ();
main = test_gcd;
