// An automatic linking tool to make using the library easier.
module Main;

import Character;
import HashMap;
import HashSet;
import Subprocess;
import AsyncTask;

import Minilib.IO.FileSystem;
import Minilib.IO.Path;
import Minilib.Text.StringEx;

help_message: String;
help_message = (
    "fixautolink ver 0.2.0\n" +
    "An automatic linking tool to make using the library easier.\n" +
    "It does the following:\n" +
    "- Checks for modules that are imported from source files.\n" +
    "- Searches for modules in import-lib directories (specified by `-I` option) and adds them to the source file list.\n" +
    "- Searches for modules that are imported from added files recursively.\n" +
    "- Runs the Fix command.\n" +
    "- Updates the dependency file (`.depend`) if an output file is specified.\n" +
    "\n" +
    "Example:\n" +
    "   fixautolink run -f main.fix sub.fix -I ./lib/\n" +
    "   fixautolink build -o main_exe -f main.fix sub.fix -I ./lib/ -d lib\n" +
    "\n" +
    "If the first argument is `updateproj`, then it updates the project file, and exits (without running the Fix command).\n" +
    "The project file (`fixproj.toml`) is searched from the current directory, or its parent directory,\n" +
    "and so on until the root directory is reached.\n" +
    "Example:\n" +
    "   fixautolink updateproj main.fix sub.fix -I ./lib/\n"
);

// Matches against declarations, such as `module ModuleName`, `import ModuleName`
matches_decl: String -> String -> Result ErrMsg String;
matches_decl = |decl, line| (
    let line = line.strip_spaces;
    let (left, right) = line.split_first(" ");
    if left != decl {
        err $ "NotMatch"
    };
    let line = right.strip_spaces;
    let name = line.get_bytes.pop_back.to_iter.take_while(
        |c| c.is_alnum || c == '_' || c == '.'
    ).to_array._unsafe_to_string;
    if name == "" {
        err $ "NotMatch"
    };
    ok $ name
);

// Module information
type Module = unbox struct {
    name: String,               // module name
    path: String,               // module file path (*.fix)
    imports: Array String       // imports
};

namespace Module {
    // Read *.fix file and extract module information.
    // NOTE: block comment(/*...*/) are partially supported.
    read: String -> IOFail Module;
    read = |path| (
        let module = Module {
            name: "",
            path: path,
            imports: []
        };
        let contents = *read_file_bytes(Path::parse(path).as_some);
        let contents = contents._unsafe_to_string;
        let (module, _) = *contents.split("\n").loop_iter_m(
            (module, false), |(module, comment), line|
            let line = line.strip_spaces;
            if line == "" {
                continue_m $ (module, comment)
            };
            let com_s = line.find("/*", 0);
            let com_e = line.find("*/", 0);
            if comment {
                continue_m $ (module, com_e.is_none)
            };
            if com_s.is_some {
                continue_m $ (module, com_e.is_none)
            };
            let is_line_comment = line.substring(0, 2) == "//";
            if is_line_comment {
                continue_m $ (module, comment)
            };
            let module_decl = matches_decl("module", line);
            if module_decl.is_ok {
                let module = module.set_name(module_decl.as_ok);
                continue_m $ (module, comment)
            };
            let import_decl = matches_decl("import", line);
            if import_decl.is_ok {
                let module = module.mod_imports(push_back(import_decl.as_ok));
                continue_m $ (module, comment)
            };
            break_m $ (module, comment)
        );
        if module.@name == "" {
            throw $ "module declaration not found: " + path
        };
        pure $ module
    );
}

// Automatic linker
type Linker = unbox struct {
    import_lib_dirs: Array String,      // import-lib directory
    import_lib_files: Array String,     // import-lib files
    modules: HashMap String Module,     // map from module name to module
    main_files: Array String,           // main source files
    required_files: Array String,       // required source files
    imported: HashSet String,           // set of imported modules
    needed: Iterator String             // needed modules
};

namespace Linker {
    empty: Linker;
    empty = Linker {
        import_lib_dirs: [],
        import_lib_files: [],
        modules: HashMap::empty(0),
        main_files: [],
        required_files: [],
        imported: HashSet::empty(0),
        needed: Iterator::empty
    };

    // find `*.fix` files under `import_lib_dirs`, and store them to @import_lib_files
    find_import_lib_files: Array String -> Linker -> IOFail Linker;
    find_import_lib_files = |import_lib_dirs, linker| (
        let linker = linker.set_import_lib_dirs(import_lib_dirs);
        linker.@import_lib_dirs.to_iter.fold_m(
            linker, |linker, import_lib_dir|
            if !(*directory_exists(import_lib_dir).lift) {
                throw $ "import-lib directory not found: " + import_lib_dir
            };
            let file_paths = *find_files(import_lib_dir);
            let fix_file_paths = (
                file_paths.to_iter.filter(|path|
                    path.ends_with(".fix") &&
                    path.find("/.fixlang/", 0).is_none
                ).to_array
            );
            pure $ linker.mod_import_lib_files(append(fix_file_paths))
        )
    );

    // Read each @import_lib_files and insert it to @modules
    read_modules: Linker -> IOFail Linker;
    read_modules = |linker| (
        linker.@import_lib_files.to_iter.fold_m(
            linker, |linker, lib_file|
            let module = *Module::read(lib_file);
            pure $ linker.mod_modules(insert(module.@name, module))
        )
    );

    print_modules: Linker -> IO ();
    print_modules = |linker| (
        linker.@modules.to_iter.fold_m(
            (), |_, (name, module)|
            println("name=" + name + ": path="+ module.@path + " imports: " + module.@imports.to_string)
        )
    );

    // Read main source files and store them to @modules, @imported, @needed
    read_main_files: Array String -> Linker -> IOFail Linker;
    read_main_files = |main_files, linker| (
        let linker = linker.set_main_files(main_files);
        let linker = linker.set_required_files(main_files);
        let main_modules = *main_files.to_iter.fold_m(
            [], |main_modules, main_file|
            let module = *Module::read(main_file);
            pure $ main_modules.push_back(module)
        );
        let linker = main_modules.to_iter.reverse.fold(
            linker, |linker, module|
            let linker = linker.mod_modules(insert(module.@name, module));
            let linker = linker.mod_imported(insert(module.@name));
            let linker = linker.mod_needed(|needed| module.@imports.to_iter.append(needed));
            linker
        );
        pure $ linker
    );

    // Resolve imports and store them to @required_files recursively
    calc_required_files: Linker -> Linker;
    calc_required_files = |linker| (
        loop(
            linker, |linker|
            let opt = linker.@needed.advance;
            if opt.is_none {
                break $ linker
            };
            let (name, needed) = opt.as_some;
            let linker = linker.set_needed(needed);
            if linker.@imported.contains(name) {
                continue $ linker
            };
            let module = linker.@modules.find(name);
            if module.is_none {
                continue $ linker
            };
            let module = module.as_some;
            let linker = linker.mod_required_files(push_back(module.@path));
            let linker = linker.mod_imported(insert(name));
            let linker = linker.mod_needed(|needed| module.@imports.to_iter.append(needed));
            continue $ linker
        )
    );

    print_required_files: Linker -> IO ();
    print_required_files = |linker| (
        println(linker.@required_files.to_iter.join(" "))
    );
}

// Application
type App = unbox struct {
    original_args: Array String,            // original command line arguments
    source_files: Array String,             // main source files (*.fix)
    output_file: String,                    // output file (`-o`)
    import_lib_dirs: Array String,                 // lib directories (`-I`)
    before_source_args: Array String,       // arguments before source files
    after_source_args: Array String,        // arguments after source_files
    args: Array String,                     // final arguments
    linker: Linker,                         // the linker
    update_project_file: Bool,              // true if the project file needs to be updated
};

namespace App {
    empty: App;
    empty = App {
        original_args: [],
        before_source_args: [],
        source_files: [],
        output_file: "",
        import_lib_dirs: [],
        after_source_args: [],
        args: [],
        linker: Linker::empty,
        update_project_file: false,
    };

    // parse command line arguments, and extract `-o`, `-I`, `*.fix`.
    parse_args: App -> IOFail App;
    parse_args = |app| (
        let args = *IO::get_args.lift;
        if args.get_size == 1 || args.@(1) == "--help" {
            throw $ help_message
        };
        let app = app.set_original_args(args);
        let args = args.set(0, "fix");      // set fix program

        // Check if the project file needs to be updated
        let app = app.set_update_project_file(args.@(1) == "updateproj");

        // Find output file
        let opt = args.find_by(|arg| arg == "-o");
        let app = if opt.is_some && opt.as_some + 1 < args.get_size {
            app.set_output_file(args.@(opt.as_some + 1))
        } else { app };

        // Extract lib dirs (`-I LIB_DIR`)
        let (args, import_lib_dirs, _) = args.to_iter.fold(
            ([], [], false), |(args, import_lib_dirs, found_lib_opt), arg|
            if found_lib_opt {
                (args, import_lib_dirs.push_back(arg), false)
            };
            if arg == "-I" {
                (args, import_lib_dirs, true)
            };
            (args.push_back(arg), import_lib_dirs, false)
        );
        let app = app.set_import_lib_dirs(import_lib_dirs);

        // Find first source file
        let pos = *args.find_by(|arg| arg.ends_with(".fix")).map_or(
            throw $ "*.fix is not specified",
            pure
        );
        // Split before first source file
        let app = app.set_before_source_args(args.get_sub_ex(0, pos));
        let args = args.get_sub_ex(pos, args.get_size);
        // Filter out source files
        let app = args.to_iter.loop_iter(
            app, |app, arg|
            if arg.ends_with(".fix") {
                continue $ app.mod_source_files(push_back(arg))
            };
            let app = app.mod_after_source_args(push_back(arg));
            continue $ app
        );
        pure $ app
    );

    get_sub_ex: I64 -> I64 -> Array a -> Array a;
    get_sub_ex = |begin, end, array| (
        if begin == 0 && end == array.get_size {
            array
        };
        array.get_sub(begin, end)
    );

    // resolve imports from @source_files and @import_lib_dirs, and store the result to @required_files
    link_files: App -> IOFail App;
    link_files = |app| (
        let linker = Linker::empty;
        let linker = *linker.find_import_lib_files(app.@import_lib_dirs);
        let linker = *linker.read_modules;
        let linker = *linker.read_main_files(app.@source_files);
        let linker = linker.calc_required_files;
        pure $ app.set_linker(linker)
    );

    // reconstruct final arguments
    reconstruct_args: App -> IOFail App;
    reconstruct_args = |app| (
        let args = app.@before_source_args;
        let args = args.append(app.@linker.@required_files);
        let args = args.append(app.@after_source_args);
        pure $ app.set_args(args)
    );

    // update `.depend` file
    update_depends_file: App -> IOFail App;
    update_depends_file = |app| (
        if app.@output_file == "" {
            pure $ app
        };
        let target = app.@output_file;
        let dependencies = app.@linker.@required_files;
        let depends_file = ".depend";

        let depends_file = Path::parse(depends_file).as_some;
        let contents = *read_file_bytes(depends_file).to_result.lift;
        let contents = if contents.is_err {
            ""
        } else {
            contents.as_ok._unsafe_to_string
        };
        let contents = contents.split("\n").map(strip_spaces).filter(|line|
            line != "" && !line.starts_with(target + ":")
        ).map(|line| line.strip_spaces + "\n").concat_iter;
        let line = target + ": " + dependencies.to_iter.join(" ") + "\n";
        let contents = contents + line;
        let _ = *write_file_string(depends_file, contents);
        pure $ app
    );

    execute_fix_command: App -> IOFail ();
    execute_fix_command = |app| (
        let cmd = "fix";
        let args = app.@args;

        // Because stdin, stdout, stderr should not be buffered or closed,
        // using only `exec()` is better than using both `fork()` and `exec()`.
        execvp(cmd, args)
        //execute_command(cmd, args)
    );
}

namespace ExecuteCommand {
    // Borrow a pointer array from a string array, then borrow a pointer of the pointer array.
    // The pointer array will be NULL-terminated.
    _borrow_string_array_ptr: (Ptr -> a) -> Array String -> a;
    _borrow_string_array_ptr = |f, string_array| (
        let n = string_array.get_size;
        let inner = |loop, i, ptr_array| (
            if (i >= n) {
                let ptr_array = ptr_array.push_back(nullptr);  // NULL-terminate
                ptr_array.borrow_boxed(|ptr_array_ptr| f(ptr_array_ptr))
            };
            let str = string_array.@(i);
            str.borrow_c_str(|ptr|
                let ptr_array = ptr_array.push_back(ptr);
                loop(i + 1, ptr_array)
            )
        );

        let ptr_array: Array Ptr = Array::empty(n);
        (fix $ inner)(0, ptr_array)
    );

    // Calls a system call `execvp()`.
    // For details, see [Linux manual page: exec(3)](https://manpages.debian.org/bookworm/manpages-dev/execvp.3.en.html).
    execvp: String -> Array String -> IOFail ();
    execvp = |cmd, args| (
        if (cmd == "") {
            throw $ "cmd is empty"
        };
        if (args.get_size == 0) {
            throw $ "args is empty"
        };
        let command_line = args.to_iter.join(" ");
        let _ = *eprintln("executing: " + command_line).lift;
        cmd.borrow_c_str (|cmd_ptr|
            args._borrow_string_array_ptr(|args_ptr|
                let ret = FFI_CALL[I32 execvp(Ptr, Ptr), cmd_ptr, args_ptr];
                if (ret != 0_I32) {
                    throw $ "exec failed!"
                };
                pure()
        ))
    );

/*
    execute_command: String -> Array String -> IOFail ();
    execute_command = |cmd, args| (
        let command_line = args.to_iter.join(" ");
        let _ = *eprintln("executing: " + command_line).lift;

        let make_drain_task = |src_fh, dest_fh| (
            AsyncIOTask::make(
                loop_m(
                    (), |_|
                    let line = *read_line(src_fh);
                    if line == "" {
                        break_m $ ()
                    };
                    let _ = *write_string(dest_fh, line);
                    continue_m $ ()
                ).try(eprintln)
            )
        );
        let (_, exit_status) = *Subprocess::run_with_stream(cmd, args,
            |(stdin, stdout, stderr)|
            eval *close_file(stdin).lift; // Send EOF.
            let stdout_task = *make_drain_task(stdout, IO::stdout).lift;
            let stderr_task = *make_drain_task(stderr, IO::stderr).lift;
            let _ = stdout_task.get;
            let _ = stderr_task.get;
            pure()
        );
        if exit_status.is_exit && exit_status.as_exit != 0_U8 {
            throw $ "fixautolink: program exited with exit code " + exit_status.as_exit.to_string
        };
        if exit_status.is_signaled {
            throw $ "fixautolink: program exited with signal " + exit_status.as_signaled.to_string
        };
        if exit_status.is_wait_failed {
            throw $ "fixautolink: waiting for program failed!"
        };
        let _ = *println("").lift;
        pure()
    );
*/
}

namespace ProjectFile {
    project_file_name: String;
    project_file_name = "fixproj.toml";

    find_project_file: IOFail String;
    find_project_file = (
        eval *pure();
        loop_m(
            (".", 0), |(dir, i)|
            let real_dir = *realpath(dir);
            let real_proj_file = real_dir + "/" + project_file_name;
            if *file_exists(real_proj_file).lift {
                break_m $ real_proj_file
            };
            if i >= 20 || real_dir == "/" { throw $ "project file not found" };
            continue_m $ (dir + "/..", i + 1)
        )
    );

    update_project_file: App -> IOFail ();
    update_project_file = |app| (
        let proj_file = *find_project_file;
        let contents = *read_file_string(Path::parse(proj_file).as_some);
        let proj_dir = *realpath(dirname(proj_file));
        // TODO update "files" property only
        let files = app.@linker.@required_files;
        let files = *files.to_iter.fold_m([], |output, file|
            let file = *realpath(file);
            // relativize from proj_dir
            let file = *proj_dir.relativize(file).from_result;
            pure $ output.push_back(file)
        );
        let files = files.to_iter.map(|file| "    \"" + file + "\"").join(",\n");
        let contents = (
            "[build]\n"
            + "files = [\n" + files + "\n]\n"
            + "dynamic_links = []\n"
            + "library_paths = []\n"
        );
        eval *eprintln("Updating " + proj_file + "\n").lift;
        eval *eprintln(contents).lift;
        eval *write_file_string(Path::parse(proj_file).as_some, contents);
        pure()
    );
}

main: IO ();
main = (
    do {
        let _ = *IO::stdout.set_unbuffered_mode.lift;
        let _ = *IO::stderr.set_unbuffered_mode.lift;
        let app = App::empty;
        let app = *app.parse_args;
        let app = *app.link_files;
        let app = *app.reconstruct_args;
        let app = *app.update_depends_file;
        if app.@update_project_file {
            eval *update_project_file(app);
            IO::exit(0).lift
        };
        eval *app.execute_fix_command;
        IO::exit(0).lift
    }.try(|err|
        let _ = *eprintln(err);
        IO::exit(1)
    )
);
