module Main;

import Minilib.Functor.Compose;
import Minilib.Testing.UnitTest;

test_compose_functor: TestCase;
test_compose_functor = (
    make_test("test_compose_functor") $ |_|
    let comp = Compose::make $ [some(1), some(2), none()];
    let comp = comp.map(|i| (i + 1).to_string);
    assert_equal("eq", [some("2"), some("3"), none()], comp.run_compose);;
    pure()
);

test_compose_functor2: TestCase;
test_compose_functor2 = (
    make_test("test_compose_functor") $ |_|
    let comp = Compose::make $ [("a", 1), ("b", 2), ("c", 3)];
    let comp = comp.map(|i| (i + 1).to_string);
    assert_equal("eq", [("a", "2"), ("b", "3"), ("c", "4")], comp.run_compose);;
    pure()
);

main: IO ();
main = (
    [
        test_compose_functor,
        test_compose_functor2,
    ]
    .run_test_driver
);
