module Minilib.Trait.Monoid;

import Minilib.Trait.Semigroup;

// An identity of a monoid.
trait a: MEmpty {
    // An identity of a monoid, such as an empty instance.
    mempty: a;
}

// A trait that represents a [monoid](https://en.wikipedia.org/wiki/Monoid).
trait Monoid = Semigroup + MEmpty;

// Concats an iterator of monoids to a monoid.
mconcat: [a: Monoid] Iterator a -> a;
mconcat = |iter| iter.fold(mempty, |a,b| a.sappend(b));

impl (): MEmpty {
    mempty = ();
}

impl Array a: MEmpty {
    mempty = [];
}

impl Iterator a: MEmpty {
    mempty = Iterator::empty;
}

impl String: MEmpty {
    mempty = "";
}

impl [a: Semigroup] Option a: MEmpty {
    mempty = none();
}

/*
impl HashSet k v: MEmpty {
    mempty = HashSet::empty(0);
}
*/
