module Main;

import Debug;

//-------------------------------------------------------
// State Monad
//-------------------------------------------------------

type State s a = unbox struct { _data: s -> (a, s) };

namespace State {
    make_state_monad: (s -> (a, s)) -> State s a;
    make_state_monad = |f| State { _data: f };

    run_state: s -> State s a -> (a, s);
    run_state = |s, ma| (ma.@_data) (s);
}

impl State s: Monad {
    pure = |a| make_state_monad $ |s| (a, s);
    bind = |f, ma| make_state_monad $ |s|
        let (a, ss) = ma.run_state(s);
        f(a).run_state(ss);
}

trait [m: * -> (* -> *)] m: StateMonad {
    get_state: m s s;
    put_state: s -> m s ();
}

impl State: StateMonad {
    get_state = make_state_monad $ |s| (s, s);
    put_state = |s| make_state_monad $ |_| ((), s);
}

trait [m: * -> *] m: ToState {
    to_state: m a -> State s a;
}

impl Option: ToState {
    to_state = |ma| make_state_monad $ |s| pure $ (*ma, s);
}

impl Result e: ToState {
    to_state = |ma| make_state_monad $ |s| pure $ (*ma, s);
}

//-------------------------------------------------------
// StateIO Monad
//-------------------------------------------------------

type StateIO s a = unbox struct { _data: s -> IO (a, s) };

namespace StateIO {
    make_stateio_monad: (s -> IO (a, s)) -> StateIO s a;
    make_stateio_monad = |f| StateIO { _data: f };

    run_stateio: s -> StateIO s a -> IO (a, s);
    run_stateio = |s, ma| (ma.@_data) (s);
}

impl StateIO s: Monad {
    pure = |a| make_stateio_monad $ |s| pure $ (a, s);
    bind = |f, ma| make_stateio_monad $ |s|
        let (a, ss) = *ma.run_stateio(s);
        f(a).run_stateio(ss);
}

impl StateIO: StateMonad {
    get_state = make_stateio_monad $ |s| pure $ (s, s);
    put_state = |s| make_stateio_monad $ |_| pure $ ((), s);
}

trait [m: * -> *] m: ToStateIO {
    to_stateio: m a -> StateIO s a;
}

impl IO: ToStateIO {
    to_stateio = |ioa| make_stateio_monad $ |s| pure $ (*ioa, s);
}

//-------------------------------------------------------
// StateIOF Monad
//-------------------------------------------------------

type StateIOF s a = unbox struct { _data: s -> IOFail (a, s) };

namespace StateIOF {
    make_stateiof_monad: (s -> IOFail (a, s)) -> StateIOF s a;
    make_stateiof_monad = |f| StateIOF { _data: f };

    run_stateiof: s -> StateIOF s a -> IOFail (a, s);
    run_stateiof = |s, ma| (ma.@_data) (s);
}

impl StateIOF s: Monad {
    pure = |a| make_stateiof_monad $ |s| pure $ (a, s);
    bind = |f, ma| make_stateiof_monad $ |s|
        let (a, ss) = *ma.run_stateiof(s);
        f(a).run_stateiof(ss);
}

impl StateIOF: StateMonad {
    get_state = make_stateiof_monad $ |s| pure $ (s, s);
    put_state = |s| make_stateiof_monad $ |_| pure $ ((), s);
}

trait [m: * -> *] m: ToStateIOF {
    to_stateiof: m a -> StateIOF s a;
}

impl IO: ToStateIOF {
    to_stateiof = |ioa| make_stateiof_monad $ |s| pure $ (*ioa.lift, s);
}

impl IOFail: ToStateIOF {
    to_stateiof = |iofa| make_stateiof_monad $ |s| pure $ (*iofa, s);
}

//-------------------------------------------------------

test_state: IO ();
test_state = do {
    let _ = *println("=== test_state ===");
    let sm : State I64 () = do {
        let a = *get_state;
        let _ = *put_state(a+1);
        pure()
    };
    let (b,s) = sm.run_state(42);
    let _ = *println(s.to_string);
    pure()
};

test_stateio: IO ();
test_stateio = do {
    let _ = *println("=== test_stateio ===");
    let sm : StateIO I64 () = do {
        let a = *get_state;
        let _ = *println("hello").to_stateio;
        let _ = *put_state(a+1);
        pure()
    };
    let (b,s) = *sm.run_stateio(42);
    let _ = *println(s.to_string);
    pure()
};

test_stateiof: IO ();
test_stateiof = do {
    let _ = *println("=== test_stateiof ===").lift;
    let sm : StateIOF I64 () = do {
        let a = *get_state;
        let _ = *println("hello").to_stateiof;
        let _ = *write_string(stdout, "world\n").to_stateiof;
        let _ = *put_state(a+1);
        let m: IOFail () = throw $ "error";
        let _ = *m.to_stateiof;
        pure()
    };
    let (b,s) = *sm.run_stateiof(42);
    let _ = *println(s.to_string).lift;
    pure()
}.try(|err| eprintln("ERROR: " + err));

test_iofstate: IO ();
test_iofstate = do {
    let _ = *println("=== test_iofstate ===").lift;
    // ステートモナドではなく、単に状態を受け取り返り値と状態を返す IOFail を使う
    let iofstate_func = |s| (
        let a = s;
        let _ = *println("hello iofstate").lift;
        let _ = *write_string(stdout, "world\n");
        let s = a+1;
        pure $ (s, s)
    );
    let (b,s) = *iofstate_func(42);
    let _ = *println(s.to_string).lift;
    pure()
}.try(|err| eprintln("ERROR: " + err));

main: IO ();
main = (
    let _ = *test_state;
    let _ = *test_stateio;
    let _ = *test_stateiof;
    let _ = *test_iofstate;
    pure()
);
