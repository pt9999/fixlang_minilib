module Main;
import Debug;
import Hash;
import HashMap;
import AsyncTask;

//-------------------------------------------------------
// Memoize function
//-------------------------------------------------------

type MemoFunc k v = unbox struct {
    f: (k -> IO v) -> k -> IO v,
    memo: Var (HashMap k v)
};

namespace MemoFunc {
    make: [k: HashKey] ((k -> IO v) -> k -> IO v)-> IO (MemoFunc k v);
    make = |f| (
        let memo = *Var::make(HashMap::empty(0));
        pure $ MemoFunc { f: f, memo: memo }
    );

    call: [k: HashKey] k -> MemoFunc k v -> IO v;
    call = |key, mf| (
        let memo = *mf.@memo.get;
        let opt = memo.find(key);
        if opt.is_some {
            pure(opt.as_some)
        };
        let loop = |k| mf.call(k);
        let value = *(mf.@f) (loop, key);
        let _ = *mf.@memo.mod(insert(key, value));
        pure $ value
    );
}

//-------------------------------------------------------
// Fibonacci function (I64 -> I64)
//-------------------------------------------------------

type Key = I64;
type Value = I64;

// Non-memoized fibonacci function.
fib : Key -> Value;
fib = |n| (
    if n == 0 {
        0
    } else if n == 1 {
        1
    } else {
        fib(n-1) + fib(n-2)
    }
);

// The recursive fibonacci function which will be memoized.
// This function is defined which takes an argument (key) and returns
// any monad of a return value.
fib_inner: [m: Monad] (Key -> m Value) -> Key -> m Value;
fib_inner = |loop| |n| (
    if n == 0 {
        pure(0)
    } else if n == 1 {
        pure(1)
    } else {
        let a = *loop(n-2);
        let b = *loop(n-1);
        pure(a + b)
    }
);

main : IO ();
main = (
    // Non-memoized fibonacci function call (running time is about 8.782 second).
    //   let ans = fib(45);

    // Memoized fibonacci function call (running time is about 0.003 second).
    let fib_memo = *MemoFunc::make(fib_inner);
    let ans = *fib_memo.call(45);

    eval assert_eq(|_|"fib(45) is not 1134903170!", ans, 1134903170);
    print $ ans.to_string
);
