module Main;

type Endo a = unbox struct {
    f: a -> a
};

endo: (a -> a) -> Endo a;
endo = |f| Endo { f: f };

appEndo: a -> Endo a -> a;
appEndo = |x, e| (e.@f)(x);

impl Endo a: Zero {
    zero = Endo { f: |x| x };
}

impl Endo a: Add {
    add = |a, b| Endo { f: a.@f << b.@f };
}

test1: IO ();
test1 = (
    let e = Iterator::range(0, 10).fold(
        zero, |e, i|
        e + endo(add(i.to_string+","))
    );
    println(e.appEndo("!"))
);

id: a -> a;
id = |x| x;

test2: IO ();
test2 = (
    let f = Iterator::range(0, 10).fold(
        id, |f, i|
        f << add(i.to_string + ",")
    );
    println(f("!"))
);

main: IO ();
main = test2;

