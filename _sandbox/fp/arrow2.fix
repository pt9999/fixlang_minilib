module Main;

//import Minilib.Common.Common;   // id が衝突する
import Minilib.Testing.UnitTest;

// https://hackage.haskell.org/package/base-4.20.0.1/docs/Control-Category.html

trait [cat: * -> (* -> *)] cat: CategoryIF {
    // identity
    id: cat a a;
    // composition
    comp: cat a b -> cat b c -> cat a c;
}
trait Category = CategoryIF;

// https://hackage.haskell.org/package/base-4.20.0.1/docs/Control-Arrow.html
// https://eed3si9n.com/herding-cats/ja/Arrow.html

trait [a: * -> (* -> *)] a: ArrowIF {
    // NOTE: This function is same as `arr` in Haskell and `lift` in Scala Cats.
    arr: (b -> c) -> a b c;

    // NOTE: This function is same as `(***)` in Haskell and `split` in Scala Cats.
    split: a b1 c1 -> a b2 c2 -> a (b1, b2) (c1, c2);
}

// NOTE: The trait name `Arrow` may conflict with the type name `Arrow`.
trait Arrow = CategoryIF + ArrowIF;

// NOTE: PureScript deprecates `Arrow`.
// https://github.com/purescript-deprecated/purescript-arrows
// > an Arrow is just a Strong Category.
// https://pursuit.purescript.org/packages/purescript-profunctor/6.0.1/docs/Data.Profunctor.Strong

first: [a: Arrow] a b c -> a (b, d) (c, d);
first = |f| split(f, id);

second: [a: Arrow] a b c -> a (d, b) (d, c);
second = |f| split(id, f);

//-------------------------------------------------------

impl Arrow: CategoryIF {
    id = |x| x;
    comp = Std::compose;
}

impl Arrow: ArrowIF {
    arr = |f| f;
    split = |f, g, (b1, b2)| (f(b1), g(b2));
}

test_arrow_id: TestCase;
test_arrow_id = (
    make_test("test_arrow_id") $ |_|
    let f: Arrow I64 I64 = id;
    assert_equal("eq", 42, f(42));;
    pure()
);

test_arrow_comp: TestCase;
test_arrow_comp = (
    make_test("test_arrow_comp") $ |_|
    let f: Arrow I64 I32 = |i| i.to_I32;
    let g: Arrow I32 I16 = |i| i.to_I16;
    let h: Arrow I16 String = to_string;
    assert_equal("comp(f,g)(42)", 42_I16, (comp(f, g))(42));;
    assert_equal("comp(f,id,42)", 42_I32, comp(f, id, 42));;
    assert_equal("comp(id,f,42)", 42_I32, comp(id, f, 42));;
    assert_equal("comp(comp(f,g),h,42)", "42", comp(comp(f,g),h,42));;
    assert_equal("comp(f,comp(g,h),42)", "42", comp(f,comp(g,h),42));;
    pure()
);

test_arrow_arr: TestCase;
test_arrow_arr = (
    make_test("test_arrow_arr") $ |_|
    let f: Arrow I64 I32 = arr(|i| i.to_I32);
    assert_equal("eq", 42_I32, f(42));;
    pure()
);

test_arrow_split: TestCase;
test_arrow_split = (
    make_test("test_arrow_split") $ |_|
    let f: Arrow I64 I32 = arr(|i| i.to_I32);
    let g: Arrow U64 U32 = arr(|i| i.to_U32);
    assert_equal("eq", (42_I32, 42_U32), split(f, g, (42, 42_U64)));;
    pure()
);

test_arrow_first_second: TestCase;
test_arrow_first_second = (
    make_test("test_arrow_first_second") $ |_|
    let f: Arrow I64 I32 = arr(|i| i.to_I32);
    assert_equal("eq", (42_I32, "abc"), first(f, (42, "abc")));;
    assert_equal("eq", ("abc", 42_I32), second(f, ("abc", 42)));;
    pure()
);

//-------------------------------------------------------
// https://hackage.haskell.org/package/base-4.20.0.1/docs/Control-Arrow.html#t:Kleisli

type [m: * -> *] Kleisli m a b = unbox struct {
    data: a -> m b
};

namespace Kleisli {
    make: [m: * -> *] (a -> m b) -> Kleisli m a b;
    make = |f| Kleisli { data: f };

    run_kleisli: [m: * -> *] Kleisli m a b -> (a -> m b);
    run_kleisli = @data;

    run: [m: * -> *] a -> Kleisli m a b -> m b;
    run = |a, f| run_kleisli(f, a);
}

impl [m: Monad] Kleisli m: CategoryIF {
    //id: Kleisli m a a;
    id = Kleisli::make $ Monad::pure;

    //comp: Kleisli m a b -> Kleisli m b c -> Kleisli m a c;
    comp = |f, g| Kleisli::make $ |a| (
        run_kleisli(g, *run_kleisli(f, a))
    );
}

impl [m: Monad] Kleisli m: ArrowIF {
    arr = |f| Kleisli::make $ f >> pure;
    split = |f, g| Kleisli::make $ |(b1, b2)| pure $ (*run_kleisli(f, b1), *run_kleisli(g, b2));
}

test_kleisli_id: TestCase;
test_kleisli_id = (
    make_test("test_kleisli_id") $ |_|
    let f: Kleisli IOFail I64 I64 = id;
    assert_equal("eq", 42, *run_kleisli(f, 42));;
    pure()
);

test_kleisli_comp: TestCase;
test_kleisli_comp = (
    make_test("test_kleisli_comp") $ |_|
    let f: Kleisli IOFail I64 I32 = arr $ I64::to_I32;
    let g: Kleisli IOFail I32 I16 = arr $ I32::to_I16;
    let h: Kleisli IOFail I16 String = arr $ to_string;
    assert_equal("comp(f,g).run(42)", 42_I16, *comp(f, g).run(42));;
    assert_equal("comp(f,id).run(42)", 42_I32, *comp(f, id).run(42));;
    assert_equal("comp(id,f).run(42)", 42_I32, *comp(id, f).run(42));;
    assert_equal("comp(comp(f,g),h).run(42)", "42", *comp(comp(f,g),h).run(42));;
    assert_equal("comp(f,comp(g,h)).run(42)", "42", *comp(f,comp(g,h)).run(42));;
    pure()
);

test_kleisli_arr: TestCase;
test_kleisli_arr = (
    make_test("test_kleisli_arr") $ |_|
    let f: Kleisli IOFail I64 I32 = arr $ I64::to_I32;
    assert_equal("eq", 42_I32, *f.run(42));;
    pure()
);

test_kleisli_split: TestCase;
test_kleisli_split = (
    make_test("test_kleisli_split") $ |_|
    let f: Kleisli IOFail I64 I32 = arr $ I64::to_I32;
    let g: Kleisli IOFail U64 U32 = arr $ U64::to_U32;
    //assert_equal("eq", (42_I32, 42_U32), *split(f, g).run((42, 42_U64)));;    // split が ambiguous になる
    assert_equal("eq", (42_I32, 42_U32), *run_kleisli(split(f, g), (42, 42_U64)));;
    pure()
);

//-------------------------------------------------------

main: IO ();
main = (
    [
        test_arrow_id,
        test_arrow_comp,
        test_arrow_arr,
        test_arrow_split,
        test_arrow_first_second,
        test_kleisli_id,
        test_kleisli_comp,
        test_kleisli_arr,
        test_kleisli_split,
    ]
    .run_test_driver
);
