// Env comonad. (a.k.a CoReader comonad)
//
// For details, see [blog post: The Reader and Writer Monads and Comonads](https://www.olivierverdier.com/posts/2014/12/31/reader-writer-monad-comonad/).
module Minilib.Comonad.Env;

import Minilib.Trait.Monoid;
import Minilib.Trait.Semigroup;
import Minilib.Trait.Comonad;

// Env comonad wraps a pair of an environment and a value.
// `e` is a type of an environment.
// `a` is a type of a value.
type Env e a = unbox struct {
    data: (e, a)
};

namespace Env {
    // Creates a env comonad from an enviroment and a value.
    env: e -> a -> Env e a;
    env = |e, a| Env { data: (e, a) };

    // Gets the envirionment from a writer monad.
    get_env: Env e a -> e;
    get_env = |ma| ma.@data.@0;

    // Gets the value from a writer monad.
    get_value: Env e a -> a;
    get_value = |ma| ma.@data.@1;

    // Converts a env comonad to a pair of an enviroment and a value.
    to_tuple: Env e a -> (e, a);
    to_tuple = @data;
}

impl Env e: Functor {
    map = |f, ma| env(ma.get_env, f(ma.get_value));
}

impl Env e: Comonad {
    extract = get_value;
    extend = |f, wb| env(wb.get_env, f(wb));
}
