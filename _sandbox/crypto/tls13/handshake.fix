module Minilib.Crypto.Tls13.Handshake;

import AsyncTask;
import Debug;

import Minilib.Crypto.Tls13.Types;
import Minilib.Crypto.Tls13.RandGen;
import Minilib.Crypto.Tls13.ECDHE;
import Minilib.Crypto.Tls13.ECDSA;
import Minilib.Crypto.Tls13.KeyShare;
import Minilib.Crypto.Tls13.Extensions;
import Minilib.Crypto.Tls13.Connection;
import Minilib.Crypto.Tls13.Protection;
import Minilib.Crypto.Tls13.HandshakeProtocol;
import Minilib.Crypto.Tls13.RecordProtocol;
//import Minilib.Encoding.Binary;
import Minilib.Monad.State;
import Minilib.Monad.Error;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;

type HandshakeState = unbox union {
    before_client_hello: BeforeClientHello,
    after_client_hello: AfterClientHello,
    after_server_hello: AfterServerHello,
};

impl HandshakeState: ToString {
    to_string = |hstate| (
        if hstate.is_before_client_hello { hstate.as_before_client_hello.to_string };
        if hstate.is_after_client_hello { hstate.as_after_client_hello.to_string };
        if hstate.is_after_server_hello { hstate.as_after_server_hello.to_string };
        ""
    );
}

namespace HandshakeState {
    make: [m: Monad] m HandshakeState;
    make = pure $ before_client_hello $ BeforeClientHello { dummy: () };

    start_handshake: [m: MonadRandGen, m: MonadError] String -> m HandshakeState;
    start_handshake = |server_name| (
        if state.is_before_client_hello { state.as_before_client_hello.start_handshake(server_name) };
        error $ "start_handshake: wrong state"
    );

    send_records: [m: TLSConnection] HandshakeState -> m ();
    send_records = |state| (
        let records = state.get_records_to_send;
        TLSPlaintext::send_plaintexts(records)
    );

    get_records_to_send: HandshakeState -> m (Array TLSPlaintext);
    get_records_to_send = |state| (
        if state.is_after_client_hello {
            pure $ state.as_after_client_hello.@client_hello_records
        };
        if state.is_after_server_finished {
            pure $ state.as_after_server_finished.@records_to_send
        };
        pure $ []
    );

    recv_record: [m: TLSConnection] HandshakeState -> m HandshakeState;
    recv_record = |state| (
        let plaintext: TLSPlaintext = *TLSPlaintext::recv_plaintext;
        state.on_recv_record(plaintext)
    );

    on_recv_record: [m: MonadError] TLSPlaintext -> HandshakeState -> m HandshakeState;
    on_recv_record = |plaintext, state| (
        if plaintext.@content_type.is_alert {
            error $ "received alert: " + plaintext.@fragment.to_string_hex
        };
        if plaintext.@content_type.is_change_cipher_spec {
            eval debug_println("received change_cipher_spec");
            pure $ state
        };
        if state.is_after_client_hello {
            state.as_after_client_hello.on_recv_record(plaintext)
        };
        if state.is_after_server_hello {
            state.as_after_server_hello.on_recv_record(plaintext)
        };
        pure $ state
    );
}

type BeforeClientHello = unbox struct {
    dummy: ()
};

impl BeforeClientHello: ToString {
    to_string = |obj| "BeforeClientHello {}";
}

namespace BeforeClientHello {
    start_handshake: [m: MonadRandGen] String -> BeforeClientHello -> m HandshakeState;
    start_handshake = |server_name, _| (
        let hello = ClientHello::empty;
        let hello = hello.init_random(*randgen_bytes(32));
        // init server_name
        let hello = hello.add_extension(Extension::server_name $
            ServerNameList::make([
                ServerName::make(server_name)
            ])
        );
        // init key_share
        // TODO: support other key agreement type
        let key_agreement = *ECDHE::make(ECParam::secp256r1);
        let ks: KeyShare = ks_client_hello $ KeyShareClientHello::make $ [
            key_agreement.to_key_share_entry
        ];
        let hello = hello.add_extension(Extension::key_share $ ks);
        // 9.2. Mandatory-to-Implement Extensions
        // TODO: cookie
        // TODO: signature_algorithms_cert

        eval debug_println("client_hello: extensions=" + hello.@extensions.to_string);
        let handshake: Handshake = Handshake::client_hello $ hello;
        let handshake_bytes: Array U8 = marshal_to_bytes(handshake);
        let client_hello_records: Array TLSPlaintext = TLSPlaintext::split_fragments(ContentType::handshake(), handshake_bytes);

        pure $ after_client_hello $ AfterClientHello {
            client_hello_records: client_hello_records,
            key_agreement: key_agreement
        }
    );
}


// TODO: support other key agreement type
type KeyAgreement = ECDHE;

type AfterClientHello = unbox struct {
    client_hello_records: Array TLSPlaintext,
    key_agreement: KeyAgreement,
};

impl AfterClientHello: ToString {
    to_string = |hello| (
        "AfterClientHello {" +
        " client_hello_records=" + hello.@client_hello_records.to_string +
        " key_agreement=" + hello.@key_agreement.to_string +
        "}"
    );
}

namespace AfterClientHello {

    on_recv_record: [m: MonadError] TLSPlaintext -> AfterClientHello -> m HandshakeState;
    on_recv_record = |plaintext, after_client_hello| (
        if !plaintext.@content_type.is_handshake {
            error $ "after_client_hello: unexpected content type"
        };
        let client_hello_handshake_bytes = *after_client_hello.@client_hello_records.join_fragments;
        let server_hello_handshake_bytes = *server_hello_records.join_fragments;
        let handshake: Handshake = *unmarshal_from_bytes(server_hello_handshake_bytes).from_result_t;
        if !handshake.is_server_hello {
            error $ "after_client_hello: unexpected handshake type"
        };
        let server_hello: ServerHello = handshake.as_server_hello;
        eval debug_println("server_hello=" + server_hello.to_string);

        // key agreement
        let key_agreement = after_client_hello.@key_agreement;
        let key_share_entry = *server_hello._find_key_share_entry;
        let shared_secret: SharedSecret = *key_agreement.accept_server_share(key_share_entry).from_result_t;
        eval debug_println("shared_secret=" + shared_secret.to_string_hex);

        // construct protection
        let cipher_suite = server_hello.@cipher_suite;
        let protection = *Protection::make(cipher_suite).from_result_t;
        let protection = protection.add_handshake_context(client_hello_handshake_bytes);
        let protection = protection.add_handshake_context(server_hello_handshake_bytes);
        let protection = *protection.init_handshake(shared_secret).from_result_t;

        pure $ after_server_hello $ AfterServerHello {
            protection: protection,
            server_params: ServerParams::make $ server_hello,
            records_to_send: [],
        }
    );

    _find_key_share_entry: [m: MonadError] ServerHello -> m KeyShareEntry;
    _find_key_share_entry = |hello| (
        let opt = hello.@extensions.find(is_key_share).map(as_key_share);
        if opt.is_none { error $ "key_share not found" };
        let ks: KeyShare = opt.as_some;
        if !ks.is_ks_server_hello { error $ "not ks_server_hello" };
        let kse: KeyShareEntry = ks.as_ks_server_hello.@server_share;
        pure $ kse
    );
}

type ServerParams = unbox struct {
    server_hello: ServerHello,
    encrypted_extensions: Option EncryptedExtensions,
    certificate_request: Option CertificateRequest,
    certificate: Option Certificate,
    certificate_verify: Option CertificateVerify,
};

namespace ServerParams {
    make: ServerHello -> ServerParams;
    make = |server_hello| ServerParams {
        server_hello: server_hello,
        encrypted_extensions: none(),
        certificate_request: none(),
        certificate: none(),
        certificate_verify: none(),
    }
}

type AfterServerHello = unbox struct {
    protection: Protection,
    server_hello: server_hello,
    handshakes: Array (Handshake, Array U8), // EncryptedExceptions, [CertificateRequest], Certificate, CertificateVerify, Finished
    records_to_send: Array TLSPlaintext,
};

impl AfterServerHello: ToString {
    to_string = |obj| "AfterServerHello {}";
}

namespace AfterServerHello {
    on_recv_record: [m: MonadError] TLSPlaintext -> AfterServerHello -> m HandshakeState;
    on_recv_record = |plaintext, after_server_hello| (
        let protection = after_server_hello.@protection;
        let inner_plaintext = *protecion.decrypt_server(plaintext.to_ciphertext).from_result_t;
        if !inner_plaintext.@content_type.is_handshake {
            error $ "after_server_hello: unexpected content type"
        };
        let handshakes = *inner_plaintext.split_handshakes.from_result_t;
        eval *_check_handshakes_order(handshakes);
        eval *_verify_server_finished(handshakes, protection);
        let protection = _update_handshake_context(handshakes, (0, handshakes.get_size), protection);
        let server_params = ServerParams::make(after_server_hello.@server_hello, handshakes.map(@0));
        pure $ AfterServerFinished::make(protection, server_params)
    );

    _check_handshakes_order: [m: MonadError] Array (Handshake, Array U8) -> m ();
    _check_handshakes_order = |handshakes| (
        let size = handshakes.get_size;
        let get_count = |f| handshakes.to_iter.map(@0).filter(f).fold(0, add(1));
        let get_order = |f| handshakes.find_by(@0 >> f).as_some_or(-1);
        let or_error = |bool| if !bool { error $ "invalid handshakes order" } else { pure() };
        eval *(get_count(is_encrypted_exceptions) == 1).or_error;
        eval *(get_count(is_certificate_request) <= 1).or_error;
        eval *(get_count(is_certificate) == 1).or_error;
        eval *(get_count(is_certificate_verify) == 1).or_error;
        eval *(get_count(is_finished) == 1).or_error;
        eval *(get_order(is_encrypted_exceptions) == 0).or_error;
        eval *(get_order(is_finished) == size - 1).or_error;
        pure()
    );

    _update_handshake_context: Array (Handshake, Array U8) -> (I64, I64) -> Protection -> Protection;
    _update_handshake_context = |handshakes, (start, end), protection| (
        hanshakes.subarray(start, end).map(@1).to_iter.fold(
            protection, |protection, handshake_bytes|
            protection.add_handshake_context(handshake_bytes)
        )
    );

    _verify_server_finished:  [m: MonadError] Array (Handshake, Array U8) -> Protection -> m ();
    _verify_server_finished = |handshakes, protection| (
        let size = handshakes.get_size;
        let protection = _update_handshake_context(handshakes, (0, size - 1), protection);
        let finished = handshakes.@(size - 1).map(@0);
        let verify_data = *protection.calc_finished_verify_data(true);
        eval debug_println("verify_data expected="+ verify_data.to_string_hex);
        eval debug_println("verify_data actual  ="+ finished.@verify_data.to_string_hex);
        if verify_data != finished.@verify_data {
            err $ "verify_data mismatch"
        };
        pure $ ()
    );
}

type ServerParams = unbox struct {
    server_hello: ServerHello,
    handshakes: Array Handshake, // EncryptedExceptions, [CertificateRequest], Certificate, CertificateVerify, Finished
};

namespace ServerParams {
    make: ServerHello -> Array Handshake -> ServerParams;
    make = |server_hello, handshakes| ServerParams {
        server_hello: server_hello,
        handshakes: handshakes
    };
}

type AfterServerFinished = unbox struct {
    protection: Protection,
    server_params: ServerParams,
    records_to_send: Array TLSPlaintext,
};

namespace AfterServerFinished {
    make: Protection -> ServerParams -> m AfterServerFinished;
    make = |protection, server_params| (
        let handshake_bytes = _make_client_finished(protection);
        let inner_plaintext = TLSInnerPlaintext::make(
            handshake_bytes,
            ContentType::handshake(),
            0
        );
        let ciphertext = *protection.encrypt_client(inner_plaintext);
        let records_to_send = [
            ciphertext.to_plaintext
        ];
        pure $ AfterServerFinished {
            protection: protection,
            server_params: server_params,
            records_to_send: records_to_send,
        }
    );

    _make_client_finished: Protection -> Result ErrMsg (Array U8);
    _make_client_finished = |protection| (
        let verify_data = *protection.calc_finished_verify_data(true);
        let client_finished = Finished { verify_data: verify_data };
        let handshake_bytes = marshal_to_bytes(Handshake::finished $ client_finished);
        pure $ handshake_bytes;
    );
}


