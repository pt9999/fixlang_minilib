module Main;

import Debug;
import UnitTest;
import StringEx;

levenshtein: String -> String -> I64;
levenshtein = |str1, str2| (
    let n1 = str1.get_size;
    let n2 = str2.get_size;
    let bytes1 = str1.get_bytes;
    let bytes2 = str2.get_bytes;
    let arr = Array::fill((n1 + 1) * (n2 + 1), I64::maximum);
    let arr = arr.set(0, 0);
    let arr = loop(
        (arr, 0), |(arr, i1)|
        if i1 > n1 { 
            break $ arr
        };
        let arr = loop(
            (arr, 0), |(arr, i2)|
            if i2 > n2 {
                break $ arr
            };
            let i = i1 * (n2 + 1) + i2;
            let c = arr.@(i);
            let arr = if i2 < n2 {
                arr.mod(i + 1, |d| min(d, c + 1))
            } else { arr };
            let arr = if i1 < n1 {
                arr.mod(i + (n2 + 1), |d| min(d, c + 1))
            } else { arr };
            let arr = if i1 < n1 && i2 < n2{
                let change = if bytes1.@(i1) == bytes2.@(i2) { 0 } else { 1 };
                arr.mod(i + (n2 + 1) + 1, |d| min(d, c + change))
            } else { arr };
            continue $ (arr, i2 + 1)
        );
        continue $ (arr, i1 + 1)
    );
    let _ = loop(
        (arr, 0), |(arr, i1)|
        if i1 > n1 { 
            break $ arr
        };
        continue $ (arr, i1 + 1)
    );
    arr.@((n1 + 1) * (n2 + 1) - 1)
);

main: IO ();
main = (
    do {
        //let _ = *assert_equal("kitten-sitting", 3, levenshtein("kitten", "sitting"));
        //pure()
        loop_m(
            (), |_|
            let _ = *eprintln("input word1,word2").lift;
            let line = *read_line(IO::stdin);
            if line == "" { break_m $ () };
            let line = line.strip_spaces;
            let (word1, word2) = line.split_first(",");
            let c = levenshtein(word1, word2);
            let _ = *eprintln("word1="+word1+" word2="+word2+" levenshtein="+c.to_string).lift;
            continue_m $ ()
        )
    }
    .try(eprintln)
);