module Main;

import Random;

import Minilib.Common.Assert;
import Minilib.Math.BigNat;
import Minilib.Math.BigInt;
import Minilib.Math.Types;
import Minilib.Monad.Random;
import Minilib.Monad.State;
import Minilib.Text.StringEx;

to_string_bin: BigInt -> String;
to_string_bin = |n| (
    let bitlen = n.bit_length.to_I64;
    let arr: Array U8 = Array::fill(bitlen, '0');
    let arr = loop(
        (arr, 0), |(arr, i)|
        if i >= bitlen { break $ arr };
        let (off, shift) = _divmod_log2_base(i.to_U64);
        let mask = 1_U32.shift_left(shift.to_U32);
        let bit = n.@nat.@(off.to_I64).bit_and(mask);
        let char = if bit != 0_U32 { '1' } else { '0' };
        let arr = arr.set(bitlen - i - 1, char);
        continue $ (arr, i + 1)
    );
    arr._unsafe_to_string
);

three: BigInt;
three = BigInt::from_I64(3);

collatz: BigInt -> IO ();
collatz = |n| (
    println(n.to_string);;
    //println(n.to_string_bin);;
    if (n == one) {
        pure()
    } else if (n.is_even) {
        collatz(n.shift_right(1_U64))
    } else {
        collatz(three * n + one)
    }
);

parse_arg: [a: FromString] Array String -> I64 -> a -> a;
parse_arg = |args, i, default| (
    if i >= args.get_size { default };
    let res: Result ErrMsg a = from_string(args.@(i));
    match res {
        err(e) => default,
        ok(v) => v
    }
);


main: IO ();
main = (
    let time = FFI_CALL[I32 time(Ptr), nullptr];
    let args = *IO::get_args;
    let bit_length: I64 = parse_arg(args, 1, 256);
    let seed: U64 = parse_arg(args, 2, time.to_U64);
    let random = Random::init_by_seed(seed);
    let n: BigInt = generate_bigint(bit_length).eval_state(random);
    collatz(n)
);