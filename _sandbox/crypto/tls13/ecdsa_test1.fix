module Main;

import HashMap;

import Minilib.Crypto.Tls13.ECDSA;
import Minilib.Crypto.SecureRandom;
import Minilib.Monad.State;
import Minilib.Monad.Trans;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test1: IO ();
test1 = (
    do {
        let ec = secp256r1;
        let _ = *println("ec="+ec.to_string).lift;
        let secure_random = *SecureRandom::make;
        let (key_pair, _) = *generate_keypair(ec).run_state_t(secure_random);
        let _ = *println("key_pair=" + key_pair.to_string).lift;

        let _ = *println("validating public key q").lift;
        let _ = *key_pair.@q.validate_pubkey.from_result;

        let _ = *println("convert q to bytes (uncompressed)").lift;
        let q_bytes = key_pair.@q.to_bytes_uncompressed;
        let _ = *println("q_bytes=" + q_bytes.to_string_hex).lift;

        let _ = *println("convert bytes to q").lift;
        let q: ECPoint = *from_bytes_ec(ec, q_bytes).from_result;
        let _ = *println("q=" + q.to_string).lift;

        let _ = *println("convert q to byte (compressed)").lift;
        let q_bytes = key_pair.@q.to_bytes_compressed;
        let _ = *println("q_bytes=" + q_bytes.to_string_hex).lift;

        let _ = *println("convert bytes to q").lift;
        let q: ECPoint = *from_bytes_ec(ec, q_bytes).from_result;
        let _ = *println("q=" + q.to_string).lift;
        pure()
    }.try(eprintln)
);

test_sign: IO ();
test_sign = (
    do {
        let sm: StateT SecureRandom IOFail () = do {
            let log = println >> lift >> lift_t;
            let scheme = ECDSAScheme::ecdsa_secp256r1_sha256;
            let ec = scheme.@ec;

            let key_pair = *generate_keypair(ec);
            eval *log("key_pair=" + key_pair.to_string);

            let message: Array U8 = "Hello world".get_bytes;

            // Signing
            eval *log("signing");
            let signature = *scheme.sign(key_pair, message);
            eval *log(signature.to_string);
            eval *log("signature=" + signature.to_string);

            // Verifying
            eval *log("verifying");
            eval *scheme.verify(key_pair.@q, signature, message).from_result.lift_t;
            eval *log("ok");
            pure()
        };
        let secure_random = *SecureRandom::make;
        sm.run_state_t(secure_random).forget
    }.try(eprintln)
);

// These test vectors were obtained using the steps below:
// 1. Visit the NIST website:
//    [CAVP Testing: Digital Signatures](https://csrc.nist.gov/projects/cryptographic-algorithm-validation-program/digital-signatures)
//
// 2. Download the test vector from "Test Vectors" section on the above page:
//    [FIPS 186-4 ECDSA](https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/dss/186-4ecdsatestvectors.zip)
//
// 3. Unzip the downloaded zip file.
//
// 4. Open `SigGen.txt` and find `[P-256,SHA-256]` on line 620.

test2: IO ();
test2 = (
    do {
        let testvec = "
Msg = 5905238877c77421f73e43ee3da6f2d9e2ccad5fc942dcec0cbd25482935faaf416983fe165b1a045ee2bcd2e6dca3bdf46c4310a7461f9a37960ca672d3feb5473e253605fb1ddfd28065b53cb5858a8ad28175bf9bd386a5e471ea7a65c17cc934a9d791e91491eb3754d03799790fe2d308d16146d5c9b0d0debd97d79ce8
d = 519b423d715f8b581f4fa8ee59f4771a5b44c8130b4e3eacca54a56dda72b464
Qx = 1ccbe91c075fc7f4f033bfa248db8fccd3565de94bbfb12f3c59ff46c271bf83
Qy = ce4014c68811f9a21a1fdb2c0e6113e06db7ca93b7404e78dc7ccd5ca89a4ca9
k = 94a1bbb14b906a61a280f245f9e93c7f3b4a6247824f5d33b9670787642a68de
R = f3ac8061b514795b8843e3d6629527ed2afd6b1f6a555a7acabb5e6f79c8c2ac
S = 8bf77819ca05a6b2786c76262bf7371cef97b218e96f175a3ccdda2acc058903
";
        let hmap = testvec.split("\n").map(split_first("=")).filter(|(k,v)| v != "")
        .fold(HashMap::empty(10), |hmap, (k, v)| hmap.insert(k.strip_spaces, v.strip_spaces));
        let message: Array U8 = *hmap.find("Msg").as_some.FromStringHex::from_string_hex.from_result;
        let from_string_hex = ECInt::from_string_hex;
        let d: ECInt = *hmap.find("d").as_some.from_string_hex.from_result;
        let qx: ECInt = *hmap.find("Qx").as_some.from_string_hex.from_result;
        let qy: ECInt = *hmap.find("Qy").as_some.from_string_hex.from_result;
        let k: ECInt = *hmap.find("k").as_some.from_string_hex.from_result;
        let r: ECInt = *hmap.find("R").as_some.from_string_hex.from_result;
        let s: ECInt = *hmap.find("S").as_some.from_string_hex.from_result;
        //println([d, qx, qy, k, r, s].map(to_string).to_string).lift

        let scheme = ECDSAScheme::ecdsa_secp256r1_sha256;
        let ec = scheme.@ec;
        let q = ECPoint::make(ec, ECField::make(qx, ec.@p), ECField::make(qy, ec.@p));
        let key_pair = ECKeyPair { ec: ec, d: d, q: q };
        let sigature = ECDSASignature::make(r, s);

        // Signing
        let res = scheme._sign_with_k(key_pair, message, k);
        eval *println(res.to_string).lift;
        eval *assert_equal("signing", ok $ sigature, res);

        // Verifying
        let res = scheme.verify(q, sigature, message);
        eval *assert_equal("verifying", ok $ (), res);

        pure()
    }.try(eprintln)
);



main: IO ();
main = (
    test_sign
);
