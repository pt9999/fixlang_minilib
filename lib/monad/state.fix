// State Monad which maintains a mutable state.
module Minilib.Monad.State;

import Minilib.Monad.Identity;
import Minilib.Monad.Trans;
import Minilib.Monad.Error;

// A trait for the interface of generic state monads.
trait MonadState = Monad + MonadStateIF;

// A trait for generic state monads that manages the internal state.
trait [sm: * -> *] sm: MonadStateIF {
    // The type of the internal state.
    type StateType sm;
    // A monad that returns the internal state as a value.
    get_state: sm (StateType sm);
    // A monad that puts the specified value to the internal state.
    put_state: (StateType sm) -> sm ();
}

// A monad that modifies the current state with the specified function.
mod_state: [sm: MonadState] (StateType sm -> StateType sm) -> sm ();
mod_state = |f| put_state $ f $ *get_state;

//------------------------------------------------------------------------

// State monad wraps a function from a initial state to a pair of a value and a final state.
type [m: *->*] StateT s m a = unbox struct {
    data: s -> m (a, s)
};

type State s a = StateT s Identity a;

// Creates a StateT monad from a function.
make_state_t_monad: [m: Monad] (s -> m (a, s)) -> StateT s m a;
make_state_t_monad = |f| StateT { data: f };

// Creates a State monad from a function.
make_state_monad: (s -> (a, s)) -> State s a;
make_state_monad = |f| make_state_t_monad(f >> pure);

// Runs a StateT monad with the supplied initial state.
run_state_t: [m: Monad] s -> StateT s m a -> m (a, s);
run_state_t = |s, ma| (ma.@data)(s);

// Runs a State monad with the supplied initial state.
run_state: s -> State s a -> (a, s);
run_state = |s, ma| ma.run_state_t(s).get;

// Converts an underlying monad to a StateT monad.
lift_state: [m: Monad] m a -> StateT s m a;
lift_state = |ma| (
    make_state_t_monad $ |s|
    let a = *ma;
    pure $ (a, s)
);

// Maps both the return value and final state.
map_state_t: [m: Monad, n: Monad] (m (a, s) -> n (b, s)) -> StateT s m a -> StateT s n b;
map_state_t = |f, ma| (
    make_state_t_monad $ (ma.@data) >> f
);

impl [m: Monad] StateT s m: Functor {
    map = |f, ma| make_state_t_monad $ |s| (
        let (a, ss) = *ma.run_state_t(s);
        pure $ (f(a), ss)
    );
}

impl [m: Monad] StateT s m: Monad
{
    pure = |a| StateT { data: |s| pure((a, s)) };
    bind = |f, ma| StateT { data: |s|
        let (a,s) = *ma.run_state_t(s);
        f(a).run_state_t(s)
    };
}

impl [m: Monad] StateT s m: MonadStateIF {
    type StateType (StateT s m) = s;
    get_state = make_state_t_monad $ |s| pure $ (s, s);
    put_state = |s| make_state_t_monad $ |_| pure $ ((), s);
}

impl StateT s: MonadTrans {
    lift_t = lift_state;
}

impl [m: MonadError] StateT s m: MonadErrorIF {
    type ErrorType (StateT s m) = ErrorType m;
    error = lift_t << error;
    catch = |handler, sma| (
        make_state_t_monad $ |s|
        sma.run_state_t(s).catch(|err|
            handler(err).run_state_t(s)
        )
    );
}
