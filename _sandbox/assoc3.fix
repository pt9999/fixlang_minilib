module Main;

// ----- Api definitions
trait a: ServiceApi {
    type LoggerImpl a;
    get_logger_api: [log: LoggerApi, LoggerImpl a = log] a -> log; // error: The first argument of the left side of an equality constraint should be a type variable.
    //get_logger_api: [log: LoggerApi, log = LoggerImpl a] a -> log;  // error: The left side of an equality constraint should be the application of an associated type.
}

trait a: LoggerApi {
    log: String -> a -> IO ();
}

// ----- Default Service Implementation
type DefaultSeviceImpl = unbox struct {
    logger: DefaultLoggerImpl
};

namespace DefaultSeviceImpl {
    make: () -> DefaultSeviceImpl;
    make = |_| DefaultSeviceImpl {
        logger: DefaultLoggerImpl::make("main")
    };
}

impl DefaultSeviceImpl: ServiceApi {
    type LoggerImpl DefaultSeviceImpl = DefaultLoggerImpl;
    get_logger_api = |a| a.@logger;
}

// ----- Default Logger Implementation
type DefaultLoggerImpl = unbox struct {
    name: String
};

namespace DefaultLoggerImpl {
    make: String -> DefaultLoggerImpl;
    make = |name| DefaultLoggerImpl { name: name };
}

impl DefaultLoggerImpl: LoggerApi {
    log = |val, logger_impl| println(logger_impl.@name + ":" + val);
}

// -----
main: IO ();
main = (
    let service = DefaultSeviceImpl::make();
    let logger = service.get_logger_api;
    logger.log("hello")
);