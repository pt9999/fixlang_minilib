module Main;
import Debug;

main : IO ();
main = (
    eval assert_eq(|_|"", 0x7E_U8.bit_and(0xE7_U8).bit_xor(0x42_U8).bit_or(0x01_U8), 0x25_U8);
    eval assert_eq(|_|"", 0x7E_I8.bit_and(0xE7_I8).bit_xor(0x42_I8).bit_or(0x01_I8), 0x25_I8);
    eval assert_eq(|_|"", 0x7E7E_U16.bit_and(0xE7E7_U16).bit_xor(0x4242_U16).bit_or(0x0101_U16), 0x2525_U16);
    eval assert_eq(|_|"", 0x7E7E_I16.bit_and(0xE7E7_I16).bit_xor(0x4242_I16).bit_or(0x0101_I16), 0x2525_I16);
    eval assert_eq(|_|"", 0x7E7E7E7E_U32.bit_and(0xE7E7E7E7_U32).bit_xor(0x42424242_U32).bit_or(0x01010101_U32), 0x25252525_U32);
    eval assert_eq(|_|"", 0x7E7E7E7E_I32.bit_and(0xE7E7E7E7_I32).bit_xor(0x42424242_I32).bit_or(0x01010101_I32), 0x25252525_I32);
    eval assert_eq(|_|"", 0x7E7E7E7E7E7E7E7E_U64.bit_and(0xE7E7E7E7E7E7E7E7_U64).bit_xor(0x4242424242424242_U64).bit_or(0x0101010101010101_U64), 0x2525252525252525_U64);
    eval assert_eq(|_|"", 0x7E7E7E7E7E7E7E7E_I64.bit_and(0xE7E7E7E7E7E7E7E7_I64).bit_xor(0x4242424242424242_I64).bit_or(0x0101010101010101_I64), 0x2525252525252525_I64);
    let _ = *println (0x9ABC_U16.bit_and(0x7777_U16).to_string);
    let _ = *println (0xFFFF_U16.bit_xor(0xAAAA_U16).to_string);
    let _ = *println (0x5555_U16.bit_or(0xAAAA_U16).to_string);
    let _ = *println (0xA5B6_U16.shift_left(2_U16).to_string); // 1010 0101 1011 0110 => 1001 0110 1101 1000 = 0x96D8 = 38616
    let _ = *println (0xA5B6_U16.shift_right(2_U16).to_string); // 1010 0101 1011 0110 => 0010 1001 0110 1101 = 0x296D = 10605
    let _ = *println (0xA5B6_I16.shift_right(2_I16).to_string); // 1010 0101 1011 0110 => 1110 1001 0110 1101 = 0xE96D = -5779
    pure()
);
