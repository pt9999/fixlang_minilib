// Session for TLS 1.3
//
// RFC 8446 - The Transport Layer Security (TLS) Protocol Version 1.3
// https://tex2e.github.io/rfc-translater/html/rfc8446.html
module Minilib.Crypto.Tls13.TLSSession;

import AsyncTask;
import Debug;

import Minilib.Crypto.Tls13.Types;
import Minilib.Monad.Random;
import Minilib.Crypto.Tls13.Connection;
import Minilib.Crypto.Tls13.HandshakeState;
import Minilib.Crypto.SecureRandom;
import Minilib.Monad.State;
import Minilib.Monad.Trans;
import Minilib.Monad.Error;
import Minilib.Net.Tcp;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;

type TLSSession = unbox struct {
    socket: Socket,
    var_secure_random: Var SecureRandom,
    handshake_state: HandshakeState,
};

impl TLSSession: GetRandomSource {
    type RandomGeneratorType TLSSession = SecureRandom;
    get_random_generator = @var_secure_random;
}

impl TLSSession: GetByteIO {
    type ByteIOType TLSSession = Socket;
    get_byte_io = TLSSession::@socket;
}

/*
trait [m: * -> *] GetSetHandshakeStateIF {
    get_hstate: m HandshakeState;
    set_hstate: HandshakeState -> m ();
}
*/

type StateTLSSession = StateT TLSSession IOFail;

namespace TLSSession {
    make: Socket -> IOFail TLSSession;
    make = |socket| (
        let secure_random = *SecureRandom::make;
        let var_secure_random = *Var::make(secure_random).lift;
        let handshake_state = *HandshakeState::make;
        pure $ TLSSession {
            socket: socket,
            var_secure_random: var_secure_random,
            handshake_state: handshake_state,
        }
    );

    get_hstate: StateTLSSession HandshakeState;
    get_hstate = get_state.map(@handshake_state);

    set_hstate: HandshakeState -> StateTLSSession ();
    set_hstate = |hstate| mod_state(set_handshake_state(hstate));

    lift_hstate: (HandshakeState -> StateTLSSession HandshakeState) -> StateTLSSession ();
    lift_hstate = |f| (
        let hstate = *get_hstate;
        let hstate = *f(hstate);
        set_hstate(hstate)
    );

    act_hstate: (HandshakeState -> StateTLSSession (a, HandshakeState)) -> StateTLSSession a;
    act_hstate = |f| (
        let hstate = *get_hstate;
        let (a, hstate) = *f(hstate);
        eval *set_hstate(hstate);
        pure $ a
    );

    send_client_hello: String -> StateTLSSession ();
    send_client_hello = |server_name| (
        eval *HandshakeState::start_handshake(server_name).lift_hstate;
        eval *HandshakeState::send_records.lift_hstate;
        pure()
    );

    recv_server_hello: StateTLSSession ();
    recv_server_hello = (
        eval *HandshakeState::recv_record.lift_hstate;
        pure()
    );

    recv_server_params: StateTLSSession ();
    recv_server_params = (
        eval *HandshakeState::recv_record.lift_hstate;
        if !(*get_hstate).is_after_finished {
            recv_server_params  // try again
        };
        eval *HandshakeState::send_records.lift_hstate;
        pure()
    );

    send_appdata: Array U8 -> StateTLSSession ();
    send_appdata = |appdata| (
        eval *HandshakeState::send_appdata(appdata).lift_hstate;
        eval *HandshakeState::send_records.lift_hstate;
        pure()
    );

    recv_appdata: StateTLSSession (Array U8);
    recv_appdata = (
        eval *HandshakeState::send_records.lift_hstate;
        eval *HandshakeState::recv_record.lift_hstate;
        let appdata = *HandshakeState::pop_appdata_received.act_hstate;
        if appdata.is_empty {
            // try again
            recv_appdata
        };
        pure $ appdata
    );

}
