module Main;

import Debug;

import Minilib.Monad.Writer;
import Minilib.Trait.Monoid;
import Minilib.Trait.Semigroup;
import Minilib.Trait.Comonad;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_writer_functor: TestCase;
test_writer_functor = (
    make_test("test_writer_functor") $ |_|
    let w = writer(["a"], 2);
    let w = w.map(add(1));
    let w = w.map(to_string);
    assert_equal("eq", (["a"], "3"), w.run_writer)
);

test_writer_monad: TestCase;
test_writer_monad = (
    make_test("test_writer_monad") $ |_|
    let w = do {
        let x = *pure(2);
        let _ = *write(["a"]);
        let _ = *write(["b","c"]);
        pure(x + 1)
    };
    assert_equal("eq", (["a", "b", "c"], 3), w.run_writer)
);

main: IO ();
main = (
    [
        test_writer_functor,
        test_writer_monad,
        TestCase::empty
    ]
    .run_test_driver
);
