// SHA-256 secure hash function.
//
// Implemented from specification of FIPS PUB 180-4:
// https://csrc.nist.gov/files/pubs/fips/180-4/final/docs/fips180-4.pdf
//
// NOTE: FIPS 180-4 (2012) is superseded by FIPS 180-4 (2015), with the only change being
// made in the Applicability Clause. There are no changes to the technical specifications.
// FIPS 180-4 (2015):
// http://dx.doi.org/10.6028/NIST.FIPS.180-4
//
module Minilib.Crypto.SHA256;


import Minilib.Encoding.Binary;

// `SHA256::digest(bytes)` computes SHA-256 secure hash function of `bytes`.
digest: Array U8 -> Array U8;
digest = |bytes| (
    SHA256::empty.update(bytes).finalize
);

// SHA-256 hasher.
// Usually it is sufficient to simply call `SHA256:digest(bytes)` without using this structure.
type SHA256 = unbox struct {
    hash: Array U32,
    msglen: U64,
    msgbuf: Array U8
};

// An empty SHA-256 hasher.
empty: SHA256;
empty = SHA256 {
    hash: _init_hash,
    msglen: 0_U64,
    msgbuf: Array::empty(64)
};

// `sha256.update(bytes)` processes `bytes`, and updates its internal state.
update: Array U8 -> SHA256 -> SHA256;
update = |bytes, sha256| (
    sha256._update_inner(bytes, bytes.get_size.to_U64)
);

// `sha256._update_inner(input, msglen_inc)` updates the message buffer with input.
// And it increments the message length by `msglen_inc`.
// When the message buffer is full (64 bytes), it updates hash with the message
// and clears the messsage buffer.
_update_inner: Array U8 -> U64 -> SHA256 -> SHA256;
_update_inner = |input, msglen_inc, sha256| (
    let n_input = input.get_size;
    let n_msgbuf = 64;
    let sha256 = loop(
        (sha256, 0), |(sha256, i_input)|
        if i_input >= n_input {
            break $ sha256
        };
        let sha256 = sha256.mod_msgbuf(push_back(input.@(i_input)));
        let i_input = i_input + 1;
        if sha256.@msgbuf.get_size < n_msgbuf {
            continue $ (sha256, i_input)
        };
        let message = ByteBuffer::make(sha256.@msgbuf, ByteOrder::big_endian()).to_u32_array;
        //let message = U32_U8::convert(sha256.@msgbuf, ByteOrder::big_endian());
        let sha256 = sha256.mod_hash(_update_hash(message));
        let sha256 = sha256.mod_msgbuf(truncate(0));
        continue $ (sha256, i_input)    
    );
    let sha256 = sha256.mod_msglen(|len| len + msglen_inc);
    sha256
);

// `sha256.finalize` retrieves a final SHA-256 hash value.
finalize: SHA256 -> Array U8;
finalize = |sha256| (
    // 5.1 Padding the Message 
    let sha256 = sha256._update_inner([0x80_U8], 0_U64);
    let sha256 = loop(
        sha256, |sha256|
        if sha256.@msgbuf.get_size == 448/8 {
            break $ sha256
        };
        continue $ sha256._update_inner([0x00_U8], 0_U64)
    );
    let msglen_bits: U64 = sha256.@msglen * 8_U64;
    let buf = ByteBuffer::fill(8, 0_U8, ByteOrder::big_endian());
    let buf = buf.set_u64(0, msglen_bits);
    let sha256 = sha256._update_inner(buf.to_u8_array, 0_U64);

    eval assert(|_| "padding failed", sha256.@msgbuf.get_size == 0);

    let digest = ByteBuffer::from_u32_array(sha256.@hash, ByteOrder::big_endian()).to_u8_array;
    //let digest = U8_U32::convert(sha256.@hash, ByteOrder::big_endian());
    digest
);

//---------------------------------------------------------------
// implementation details
//---------------------------------------------------------------

// 2.2.2 Symbols and Operations 
// bitwise complement
_bit_not: U32 -> U32;
_bit_not = |x| x.bit_xor(0xFFFFFFFF_U32);

// rotate left
_rotl: U32 -> U32 -> U32;
_rotl = |n, x| (
    x.shift_left(n).bit_or(x.shift_right(32_U32 - n))
);

// rotate right
_rotr: U32 -> U32 -> U32;
_rotr = |n, x| (
    x.shift_right(n).bit_or(x.shift_left(32_U32 - n))
);

// shift right
_shr: U32 -> U32 -> U32;
_shr = |n, x| (
    x.shift_right(n)
);

// 4.1.2 SHA-224 and SHA-256 Functions
_ch: U32 -> U32 -> U32 -> U32; 
_ch = |x, y, z| (
    x.bit_and(y).bit_xor(x._bit_not.bit_and(z)) 
);

_maj: U32 -> U32 -> U32 -> U32; 
_maj = |x, y, z| (
    x.bit_and(y).bit_xor(x.bit_and(z)).bit_xor(y.bit_and(z))
);

_large_sigma_0: U32 -> U32; 
_large_sigma_0 = |x| (
    x._rotr(2_U32).bit_xor(x._rotr(13_U32)).bit_xor(x._rotr(22_U32))
);

_large_sigma_1: U32 -> U32; 
_large_sigma_1 = |x| (
    x._rotr(6_U32).bit_xor(x._rotr(11_U32)).bit_xor(x._rotr(25_U32))
);

_small_sigma_0: U32 -> U32; 
_small_sigma_0 = |x| (
    x._rotr(7_U32).bit_xor(x._rotr(18_U32)).bit_xor(x._shr(3_U32))
);

_small_sigma_1: U32 -> U32; 
_small_sigma_1 = |x| (
    x._rotr(17_U32).bit_xor(x._rotr(19_U32)).bit_xor(x._shr(10_U32))
);


// 4.2.2 SHA-224 and SHA-256 Constants

_k: Array U32;
_k = [
    0x428a2f98_U32, 0x71374491_U32, 0xb5c0fbcf_U32, 0xe9b5dba5_U32, 0x3956c25b_U32, 0x59f111f1_U32, 0x923f82a4_U32, 0xab1c5ed5_U32,
    0xd807aa98_U32, 0x12835b01_U32, 0x243185be_U32, 0x550c7dc3_U32, 0x72be5d74_U32, 0x80deb1fe_U32, 0x9bdc06a7_U32, 0xc19bf174_U32,
    0xe49b69c1_U32, 0xefbe4786_U32, 0x0fc19dc6_U32, 0x240ca1cc_U32, 0x2de92c6f_U32, 0x4a7484aa_U32, 0x5cb0a9dc_U32, 0x76f988da_U32,
    0x983e5152_U32, 0xa831c66d_U32, 0xb00327c8_U32, 0xbf597fc7_U32, 0xc6e00bf3_U32, 0xd5a79147_U32, 0x06ca6351_U32, 0x14292967_U32,
    0x27b70a85_U32, 0x2e1b2138_U32, 0x4d2c6dfc_U32, 0x53380d13_U32, 0x650a7354_U32, 0x766a0abb_U32, 0x81c2c92e_U32, 0x92722c85_U32,
    0xa2bfe8a1_U32, 0xa81a664b_U32, 0xc24b8b70_U32, 0xc76c51a3_U32, 0xd192e819_U32, 0xd6990624_U32, 0xf40e3585_U32, 0x106aa070_U32,
    0x19a4c116_U32, 0x1e376c08_U32, 0x2748774c_U32, 0x34b0bcb5_U32, 0x391c0cb3_U32, 0x4ed8aa4a_U32, 0x5b9cca4f_U32, 0x682e6ff3_U32,
    0x748f82ee_U32, 0x78a5636f_U32, 0x84c87814_U32, 0x8cc70208_U32, 0x90befffa_U32, 0xa4506ceb_U32, 0xbef9a3f7_U32, 0xc67178f2_U32
];

// 5.3 Setting the Initial Hash Value (H(0))
// 5.3.3 SHA-256
_init_hash: Array U32;
_init_hash = (
    Array::empty(8)
    .push_back(0x6a09e667_U32)
    .push_back(0xbb67ae85_U32)
    .push_back(0x3c6ef372_U32)
    .push_back(0xa54ff53a_U32)
    .push_back(0x510e527f_U32)
    .push_back(0x9b05688c_U32)
    .push_back(0x1f83d9ab_U32)
    .push_back(0x5be0cd19_U32)
);

// 6.2.2 SHA-256 Hash Computation
_update_hash: Array U32 -> Array U32 -> Array U32;
_update_hash = |message, hash| (
    eval assert (|_| "invalid size: message", message.get_size == 16);
    eval assert (|_| "invalid size: hash", hash.get_size == 8);
    let old_hash = hash;

    let w = Array::empty(64);
    let w = loop(
        (w, 0), |(w, t)|
        if t >= 64 { 
            break $ w
        };
        if t < 16 { 
            let w = w.push_back(message.@(t));
            continue $ (w, t + 1)
        };
        let tmp = _small_sigma_1(w.@(t-2)) + w.@(t-7) + _small_sigma_0(w.@(t-15)) + w.@(t-16);
        let w = w.push_back(tmp);
        continue $ (w, t + 1)
    );

    let hash = loop(
        (hash, 0), |(hash, t)|
        if t >= 64 {
            break $ hash
        };
        let a = hash.@(0);
        let b = hash.@(1);
        let c = hash.@(2);
        let d = hash.@(3);
        let e = hash.@(4);
        let f = hash.@(5);
        let g = hash.@(6);
        let h = hash.@(7);

        let tmp1 = h + _large_sigma_1(e) + _ch(e,f,g) + _k.@(t) + w.@(t);
        let tmp2 = _large_sigma_0(a) + _maj(a,b,c);
        let h = g;
        let g = f;
        let f = e;
        let e = d + tmp1;
        let d = c;
        let c = b;
        let b = a;
        let a = tmp1 + tmp2;
        let hash = hash
            .set(0, a)
            .set(1, b)
            .set(2, c)
            .set(3, d)
            .set(4, e)
            .set(5, f)
            .set(6, g)
            .set(7, h);
        continue $ (hash, t + 1)
    );
    let hash = loop (
        (hash, 0), |(hash, i)|
        if i >= 8 { break $ hash };
        let hash = hash.set(i, hash.@(i) + old_hash.@(i));
        continue $ (hash, i + 1)
    );
    hash
);
