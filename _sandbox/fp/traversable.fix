//module Minilib.Trait.Traversable;
module Main;

trait [f : *->*] f : Applicative {
    pure_a: a -> f a;
    app: f (a -> b) -> f a -> f b;
}

lift_a2: [f: Functor, f: Applicative] (a -> b -> c) -> f a -> f b -> f c;
lift_a2 = |f, xs, ys| app(xs.map(f), ys);

// Applicative だが Monad ではないものが少ない

impl [e: Zero] Tuple2 e: Applicative {
    pure_a = |a| (zero, a);
    app = |(e, f), (_, a)| (e, f(a));
}

impl IO: Applicative {
    pure_a = pure;
    app = |fs, xs| (
        let f = *fs;
        let x = *xs;
        pure $ f(x)
    );
}

impl Array: Applicative {
    pure_a = pure;
    app = |fs, xs| (
        let f = *fs;
        let x = *xs;
        pure $ f(x)
    );
}

impl Iterator: Applicative {
    pure_a = pure;
    app = |fs, xs| (
        let f = *fs;
        let x = *xs;
        pure $ f(x)
    );
}

trait [t: * -> *] t: Traversable {
    traverse: [f: Functor, f: Applicative] (a -> f b) -> t a -> f (t b);
    map_m : [m : Monad] (a -> m b) -> t a -> m (t b);
}

impl Array: Traversable {
    traverse = |g: a -> f b, array| (
        array.to_iter.fold(
            pure_a(Array::empty(array.get_size)), |output, a|
            lift_a2(push_back, g(a), output);
        )
    );
    map_m = |f, array| array.to_iter.fold_m(
        Array::empty(array.get_size), |output, a|
        let b = *f(a);
        pure $ output.push_back(b)
    );
}

test_traverse: IO ();
test_traverse = (
    let arr = Iterator::range(0, 5).to_array;
    let g = |i| (42, "a" + i.to_string);
    let output = arr.traverse(g);
    println(output.to_string)
);

main: IO ();
main = (
    test_traverse
);
