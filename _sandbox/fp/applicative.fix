module Minilib.Trait.Applicative;

// A trait which can create a lifted value,
// and apply a lifted function to a lifted value.
//
// NOTE: If `f` implements both `Applicative` and `Monad`,
// the following equations should be hold.
// - `pure_a(x) == pure(x)`
// - `app_a(fs,xs) == app(fs,xs)`
//
// NOTE: With `app` and `pure`, you can implement `Applicative` from `Monad`.
trait [f : *->*] f : Applicative {
    // Creates a lifted value from a value.
    pure_a: a -> f a;
    // Applies a lifted function to a lifted value.
    app_a: f (a -> b) -> f a -> f b;
}

// Applies a one-argument function to a lifted value.
//
// NOTE: If `f` implements both `Applicative` and `Functor`,
// the following equations should be hold.
// - `lift_a(f, xs) == map(f, xs)`.
//
// NOTE: With `lift_a`, you can implement `Functor` from `Applicative`.
lift_a: [f: Applicative] (a -> b) -> f a -> f b;
lift_a = pure_a >> app_a;

// Applies a two-argument function to two lifted values.
lift_a2: [f: Applicative] (a -> b -> c) -> f a -> f b -> f c;
lift_a2 = |f, xs, ys| app_a(xs.lift_a(f), ys);

// Applies a lifted function to a lifted value.
app: [m: Monad] m (a -> b) -> m a -> m b;
app = |fs, xs| (
    let f = *fs;
    let x = *xs;
    pure $ f(x)
);

impl Array: Applicative {
    pure_a = pure;
    app_a = app;
}

impl Arrow a: Applicative {
    pure_a = pure;
    app_a = app;
}

impl IO: Applicative {
    pure_a = pure;
    app_a = app;
}

impl IOFail: Applicative {
    pure_a = pure;
    app_a = app;
}

impl Iterator: Applicative {
    pure_a = pure;
    app_a = app;
}

impl Option: Applicative {
    pure_a = pure;
    app_a = app;
}

impl Result e: Applicative {
    pure_a = pure;
    app_a = app;
}
