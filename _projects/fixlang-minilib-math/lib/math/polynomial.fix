// Polynomial of one variable, for example `x^2 + 2x + 1`. The coefficients can be any ring.
module Minilib.Math.Polynomial;


import Minilib.Math.Types;
import Minilib.Math.Ring;
import Minilib.Math.Euclid;
import Minilib.Math.Modular;

// A structure that represents a polynomial over a ring.
// The coefficient array is ascending order of degree.
// For example, `[1,2,3]` means a polynomial `3x^2 + 2x + 1`.
type Polynomial a = unbox struct {
    coeff: Array a      // The coefficient array
};

// `Polynomial::make(coeff)` creates a polynomial from coefficients.
// For example, `Polynomial::make([1,2,3])` makes a polynomial `3x^2 + 2x + 1`.
// For polynomials with degree greater than zero, the coefficient array is
// truncated so that the coefficient of highest degree is not zero.
make: [a: Ring] Array a -> Polynomial a;
make = |coeff| (
    // remove last zeros
    let coeff = loop(
        coeff, |coeff|
        let n = coeff.get_size;
        if n <= 1 { break $ coeff };
        if coeff.@(n - 1) != zero { break $ coeff };
        let coeff = coeff.pop_back;
        continue $ coeff
    );
    eval assert(|_| "invalid size", coeff.get_size >= 1);
    Polynomial { coeff: coeff }
);

// Synonym for `Polynomial::make`.
polynomial: [a: Ring] Array a -> Polynomial a;
polynomial = make;

// `a.at_degree(n)` creates a polynomial `a * x ^ n`.
at_degree: [a: Ring] I64 -> a -> Polynomial a;
at_degree = |n, a| (
    eval assert(|_| "invalid power", n >= 0);
    let coeff = Array::from_map(n + 1, |i|
        if i == n { a } else { zero }
    );
    Polynomial::make(coeff)
);

// `f.get(i)` returns the coefficient of degree `i`.
get: [a: Ring] I64 -> Polynomial a -> a;
get = |i, f| (
    if i < 0 || f.@coeff.get_size <= i { zero };
    f.@coeff.@(i)
);

// `f.set(i, a)` sets the coefficient of degree `i`.
set: [a: Ring] I64 -> a -> Polynomial a -> Polynomial a;
set = |i, a, f| (
    if i < 0 { f };
    let coeff = loop(
        f.@coeff, |coeff|
        if i < coeff.get_size { break $ coeff };
        continue $ coeff.push_back(zero)
    );
    let coeff = coeff.set(i, a);
    Polynomial::make(coeff)
);

// `f.get_degree` returns the degree of a polynomial `f`.
get_degree: Polynomial a -> I64;
get_degree = |f| f.@coeff.get_size - 1;

// `divmod(num, den)` calculates a quotient `quo = num / den`
// and a reminder `rem = num % den`.
// Returns `(quo, rem)`.
// The type of coefficients must be a field.
// If the division of the field does not fulfill the requirement
// (ie. `forall a b, a == a / b * b`),
// this function may return an incorrect result.
divmod: [a: Field] Polynomial a -> Polynomial a -> (Polynomial a, Polynomial a);
divmod = |num, den| (
    eval assert (|_| "Divide by zero", den != zero);
    let (quo, rem) = loop(
        (zero, num), |(quo, num)|
        if num == zero { break $ (quo, num) };
        let num_degree = num.get_degree;
        let den_degree = den.get_degree;
        if num_degree < den_degree { break $ (quo, num) };
        let n = num.get(num_degree);
        let d = den.get(den_degree);
        let q = n / d;
        let qd = q * d;
        //eval if n != qd {
        //    debug_eprintln("has reminder: " + (n, qd).to_string)
        //} else {() };
        let q = (n / d).at_degree(num_degree - den_degree);
        let quo = quo + q;
        let rem = num - q * den;
        let residue = rem.get(num.get_degree);
        //eval if rem.get_degree >= num.get_degree && num.get_degree > 0 {
        //    debug_eprintln("has reminder !! "+(rem.get_degree, num.get_degree).to_string)
        //} else {() };
        //eval if residue != zero { debug_eprintln("residue="+residue.to_string)} else {()};
        let rem = rem.set(num.get_degree, zero);
        continue $ (quo, rem)
    );
    (quo, rem)
);

// Converts a polynomial to a string without simplification.
_to_string_full: [a: Ring, a: ToString] Polynomial a -> String;
_to_string_full = |x| (
    let degree = x.get_degree;
    Iterator::range(0, degree + 1).map(|i|
        x.get(i).to_string + "x^" + i.to_string
    ).join(" + ")
);

// Converts a polynomial to a string with simplification.
_to_string_simple: [a: Ring, a: ToString] Polynomial a -> String;
_to_string_simple = |f| (
    let degree = f.get_degree;
    let str = Iterator::range(0, degree + 1).map(|i|
        let c = f.get(i);
        if c == zero { "" };
        let str_c = if c == one && i > 0 { "" } else { c.to_string };
        let str_x_i = if i == 0 { "" }
        else if i == 1 { "x" }
        else { "x^" + i.to_string };
        str_c + str_x_i
    )
    .filter(|s| s != "")
    .reverse
    .join(" + ");
    if str == "" { f.get(0).to_string };
    str
);

impl [a: Ring, a: ToString] Polynomial a: ToString {
    to_string = _to_string_simple;
}

impl [a: Ring] Polynomial a: Eq {
    eq = |x, y| (
        x.@coeff == y.@coeff
    );
}

impl [a: Ring] Polynomial a: Zero {
    zero = Polynomial::make([zero]);
}

impl [a: Ring] Polynomial a: One {
    one = Polynomial::make([one]);
}

impl [a: Ring] Polynomial a: Neg {
    neg = |x| (
        Polynomial::make(x.@coeff.map(neg))
    );
}

impl [a: Ring] Polynomial a: Add {
    add = |x, y| (
        let degree = max(x.get_degree, y.get_degree);
        let coeff = Array::from_map(degree + 1, |i| x.get(i) + y.get(i));
        Polynomial::make(coeff)
    );
}

impl [a: Ring] Polynomial a: Sub {
    sub = |x, y| (
        let degree = max(x.get_degree, y.get_degree);
        let coeff = Array::from_map(degree + 1, |i| x.get(i) - y.get(i));
        Polynomial::make(coeff)
    );
}

impl [a: Ring] Polynomial a: Mul {
    mul = |x, y| (
        let x_degree = x.get_degree;
        let y_degree = y.get_degree;
        let degree = x_degree + y_degree;
        let iter = do {
            pure $ (*Iterator::range(0, x_degree + 1), *Iterator::range(0, y_degree + 1))
        };
        let coeff = Array::fill(degree + 1, zero);
        let coeff = iter.fold(
            coeff, |coeff, (ix, iy)|
            coeff.mod(ix + iy, add(x.get(ix) * y.get(iy)))
        );
        Polynomial::make(coeff)
    );
}

impl [a: Field] Polynomial a: Div {
    div = |x, y| (
        let (quo, rem) = divmod(x, y);
        quo
    );
}

impl [a: Field] Polynomial a: Rem {
    rem = |x, y| (
        let (quo, rem) = divmod(x, y);
        rem
    );
}

//--------------------------------------------------
//  Polynomial over Galois Field (GF(p))
//  For details, see [Wikipedia: Finite field arithmetic](https://en.wikipedia.org/wiki/Finite_field_arithmetic)
//--------------------------------------------------

// Checks whether it is a primitive polynomial.
is_primitive: Polynomial (Modular I64) -> Bool;
is_primitive = |f| (
    let m = f.get_degree;
    if f.get(0) == zero { false };  // TODO ok?
    if f.get(m) != one { false };
    let p = f.get(m).@modulus;
    let q = p.pow_by_U64(m.to_U64);
    let a = polynomial([modulo(0, p), modulo(1, p)]);
    loop(
        (a, 1), |(x, i)|
        //eval debug_println((a, i, x, f).format("     {}^{} = {} (modulo {})"));
        if x == zero {
            break $ false
        };
        if x == one {
            break $ i == q - 1
        };
        if i == q - 1 {
            break $ false
        };
        let x = (x * a) % f;
        continue $ (x, i + 1)
    )
);

// `generate(p,m)` generates polynomials of degree `m` or lower in GF(p).
generate: I64 -> I64 -> Iterator (Polynomial (Modular I64));
generate = |p, m| (
    let inner = fix $ |inner, m| (
        if m < 0 {
            pure $ Iterator::empty
        };
        let coeff = *inner(m - 1);
        Iterator::range(0, p).map(|i|
            coeff.push_front(modulo(i, p))
        )
    );
    inner(m).map(to_array >> polynomial)
);

// `generate_primitive_polynomials(p, m)` generates primitive polynomials of degree `m` in GF(p).
generate_primitive_polynomials: I64 -> I64 -> Iterator (Polynomial (Modular I64));
generate_primitive_polynomials = |p, m| (
    Polynomial::generate(p, m)
    .filter(|f| f.get_degree == m)
    .filter(is_primitive)
);

// `f.subst(x)` substitutes the indeterminate of a polynomial with `x`.
subst: I64 -> Polynomial (Modular I64) -> I64;
subst = |x, f| (
    let coeff = f.@coeff.to_iter.map(nonneg);
    coeff.zip(Iterator::count_up(0)).map(|(c, i)|
        c.@value * x.pow_by_U64(i.to_U64)
    )
    .fold(0, add)
);
