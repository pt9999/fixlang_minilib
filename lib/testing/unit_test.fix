// Unit Test Framework
module UnitTest;

import Debug;

// If _TEST_VERBOSE is false, only failed testcases will be reported.
_TEST_VERBOSE: Bool;
_TEST_VERBOSE = false;

// TestCase is a type that counts the number of successful and failed tests.
type TestCase = Lazy (IOFail (I64, I64));

namespace TestCase {
    // A test case where the number of successes and number of failures are both equal to 0.
    // Can be used as a placeholder at the end of an array of test cases.
    empty: TestCase;
    empty = |_| pure $ (0, 0);
}

// Executes all test cases and prints the results (number of passes and number of failures).
// Exit with exitcode=1 if any test failed or any error occured, exitcode=0 otherwise.
run_test_driver: Array TestCase -> IO ();
run_test_driver = |tests| (
    let exit = |exitcode| (
        let _ = CALL_C[() exit(I64), exitcode];
        pure()
    );
    do {
        let _ = *(lift $ eprintln ("Starting Test Driver"));
        let test: TestCase = tests.run_tests;
        let (success, fail) = *(test());
        let _ = *(lift $ eprintln ("SUCCESS: " + success.to_string + " FAIL: " + fail.to_string));
        pure $ if fail == 0 { 0 } else { 1 }
    }.try(|err|
        let _ = *(eprintln ("FATAL ERROR: " + err));
        pure $ 1
    )
    .bind(|exitcode| exit(exitcode))
);

// Executes all test cases and treat the results as one test case.
run_tests: Array (TestCase) -> TestCase;
run_tests = |tests, _| (
    tests.to_iter.fold_m(
        (0, 0), |(success_total, fail_total), test|
        let (success, fail) = *(test());
        pure $ (success_total + success, fail_total + fail)
    )
);

// Creates a named test case from a lazy `IOFail ()`.
make_test: String -> Lazy (IOFail ()) -> TestCase;
make_test = |test_name, body, _| (
    let verbose = |io| (
        if _TEST_VERBOSE { io } else { pure() }
    );
    eval *(lift $ verbose $ eprintln("=== " + test_name + " ==="));
    do {
        let _ = *(body());
        let _ = *(lift $ verbose $ eprintln("[SUCCESS] " + test_name));
        pure $ (1, 0)
    }.try(|err|
        eval *(eprintln("error: " + err));
        eval *(eprintln("[FAIL] " + test_name));
        pure $ (0, 1)
    ).lift
);


//-------------------------
// Assertions for testcases
//-------------------------

// Verifies that the boolean value is true. If the boolean value is false, the test will fail with the specified message.
assert_true : String -> Bool -> IOFail ();
assert_true = |msg, b| (
    if !b {
        throw $ "assert_true: " + msg
    };
    pure()
);

// Verifies that two values are equal. If the values are different, the test will fail with the specified message.
assert_equal : [a: Eq, a: ToString] String -> a -> a -> IOFail ();
assert_equal = |msg, lhs, rhs| (
    if lhs != rhs {
        throw $ "assert_equal: " + msg + ": lhs='" + lhs.to_string + "' rhs='" + rhs.to_string + "'"
    };
    pure()
);

// Verifies that two values are not equal. If the values are equal, the test will fail with the specified message.
assert_not_equal : [a: Eq, a: ToString] String -> a -> a -> IOFail ();
assert_not_equal = |msg, lhs, rhs| (
    if lhs == rhs {
        throw $ "assert_not_equal: " + msg + ": lhs='" + lhs.to_string + "' rhs='" + rhs.to_string + "'"
    };
    pure()
);
