module Main;

import Minilib.Functor.ZipList;
import Minilib.Trait.Applicative;
import Minilib.Testing.UnitTest;

test_ziplist_functor: TestCase;
test_ziplist_functor = (
    make_test("test_ziplist_functor") $ |_|
    let xs = ZipList::from_array $ [1, 2, 3];
    let xs = xs.map(to_string);
    assert_equal("eq", ["1", "2", "3"], xs.to_array)
);

test_ziplist_pure_a: TestCase;
test_ziplist_pure_a = (
    make_test("test_ziplist_pure_a") $ |_|
    let xs: ZipList I64 = pure_a(42);
    assert_equal("eq", [42], xs.to_array)
);

test_ziplist_app_a: TestCase;
test_ziplist_app_a = (
    make_test("test_ziplist_app_a") $ |_|
    let fs: ZipList (I64 -> I64) = ZipList::from_array $ [
        add(3), add(4), add(5)
    ];
    let xs: ZipList I64 = ZipList::from_array $ [10, 20];
    let ys: ZipList I64 = app_a(fs, xs);
    assert_equal("eq", [13, 24], ys.to_array)
);

test_ziplist_lift_a2: TestCase;
test_ziplist_lift_a2 = (
    make_test("test_ziplist_lift_a2") $ |_|
    let xs: ZipList I64 = ZipList::from_array $ [10, 20, 30];
    let ys: ZipList I64 = ZipList::from_array $ [3, 4, 5, 6, 7];
    let zs: ZipList I64 = lift_a2(add, xs, ys);
    assert_equal("eq", [13, 24, 35], zs.to_array)
);

main: IO ();
main = (
    [
        test_ziplist_functor,
        test_ziplist_pure_a,
        test_ziplist_app_a,
        test_ziplist_lift_a2,
    ]
    .run_test_driver
);
