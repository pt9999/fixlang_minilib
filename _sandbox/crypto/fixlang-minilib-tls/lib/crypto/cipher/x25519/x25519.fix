/**
    X25519

    RFC7748 Elliptic Curves for Security
    https://datatracker.ietf.org/doc/html/rfc7748
    
*/
module Minilib.Crypto.Cipher.X25519.X25519;

import Character;

import Minilib.Common.Assert;
import Minilib.Monad.Random;
import Minilib.Crypto.SHA256;
import Minilib.Crypto.SHA512;
import Minilib.Encoding.Binary;
//import Minilib.Math.Modular;
import Minilib.Math.Montgomery;
import Minilib.Math.BigInt;
import Minilib.Math.BigNat;
import Minilib.Math.Types;
import Minilib.Monad.Error;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;

// A type that represents an integer.
type ECInt = BigInt;

namespace ECInt {
    decode_little_endian: Array U8 -> I64 -> ECInt;
    decode_little_endian = |b, bits| (
        Iterator::range(0, (bits + 7) / 8)
        .map(|i| 
            let b_i = b.@(i).to_I64;
            BigInt::from_I64(b_i).shift_left((8 * i).to_U64)
        )
        .sum
    );

    decode_u_coordinate: Array U8 -> I64 -> ECInt;
    decode_u_coordinate = |u, bits| (
        let u = if bits % 8 != 0 {
            let mask = 1.shift_left(bits % 8) - 1;
            u.mod(u.get_size - 1, bit_and(mask.to_U8)
        } else { u };
        decode_little_endian(u, bits)
    ); 

    encode_u_coordinate: ECInt -> I64 -> Array U8;
    encode_u_coordinate = |u, bits| (
        //let u = u % p;
        Array::from_map((bits + 7) / 8, |i|
            u.shift_right((8 * i).to_U64).to_U64.to_U8
        )
    );

    // Converts a hex string to an ECInt.
    from_string_hex: String -> Result ErrMsg ECInt;
    from_string_hex = |str| (
        let bytes: Array U8 = *FromStringHex::from_string_hex(str);
        from_bytes(bytes)
    );

    // Converts an ECInt to a byte array with specified length.
    to_n_bytes: I64 -> ECInt -> Array U8;
    to_n_bytes = |mlen, a| (
        let bytes = a.ToBytes::to_bytes;    // use ToBytes::to_bytes
        let n = bytes.get_size;
        if n < mlen {
            Array::fill(mlen - n, 0_U8).append(bytes)
        } else if n > mlen {
            bytes.get_sub(n - mlen, n)
        } else {
            bytes
        }
    );

    // Converts an ECInt to a hex string.
    to_string_hex: ECInt -> String;
    to_string_hex = |a| (
        a.to_bytes.to_string_hex
    );

    // Gets an octet string length.
    get_mlen: ECInt -> I64;
    get_mlen = |q| (
        let k = q.@nat._bit_length.to_I64;      // 2^(k-1) <= q < 2^k
        let mlen = (k + 7) / 8;
        mlen
    );

    // `repeat_by_ECInt(op, x, a, n)` calculates `x.op(a).op(a)...` for `n` times.
    // `op` is an associative binary operation.
    repeat_by_ECInt: (a -> a -> a) -> a -> a -> ECInt -> a;
    repeat_by_ECInt = repeat_by_BigInt;

    // Generates random ECInt `r` such that `begin <= r && r < end`.
    generate_ECInt_range: [m: MonadRandom] ECInt -> ECInt -> m ECInt;
    generate_ECInt_range = |begin, end| (
        if begin > end {
            generate_ECInt_range(end, begin)      // swap range and retry
        };
        let n = end - begin;
        assert_lazy(|_| "invalid range", n > zero) $ |_|
        let num_bits = n.@nat.get_size * BigNat::_log2_base.to_I64;
        let bytes = *random_bytes(num_bits / 8);
        let r = from_bytes(bytes).as_ok;
        if r >= ((one: ECInt).shift_left(num_bits.to_U64) / n) * n {
            generate_ECInt_range(begin, end)      // try again
        };
        let r = r % n;
        let r = begin + r;
        pure $ r
    );
}

// a number in F(p) where p is an odd prime number
type ECField = Montgomery;

namespace ECField {

    // `ECField::make(a,ps)` creates a number `a` in `F(p)`.
    make: ECInt -> MontScheme -> ECField;
    make = Montgomery::make;

    from_ECInt: ECInt -> ECField;
    from_ECInt = |a| (
        Montgomery::from_BigInt(a)
    );

    to_ECInt: ECField -> ECInt;
    to_ECInt = |a| (
        let a = a.nonneg;               // 1..(q-1)
        a.to_BigInt
    );

    from_I64: I64 -> ECField;
    from_I64 = |i64| (
        Montgomery::from_I64(i64)
    );

    to_bytes: ECField -> Array U8;
    to_bytes = |a| (
        let a = a.nonneg;               // 1..(q-1)
        let q = a.get_modulus;
        let mlen = q.get_mlen;
        a.to_BigInt.to_n_bytes(mlen)
    );
}

type ECParam = box struct {
    id: String,    // a unique id
    bits: I64,
    ps: MontScheme, // Montgomery scheme for `p`
};

namespace ECParam {
    curve25519: ECParam;
    curve25519 = ECParam {
        id: "curve25519",
        bits: 255,
        ps: MontScheme::make(
            256_U64,
            one.shift_left(255_U64) - ECInt::from_I64(19)
        ),
    };
}

x25519: ECInt -> ECField -> ECField;
x25519 = |k, u| (
    let x_1: ECField = u;
    let x_2: ECField = one;
    let z_2: ECField = zero;
    let x_3: ECField = u;
    let z_3: ECField = one;
    let swap = false; 
);
