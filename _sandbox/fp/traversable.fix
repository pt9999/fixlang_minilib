module Minilib.Trait.Traversable;

// A trait for types which can traverse all elements with `Monad`.
trait [t: * -> *] t: Traversable {
    // `ta.sequence` performs all elements sequentially and collects the results.
    // Similar to Haskell's `sequence` function.
    sequence: [m: Monad] t (m a) -> m (t a);
}

// `ta.traverse(f)` maps each element with `f`, then performs all elements sequentially and collects the results.
// `traverse` is a synonym of `map_m`.
traverse: [m: Monad, t: Traversable, t: Functor] (a -> m b) -> t a -> m (t b);
traverse = map_m;

// `ta.map_m(f)` maps each element with `f`, then performs all elements sequentially and collects the results.
// Similar to Haskell's `mapM` function.
//
// Example:
// ```
// let ios = ...Array of IO operations...;
// let tasks = *ios.map_m(AsyncIOTask::make);
// let results = *tasks.map_m(get);
// ==> (tasks are created and started in parallel, then the results of tasks are collected)
// ```
map_m: [m: Monad, t: Traversable, t: Functor] (a -> m b) -> t a -> m (t b);
map_m = |f, ta| ta.map(f).sequence;

// `ta.foreach_m(f)` maps each element with `f`, then performs all elements sequentially and forgets the results.
// Similar to Haskell's `mapM` function, but the results are discarded.
//
// Example:
// ```
// ["hello", "world"].foreach_m(println);;
// ==> ("hello\nworld\n" is printed)
// ```
foreach_m: [m: Monad, t: Traversable, t: Functor] (a -> m ()) -> t a -> m ();
foreach_m = |f, ta| ta.map_m(f).bind(|_| pure());

impl Array: Traversable {
    sequence = |array| (
        array.to_iter.fold_m(
            Array::empty(array.get_size), |output, ma|
            pure $ output.push_back(*ma)
        )
    );
}

impl Iterator: Traversable {
    sequence = |iter| (
        let output = *iter.fold_m(
            [], |output, ma|
            pure $ output.push_back(*ma)
        );
        pure $ output.to_iter
    );
}

impl Option: Traversable {
    sequence = |opt| (
        match opt {
            none() => pure $ none(),
            some(ma) => pure $ some(*ma)
        }
    );
}

impl Result e: Traversable {
    sequence = |res| (
        match res {
            err(e) => pure $ err(e),
            ok(ma) => pure $ ok(*ma)
        }
    );
}

impl Tuple2 e: Traversable {
    sequence = |(e, ma)| (
        pure $ (e, *ma)
    );
}