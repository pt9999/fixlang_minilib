module Main;

import Random;

import Sandbox.NdArray;
import Sandbox.NdArray.Random;

import UnitTest;

test_empty: TestCase;
test_empty = (
    make_test("test_empty") $ |_|
    let ndarray: NdArray I64 = NdArray::empty;
    let _ = *assert_equal("data", [], ndarray.@data);
    let _ = *assert_equal("shape", [0], ndarray.@shape);
    pure()
);

test_make: TestCase;
test_make = (
    make_test("test_make") $ |_|
    let array = Iterator::range(0, 2*3*4).to_array;
    let ndarray = NdArray::make([2,3,4], array);
    let _ = *assert_equal("data", array, ndarray.@data);
    let _ = *assert_equal("shape", [2,3,4], ndarray.@shape);
    let _ = *assert_equal("(0,0,0)", 0, ndarray.get((0,0,0)));
    let _ = *assert_equal("(1,2,1)", 21, ndarray.get((1,2,1)));
    let ndarray2 = NdArray::from_array(array).reshape([2,3,4]);
    let _ = *assert_equal("ndarray2", ndarray, ndarray2);
    pure()
);

test_scalar: TestCase;
test_scalar = (
    make_test("test_scalar") $ |_|
    let ndarray = NdArray::scalar(345);
    let _ = *assert_equal("data", [345], ndarray.@data);
    let _ = *assert_equal("shape", [1], ndarray.@shape);
    let _ = *assert_equal("(0)", 345, ndarray.get(0));
    pure()
);

test_from_array_iter: TestCase;
test_from_array_iter = (
    make_test("test_from_array_iter") $ |_|
    let iter = Iterator::range(0, 2*3*4);
    let array = iter.to_array;
    let ndarray = NdArray::make([2,3,4], array);
    let ndarray2 = NdArray::from_array(array).reshape([2,3,4]);
    let ndarray3 = NdArray::from_iter(iter).reshape([2,3,4]);
    let _ = *assert_equal("ndarray2", ndarray, ndarray2);
    let _ = *assert_equal("ndarray3", ndarray, ndarray3);
    pure()
);

test_fill: TestCase;
test_fill = (
    make_test("test_fill") $ |_|
    let ndarray = NdArray::fill([2,3,4], 123);
    let _ = *assert_equal("shape", [2,3,4], ndarray.@shape);
    let _ = *assert_equal("(0,0,0)", 123, ndarray.get((0,0,0)));
    let _ = *assert_equal("(1,2,1)", 123, ndarray.get((1,2,1)));
    pure()
);

test_zeros: TestCase;
test_zeros = (
    make_test("test_zeros") $ |_|
    let ndarray: NdArray F64 = NdArray::zeros([2,3,4]);
    let _ = *assert_equal("shape", [2,3,4], ndarray.@shape);
    let _ = *assert_equal("(0,0,0)", 0.0, ndarray.get((0,0,0)));
    let _ = *assert_equal("(1,2,1)", 0.0, ndarray.get((1,2,1)));
    pure()
);

test_arange: TestCase;
test_arange = (
    make_test("test_arange") $ |_|
    let ndarray = NdArray::arange(3, 6).map(to_F64);
    let _ = *assert_equal("shape", [3], ndarray.@shape);
    let _ = *assert_equal("(0)", 3.0, ndarray.get(0));
    let _ = *assert_equal("(2)", 5.0, ndarray.get(2));
    let ndarray = NdArray::arange(6, 3).map(to_F64);
    let _ = *assert_equal("shape", [0], ndarray.@shape);
    pure()
);

test_get_size: TestCase;
test_get_size = (
    make_test("test_get_size") $ |_|
    let ndarray = NdArray::fill([1,2,3,4,5], 11);
    let _ = *assert_equal("size", 120, ndarray.get_size);
    pure()
);

test_get_dim: TestCase;
test_get_dim = (
    make_test("test_get_dim") $ |_|
    let ndarray = NdArray::fill([1,2,3,4,5], 11);
    let _ = *assert_equal("dim", 5, ndarray.get_dim);
    pure()
);

test_get: TestCase;
test_get = (
    make_test("test_get") $ |_|
    let ndarray = NdArray::from_iter(Iterator::range(0, 120)).reshape([2,3,4,5]);
    let _ = *assert_equal("(0,2,2,2)", 52, ndarray.get((0,2,2,2)));
    let _ = *assert_equal("[0,2,2,2]", 52, ndarray.get([0,2,2,2]));
    let _ = *assert_equal("(1,2,3,4)", 119, ndarray.get((1,2,3,4)));
    let _ = *assert_equal("[1,2,3,4]", 119, ndarray.get([1,2,3,4]));
    pure()
);

test_set: TestCase;
test_set = (
    make_test("test_set") $ |_|
    let ndarray: NdArray I64 = NdArray::zeros([3,4,5]);
    let ndarray = loop(
        (ndarray, 0), |(ndarray, i)|
        if i >= 60 { break $ ndarray };
        let ndarray = ndarray.set((i/20, (i/5)%4, i%5), i);
        continue $ (ndarray, i + 1)
    );
    let ndarray2 = NdArray::arange(0, 60).reshape([3,4,5]);
    let _ = *assert_equal("eq", ndarray2, ndarray);

    let ndarray = NdArray::fill([3], 5);
    let ndarray = ndarray.set(2, 6);
    let _ = *assert_equal("eq", [5,5,6], ndarray.to_array);
    pure()
);

test_map: TestCase;
test_map = (
    make_test("test_map") $ |_|
    let ndarray_I64 = NdArray::from_array([1, 2, 3]);
    let ndarray_F64 = ndarray_I64.map(to_F64);
    let _ = *assert_equal("ndarray_F64", [1.0, 2.0, 3.0], ndarray_F64.to_array);
    let ndarray_String = ndarray_I64.map(to_string);
    let _ = *assert_equal("ndarray_String", ["1", "2", "3"], ndarray_String.to_array);
    pure()
);

test_neg: TestCase;
test_neg = (
    make_test("test_neg") $ |_|
    let a = NdArray::arange(1, 4);
    let a = -a;
    let _ = *assert_equal("eq", [-1, -2, -3], a.to_array);
    pure()
);

test_add: TestCase;
test_add = (
    make_test("test_add") $ |_|
    let a: NdArray I64 = NdArray::fill([3,2], 10);
    let _ = *assert_equal("eq", "[[10,10],[10,10],[10,10]]", a.to_string);
    let b = a + NdArray::fill([3,2], 5);
    let _ = *assert_equal("eq", "[[15,15],[15,15],[15,15]]", b.to_string);
    let b = a + NdArray::arange(1,7).reshape([3,2]);
    let _ = *assert_equal("eq", "[[11,12],[13,14],[15,16]]", b.to_string);
    let b = a + scalar(5);
    let _ = *assert_equal("eq", "[[15,15],[15,15],[15,15]]", b.to_string);
    let b = a + NdArray::from_array([6,7,8,9]);
    // broadcasting: a.@shape=[3,2], b.@shape=[4], (a+b).@shape=[3,4]
    let _ = *assert_equal("eq", "[[16,17,18,19],[16,17,18,19],[16,17,18,19]]", b.to_string);
    let b = a + NdArray::from_array([6,7,8,9]).reshape([2]);
    // broadcasting: a.@shape=[3,2], b.@shape=[2], (a+b).@shape=[3,2]
    let _ = *assert_equal("eq", "[[16,17],[16,17],[16,17]]", b.to_string);
    let b = a + NdArray::from_array([6,7,8,9]).reshape([2,1]);
    // broadcasting: a.@shape=[3,2], b.@shape=[2,1], (a+b).@shape=[3,2]
    let _ = *assert_equal("eq", "[[16,16],[17,17],[16,16]]", b.to_string);
    let b = a + NdArray::from_array([6,7,8,9]).reshape([2,2]);
    // broadcasting: a.@shape=[3,2], b.@shape=[2,2], (a+b).@shape=[3,2]
    let _ = *assert_equal("eq", "[[16,17],[18,19],[16,17]]", b.to_string);
    pure()
);

test_sub: TestCase;
test_sub = (
    make_test("test_sub") $ |_|
    let a: NdArray I64 = NdArray::arange(0,100).reshape([10,10]).get_sub(([5,8], [2,4]));
    let _ = *assert_equal("eq", "[[52,53],[62,63],[72,73]]", a.to_string);
    let b = a - NdArray::from_array([2,4,6,8,10,12]).reshape([2,3]).transpose; // [[2,8],[4,10],[6,12]]
    let _ = *assert_equal("eq", "[[50,45],[58,53],[66,61]]", b.to_string);
    pure()
);

unittest: IO ();
unittest = (
    [
        test_empty,
        test_make,
        test_scalar,
        test_from_array_iter,
        test_fill,
        test_zeros,
        test_arange,
        test_get_size,
        test_get_dim,
        test_get,
        test_set,

        test_map,
        test_neg,
        test_add,
        test_sub,
        TestCase::empty
    ]
    .run_test_driver
);

perf: String -> I64 -> (a -> b) -> a -> b;
perf = |message, count,  f, a| (
    let (res, consumed_time) = ().consumed_time_while(|_|
        Iterator::count_up(0).take(count - 1).fold(
            f(a), |_,_|
            f(a)
        )
    );
    eval debug_eprintln("=== " + message + " ===");
    eval debug_eprintln("Total time: " + (1000.0 * consumed_time).to_string + " msec");
    eval debug_eprintln("Time per loop: " + (1000.0 * consumed_time / count.to_F64).to_string + " msec");
    res
);

test_vector: IO ();
test_vector = (
    do {
        let vzero = NdArray::zeros([3]);
        let vector3 = |x,y,z| NdArray::make([3], [x, y, z]);
        let vec1 = vector3(0.0, 1.0, 2.0);
        let vec2 = vector3(2.0, 3.0, 4.0);
        let v = vec1 + vec2 + vzero;
        let v = scalar(2.0) * v;
        let _ = *println("v=" + v.to_string).lift;
        pure()
    }.try(eprintln)
);

test1: IO ();
test1 = (
    do {
        let base = NdArray::make([3,3], [1,2,3,4,5,6,7,8,9]);
        let _ = *println("base=" + base.to_string).lift;
        let _ = *println("base + base=" + (base + base).to_string).lift;
        let _ = *println("base + (-base)=" + (base + (-base)).to_string).lift;
        let _ = *println("base * scalar(3)=" + (base * scalar(3)).to_string).lift;
        let _ = *println("base % scalar(3)=" + (base % scalar(3)).to_string).lift;
        let _ = *println("base.map(to_F64)=" + (base.map(to_F64)).to_string).lift;
        let _ = *println("base + base == base * scalar(2)=" + (base + base == base * scalar(2)).to_string).lift;
        let _ = *println("base.transpose=" + base.transpose.to_string).lift;
        let _ = *println("base.get((2, 1))=" + base.get((2, 1)).to_string).lift;
        let _ = *println("base.get((-1, -1))=" + base.get((-1, -1)).to_string).lift;
        let _ = *println("base.set((-1, -1), 100)=" + base.set((-1, -1), 100).to_string).lift;
        let _ = *println("base.get_sub((1, all))=" + base.get_sub((1, all)).to_string).lift;
        let _ = *println("base.get_sub((all, -1))=" + base.get_sub((all, -1)).to_string).lift;
        let a = base.get_sub(([1,3], [1,3]));
        let _ = *println("a=base.get_sub(([1,3], [1,3]))=" + a.to_string).lift;
        let _ = *println("a.expand_dims(0)=" + a.expand_dims(0).to_string).lift;
        let _ = *println("a.expand_dims(1)=" + a.expand_dims(1).to_string).lift;
        let _ = *println("a.expand_dims(2)=" + a.expand_dims(2).to_string).lift;
        let _ = *println("base.reshape([-1,4])=" + base.reshape([-1,4]).to_string).lift;
        let _ = *println("base.reshape([-1])=" + base.reshape([-1]).to_string).lift;
        let base2 = base.set_sub((all, all), base.get_sub((1, all)));  // base2 = base; base2[:,:] = base[1,:]
        let _ = *println("base.set_sub((all, all), base.get_sub((1, all)))=" +base2.to_string).lift;
        //let _ = *println("base.set_sub((1, all), scalar(10))=" + base.set_sub((1, all), scalar(10)).to_string).lift;
        let parent = stack(0, [base, base, base.transpose]);
        let _ = *println("stack(0, [base, base, base.transpose])="+parent.to_string).lift;
        let parent = stack(1, [base, base, base.transpose]);
        let _ = *println("stack(1, [base, base, base.transpose])="+parent.to_string).lift;
        let parent = stack(2, [base, base, base.transpose]);
        let _ = *println("stack(2, [base, base, base.transpose])="+parent.to_string).lift;
        let _ = *println("stack(2, [base, base, base.transpose]).to_array="+parent.to_array.to_string).lift;
        /*
        let count = 10000;
        let _ = perf("base + base", count, |_| base + base, ());
        let _ = perf("base + scalar(3)", count, |_| base + scalar(3), ());
        let _ = perf("stack(2, [base, base, base.transpose])", count, |_| stack(2, [base, base, base.transpose]), ());
        */
        /*
        let count = 10;
        let size = 1000;
        let a = NdArray::arange(0, size*size).map(to_F64);
        let a = a.reshape([size, size]);
        let a = a.get_sub([(size/2,size), (size/2,size)]);
        
        let _ = perf("large", count, |_| 
            let b = a.ravel;
            let a = b.reshape([size/4, size]);
            let a = a.ravel;
            eval assert(|_| "differ", a == b);
            //a * scalar(3.0), 
            a,
            ());
        */
        pure()
    }.try(eprintln)
);

test_dot: IO ();
test_dot = (
    //let a = NdArray::make([2,2], [1,2,3,4]);
    let a = NdArray::make([2], [1,2]);
    let _ = *println("a="+a.to_string);
    //let b = NdArray::make([2,2], [5,6,7,8]);
    let b = NdArray::make([2], [5,6]);
    let c = a.dot(b);
    let _ = *println("c.shape="+c.@shape.to_string);
    let _ = *println("c.data="+c.@data.to_string);
    let _ = *println("a.dot(b)="+c.to_string);
    let c = b.dot(a);
    let _ = *println("b.dot(a)="+c.to_string);
    pure()

);

test_random: IO ();
test_random = (
    let random = Random::init_by_seed(345_U64);
    let (random, a) = random.standard_normal([5, 5]);
    let _ = *println("standard_normal: a=\n"+a.to_string);
    let (random, a) = random.normal([5, 5], 10.0, 3.0);
    let _ = *println("normal(mu=10, sigma=3): a=\n"+a.to_string);
    let (random, a) = random.uniform([5, 5], 5.0, 15.0);
    let _ = *println("uniform(low=5, high=15): a=\n"+a.to_string);
    pure()
);

main: IO ();
main = unittest;
