module Main;

import Debug;

import Minilib.Crypto.Cipher.Rsa.RSAPrivateKey;
import Minilib.Crypto.Cipher.Rsa.Pkcs1;
import Minilib.Crypto.Cert.Asn1;
import Minilib.Crypto.Cert.Asn1Der;
import Minilib.Crypto.Cert.Asn1DerEncode;
import Minilib.Crypto.Cert.Pem;
import Minilib.Text.Hex;
import Minilib.Testing.UnitTest;

// generated by `openssl genrsa -out test1.key 1024` command.
private_key_pem_1: String;
private_key_pem_1 = "
-----BEGIN PRIVATE KEY-----
MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAOs2sspSMNH0vv1h
2EvBZYWe43ZkX2yIWc53ffkdD9OEVApNwfM4pobCZqjKqdrD+GxdklIHSjjgEAlU
VKsv94wRg1oEvjkT8JsJS0e6Pp4U+WnLsvzhriql0F3leUvMSHWMzya/GuY0uLGy
V1Cq8TiPv8ScDP17bSt+rFhyE0zzAgMBAAECgYEA5iVeKYLkS/s7CXg8iFtSN70w
+X3atLpxjQj0VNSv0JmxFWfh91cd8cuzYULzkZ+gqn+gFO0XHbF3X3mJYvsLLb0R
WAtnz+2jJi4DPZ4Z0Nsml3k9qxiiQjuBR1DvLuIcSWX2ytpfkCUeWAqBADMN4qWX
QxnOYHRxDb+B8HwVU7ECQQD4pOt+ZPy9oij9TvSvIVFejxHTckpHvKAgK2NkwRbV
kCZfGWH2od7nxLsrQ4dxQ8Z+9U+eL7as4IzAIyeba/nZAkEA8iwQTD8jKBGEaQnI
mLEz9QDc93YyIYybVYtacUy3sftFwICoOu56ICeOvjKNFy0zhJGvY6ro8FtzjObv
irwRqwJAAXP9SFTQwU70TF6swWVBc3sEkKbHVln82ZNHVmxmdMMN5lpgny9c/R/C
NEOFxBywSUenunXu7F23lNvfvGHKKQJAWcz5JizrbnpAbWrRVb2wFJQDXEgaAtLO
7wPDv+vA2mDg1qdeuquf4biJeAHqy8NZLTmQnhbMVgSzbnZcMUfYDQJBALnqIGza
WpVxhpN+zT311LLjS1sxgWsGyPIHA3coEe3zK/Ob66TnFyD6HHo55MVWiwfFiubl
xLHS9HBJWeO9/J8=
-----END PRIVATE KEY-----
";

test_read_rsa_private_key_from_pem_string: TestCase;
test_read_rsa_private_key_from_pem_string = (
    make_test("test_read_rsa_private_key_from_pem_string") $ |_|
    // Decode a RSA private key from PEM string.
    let private_key = *read_rsa_private_key_from_pem_string(private_key_pem_1).from_result;
    // Encode a RSA private key back to DER-encoded bytes.
    let private_key_bytes = *encode_der_to_bytes(private_key).from_result;
    //let triplets1 = *dump_der_triplets(private_key_bytes).from_result;
    //eval *write_file_string(Path::parse("tmp.private_key_1.txt").as_some, triplets1);

    // Extract DER-encoded bytes of the RSA private key from original PEM string.
    let private_key_info: PrivateKeyInfo = *read_private_key_info_from_pem_string(private_key_pem_1).from_result;
    let private_key_bytes2 = private_key_info.@privateKey.to_bytes;
    //let triplets2 = *dump_der_triplets(private_key_bytes2).from_result;
    //eval *write_file_string(Path::parse("tmp.private_key_2.txt").as_some, triplets2);

    eval *assert_equal("eq", private_key_bytes2, private_key_bytes);

    //eval debug_eprintln("private_key_bytes=" + private_key_bytes.to_string_hex);
    let expected = "3082025d02010002818100eb36b2ca5230d1f4befd61d84bc165859ee376645f6c8859ce777df91d0fd384540a4dc1f338a686c266a8caa9dac3f86c5d9252074a38e010095454ab2ff78c11835a04be3913f09b094b47ba3e9e14f969cbb2fce1ae2aa5d05de5794bcc48758ccf26bf1ae634b8b1b25750aaf1388fbfc49c0cfd7b6d2b7eac5872134cf3020301000102818100e6255e2982e44bfb3b09783c885b5237bd30f97ddab4ba718d08f454d4afd099b11567e1f7571df1cbb36142f3919fa0aa7fa014ed171db1775f798962fb0b2dbd11580b67cfeda3262e033d9e19d0db2697793dab18a2423b814750ef2ee21c4965f6cada5f90251e580a8100330de2a5974319ce6074710dbf81f07c1553b1024100f8a4eb7e64fcbda228fd4ef4af21515e8f11d3724a47bca0202b6364c116d590265f1961f6a1dee7c4bb2b43877143c67ef54f9e2fb6ace08cc023279b6bf9d9024100f22c104c3f232811846909c898b133f500dcf77632218c9b558b5a714cb7b1fb45c080a83aee7a20278ebe328d172d338491af63aae8f05b738ce6ef8abc11ab02400173fd4854d0c14ef44c5eacc16541737b0490a6c75659fcd99347566c6674c30de65a609f2f5cfd1fc2344385c41cb04947a7ba75eeec5db794dbdfbc61ca29024059ccf9262ceb6e7a406d6ad155bdb01494035c481a02d2ceef03c3bfebc0da60e0d6a75ebaab9fe1b8897801eacbc3592d39909e16cc5604b36e765c3147d80d024100b9ea206cda5a957186937ecd3df5d4b2e34b5b31816b06c8f20703772811edf32bf39beba4e71720fa1c7a39e4c5568b07c58ae6e5c4b1d2f4704959e3bdfc9f";
    let actual = private_key_bytes.to_string_hex;
    eval *assert_equal("private_key_bytes", expected, actual);

    pure()
);

test_rsassa_pkcs1_v1_5: TestCase;
test_rsassa_pkcs1_v1_5 = (
    make_test("test_cavp_rsassa_pkcs1_v1_5") $ |_|
    pure()
);


main: IO ();
main = (
    [
        test_read_rsa_private_key_from_pem_string,
    ]
    .run_test_driver
);