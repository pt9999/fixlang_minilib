module MonoidTest;


import Minilib.Trait.Semigroup;
import Minilib.Trait.Monoid;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_array: TestCase;
test_array = (
    make_test("test_array") $ |_|
    let a: Array I64 = mempty;
    let _ = *assert_equal("mempty", [], a);
    let a = a.sappend([1]);
    let _ = *assert_equal("sappend", [1], a);
    let a = a.sappend([2,3]);
    let _ = *assert_equal("sappend", [1,2,3], a);
    pure()
);

test_iterator: TestCase;
test_iterator = (
    make_test("test_iterator") $ |_|
    let a: Iterator I64 = mempty;
    let _ = *assert_equal("mempty", [], a.to_array);
    let a = a.sappend([1].to_iter);
    let _ = *assert_equal("sappend", [1], a.to_array);
    let a = a.sappend([2,3].to_iter);
    let _ = *assert_equal("sappend", [1,2,3], a.to_array);
    pure()
);

test_string: TestCase;
test_string = (
    make_test("test_string") $ |_|
    let a: String = mempty;
    let _ = *assert_equal("mempty", "", a);
    let a = a.sappend("1");
    let _ = *assert_equal("sappend", "1", a);
    let a = a.sappend("23");
    let _ = *assert_equal("sappend", "123", a);
    pure()
);

main: IO ();
main = (
    [
        test_array,
        test_iterator,
        test_string,
        TestCase::empty
    ]
    .run_test_driver
);

