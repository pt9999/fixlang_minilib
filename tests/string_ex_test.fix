module Main;

import Debug;

import HashMap;
import StringEx;
import UnitTest;


test_tostring_ok: [a: ToString] (a, String) -> TestCase;
test_tostring_ok = |(x, expected)| (
    let testname = "test_tostring_ok (" + expected + ")";
    make_test(testname) $ |_|
    let actual = x.to_string;
    let _ = *(assert_equal("eq", expected, actual));
    pure()
);

test_tostring: TestCase;
test_tostring = (
    [
        test_tostring_ok $ ((), "()"),
        test_tostring_ok $ ((1, 2), "(1, 2)"),
        test_tostring_ok $ ((1, 2, "abc"), "(1, 2, abc)"),
        test_tostring_ok $ ((1, 2, 3, (4, 5)), "(1, 2, 3, (4, 5))"),
        test_tostring_ok $ (some(1), "some(1)"),
        test_tostring_ok $ (let n: Option I64 = none(); (n, "none()")),
        test_tostring_ok $ (let h: HashMap I64 I64 = HashMap::empty(0); (h, "{}")),
        test_tostring_ok $ (HashMap::empty(0).insert("a","b"), "{a:b}"),
        test_tostring_ok $ (HashMap::empty(2).insert(0,2).insert(1,3), "{0:2,1:3}"),
        test_tostring_ok $ (let a: Array I64 = []; (a, "[]")),
        test_tostring_ok $ ([1], "[1]"),
        test_tostring_ok $ ([1,2], "[1,2]"),
        TestCase::empty
    ].run_tests
);

test__unsafe_to_string: TestCase;
test__unsafe_to_string = (
    let testname = "test__unsafe_to_string";
    make_test(testname) $ |_|
    let array = [ 'a', 'b', 'c' ];
    let expected = "abc";
    let actual = array._unsafe_to_string;
    let _ = *(assert_equal("eq", expected, actual));
    pure()
);

test_find_byte_ok: (String, U8, Option I64) -> TestCase;
test_find_byte_ok = |(str, byte, expected)| (
    let testname = "test_find_byte_ok (" + str + "," + byte.to_string + "," + expected.to_string + ")";
    make_test(testname) $ |_|
    let actual = str.find_byte(byte);
    let _ = *(assert_equal("eq", expected, actual));
    pure()
);

test_find_byte: TestCase;
test_find_byte = (
    [
        test_find_byte_ok $ ("", 'a', none()),
        test_find_byte_ok $ ("a", 'a', some(0)),
        test_find_byte_ok $ ("a", 'b', none()),
        test_find_byte_ok $ ("abab", 'a', some(0)),
        test_find_byte_ok $ ("abab", 'b', some(1)),
        test_find_byte_ok $ ("abab", 'c', none()),
        TestCase::empty
    ].run_tests
);

test_replace_all_ok: (String, String, String, String) -> TestCase;
test_replace_all_ok = |(str, from, to, expected)| (
    let testname = "test_replace_all_ok (" + str + "," + from + "," + to + "," + expected + ")";
    make_test(testname) $ |_|
    let actual = str.replace_all(from, to);
    let _ = *(assert_equal("eq", expected, actual));
    pure()
);

test_replace_all: TestCase;
test_replace_all = (
    [
        // if `str` is empty, return empty.
        test_replace_all_ok $ ("", "abc", "xyz", ""),
        // if `from` is empty, return `str`.
        test_replace_all_ok $ ("abc", "", "xyz", "abc"),
        // if `from` is not found, return `str`.
        test_replace_all_ok $ ("abc", "uvw", "xyz", "abc"),
        // `from` can be entire `str`
        test_replace_all_ok $ ("abc", "abc", "xyz", "xyz"),
        // `from` may be a single character
        test_replace_all_ok $ ("a", "a", "b", "b"),
        // replacement is not recursive
        test_replace_all_ok $ ("aaabca", "a", "aa", "aaaaaabcaa"),
        test_replace_all_ok $ ("aaaa", "aa", "bc", "bcbc"),
        // `to` can be empty
        test_replace_all_ok $ ("abcdabcd", "bc", "", "adad"),
        // `to` can be longer than `from`
        test_replace_all_ok $ ("abcdabcd", "bc", "xyz", "axyzdaxyzd"),
        TestCase::empty
    ].run_tests
);

test_substring_ok: (String, I64, I64, String) -> TestCase;
test_substring_ok = |(str,s,e,expected)| (
    let testname = "test_substring_ok (" + str + "," + s.to_string + "," + e.to_string + "," + expected.to_string + ")";
    make_test(testname) $ |_|
    let actual = str.substring(s,e);
    let _ = *(assert_equal("eq", expected, actual));
    pure()
);

test_substring: TestCase;
test_substring = (
    [
        test_substring_ok $ ("", 0, 0, ""),
        test_substring_ok $ ("", -1, 1, ""),
        test_substring_ok $ ("abc", 0, 3, "abc"),
        test_substring_ok $ ("abc", 0, 0, ""),
        test_substring_ok $ ("abc", 0, 1, "a"),
        test_substring_ok $ ("abc", 1, 2, "b"),
        test_substring_ok $ ("abc", 2, 1, ""),
        test_substring_ok $ ("abc", 3, 3, ""),
        test_substring_ok $ ("abc", -1, 1, "a"),
        test_substring_ok $ ("abc", 2, 4, "c"),
        test_substring_ok $ ("abc", 5, 6, ""),
        TestCase::empty
    ].run_tests
);

test_string_less_than_ok : (String, String, Bool) -> TestCase;
test_string_less_than_ok = |(str1,str2,expected)| (
    let testname = "test_string_less_than_ok (" + str1 + "," + str2 + "," + expected.to_string + ")";
    make_test(testname) $ |_|
    //let actual = string_less_than $ (str1, str2);
    let actual = str1 < str2;
    let _ = *(assert_equal("eq", expected, actual));
    pure()
);

test_string_less_than: TestCase;
test_string_less_than = (
    [
        test_string_less_than_ok $ ("", "", false),
        test_string_less_than_ok $ ("", "a", true),
        test_string_less_than_ok $ ("a", "", false),
        test_string_less_than_ok $ ("a", "a", false),
        test_string_less_than_ok $ ("a", "aa", true),
        test_string_less_than_ok $ ("aa", "a", false),
        test_string_less_than_ok $ ("ab", "abc", true),
        test_string_less_than_ok $ ("abc", "ab", false),
        test_string_less_than_ok $ ("a", "A", false),
        test_string_less_than_ok $ ("A", "a", true),
        TestCase::empty
    ].run_tests
);

test_utf8_to_utf32_ok: (Array U8, Array U32) -> TestCase;
test_utf8_to_utf32_ok = |(a8, a32)| (
    let testname = "test_utf8_to_utf32_ok (" + a32.to_string + ")";
    make_test(testname) $ |_|
    let actual = utf8_to_utf32(a8, Array::empty(0));
    let _ = *(assert_equal("eq", a32, actual));
    pure()
);

test_utf8_to_utf32: TestCase;
test_utf8_to_utf32 = (
    [
        test_utf8_to_utf32_ok $ ([], []),
        test_utf8_to_utf32_ok $ ([0_U8, 127_U8], [0_U32, 127_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11000010 = */ 194_U8, /* 0b10000000 = */ 128_U8], [/* 0x0080 = */128_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11010011 = */ 211_U8, /* 0b10100100 = */ 164_U8], [/* 0x04E4 = */1252_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11011111 = */ 223_U8, /* 0b10111111 = */ 191_U8], [/* 0x07FF = */2047_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11100000 = */ 224_U8, /* 0b10100000 = */ 160_U8, /* 0b10000000 = */ 128_U8], [/* 0x0800 = */2048_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11101111 = */ 239_U8, /* 0b10111111 = */ 191_U8, /* 0b101111 = */ 191_U8], [/* 0xFFFF = */65535_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11110000 = */ 240_U8, /* 0b10010000 = */ 144_U8, /* 0b10000000 = */ 128_U8, /* 0b10000000 = */ 128_U8], [/* 0x10000 = */65536_U32]),
        test_utf8_to_utf32_ok $ ([/* 0b11110100 = */ 244_U8, /* 0b10001111 = */ 143_U8, /* 0b10111111 = */ 191_U8, /* 0b10111111 = */ 191_U8], [/* 0x10FFFF = */1114111_U32]),
        TestCase::empty
    ].run_tests
);

test_utf32_to_utf8_ok: (Array U32, Array U8) -> TestCase;
test_utf32_to_utf8_ok = |(a32, a8)| (
    let testname = "test_utf32_to_utf8_ok (" + a8.to_string + ")";
    make_test(testname) $ |_|
    let actual = utf32_to_utf8(a32, Array::empty(0));
    let _ = *(assert_equal("eq", a8, actual));
    pure()
);

test_utf32_to_utf8: TestCase;
test_utf32_to_utf8 = (
    [
        test_utf32_to_utf8_ok $ ([], []),
        test_utf32_to_utf8_ok $ ([0_U32, 127_U32], [0_U8, 127_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x0080 = */128_U32], [/* 0b11000010 = */ 194_U8, /* 0b10000000 = */ 128_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x04E4 = */1252_U32], [/* 0b11010011 = */ 211_U8, /* 0b10100100 = */ 164_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x07FF = */2047_U32], [/* 0b11011111 = */ 223_U8, /* 0b10111111 = */ 191_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x0800 = */2048_U32], [/* 0b11100000 = */ 224_U8, /* 0b10100000 = */ 160_U8, /* 0b10000000 = */ 128_U8]),
        test_utf32_to_utf8_ok $ ([/* 0xFFFF = */65535_U32], [/* 0b11101111 = */ 239_U8, /* 0b10111111 = */ 191_U8, /* 0b101111 = */ 191_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x10000 = */65536_U32], [/* 0b11110000 = */ 240_U8, /* 0b10010000 = */ 144_U8, /* 0b10000000 = */ 128_U8, /* 0b10000000 = */ 128_U8]),
        test_utf32_to_utf8_ok $ ([/* 0x10FFFF = */1114111_U32], [/* 0b11110100 = */ 244_U8, /* 0b10001111 = */ 143_U8, /* 0b10111111 = */ 191_U8, /* 0b10111111 = */ 191_U8]),
        TestCase::empty
    ].run_tests
);

test_utf16_to_utf32_ok: (Array U16, Array U32) -> TestCase;
test_utf16_to_utf32_ok = |(a16, a32)| (
    let testname = "test_utf16_to_utf32_ok (" + a32.to_string + ")";
    make_test(testname) $ |_|
    let actual = utf16_to_utf32(a16, Array::empty(0));
    let _ = *(assert_equal("eq", a32, actual));
    pure()
);

test_utf16_to_utf32: TestCase;
test_utf16_to_utf32 = (
    [
        test_utf16_to_utf32_ok $ ([], []),
        test_utf16_to_utf32_ok $ ([0_U16, 65535_U16], [0_U32, 65535_U32]),
        test_utf16_to_utf32_ok $ ([/* 0xD800 = */ 55296_U16, /* 0xDC00 = */ 56320_U16], [/* 0x10000 = */65536_U32]),
        test_utf16_to_utf32_ok $ ([/* 0xD83D = */ 55357_U16, /* 0xDE38 = */ 56888_U16], [/* 0x1F638 = */128568_U32]),
        test_utf16_to_utf32_ok $ ([/* 0xDBFF = */ 56319_U16, /* 0xDFFF = */ 57343_U16], [/* 0x10FFFF = */1114111_U32]),
        test_utf16_to_utf32_ok $ ([/* 0xD800 = */ 55296_U16, /* 0xD83D = */ 55357_U16, /* 0xDE38 = */ 56888_U16], [/* 0xFFFD = */ 65533_U32, /* 0x1F638 = */128568_U32]),
        TestCase::empty
    ].run_tests
);

test_utf32_to_utf16_ok: (Array U32, Array U16) -> TestCase;
test_utf32_to_utf16_ok = |(a32, a16)| (
    let testname = "test_utf32_to_utf16_ok (" + a16.to_string + ")";
    make_test(testname) $ |_|
    let actual = utf32_to_utf16(a32, Array::empty(0));
    let _ = *(assert_equal("eq", a16, actual));
    pure()
);

test_utf32_to_utf16: TestCase;
test_utf32_to_utf16 = (
    [
        test_utf32_to_utf16_ok $ ([], []),
        test_utf32_to_utf16_ok $ ([0_U32, 65535_U32], [0_U16, 65535_U16]),
        test_utf32_to_utf16_ok $ ([/* 0x10000 = */65536_U32], [/* 0xD800 = */ 55296_U16, /* 0xDC00 = */ 56320_U16]),
        test_utf32_to_utf16_ok $ ([/* 0x1F638 = */128568_U32], [/* 0xD83D = */ 55357_U16, /* 0xDE38 = */ 56888_U16]),
        test_utf32_to_utf16_ok $ ([/* 0x10FFFF = */1114111_U32], [/* 0xDBFF = */ 56319_U16, /* 0xDFFF = */ 57343_U16]),
        test_utf32_to_utf16_ok $ ([/* 0x110000 = */1114112_U32], [/* 0xFFFD = */ 65533_U16]),
        TestCase::empty
    ].run_tests
);

test_utf8_enc_dec_ok: String -> TestCase;
test_utf8_enc_dec_ok = |str| (
    let testname = "test_utf8_enc_dec_ok (" + str + ")";
    make_test(testname) $ |_|
    let a8 = str.get_bytes.pop_back;
    let a32 = utf8_to_utf32(a8, Array::empty(0));
    let a16 = utf32_to_utf16(a32, Array::empty(0));
    let a32 = utf16_to_utf32(a16, Array::empty(0));
    let a8 = utf32_to_utf8(a32, Array::empty(0));
    let actual = a8._unsafe_to_string;
    let _ = *(assert_equal("eq", str, actual));
    pure()
);

test_utf8_enc_dec: TestCase;
test_utf8_enc_dec = (
    [
        test_utf8_enc_dec_ok $ "aAあいう😊😀",
        TestCase::empty
    ].run_tests
);

main: IO ();
main = (
    [
        test_tostring,
        test__unsafe_to_string,
        test_find_byte,
        test_replace_all,
        test_substring,
        test_string_less_than,
        test_utf8_to_utf32,
        test_utf32_to_utf8,
        test_utf16_to_utf32,
        test_utf32_to_utf16,
        test_utf8_enc_dec,
        TestCase::empty
    ]
    .run_test_driver
);
