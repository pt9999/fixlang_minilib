module Main;


import Minilib.Math.Types;
import Minilib.Math.Ring;
import Minilib.Math.Euclid;
import Minilib.Math.Modular;
import Minilib.Math.Polynomial;
import Minilib.Monad.FunctorM;
import StringEx;


//---------------------------------------

test_modular_power: IO ();
test_modular_power = (
    let _ = *println("----------- test_modular_power -----------");
    let m = 17;
    let a = 3;
    let a = Modular::make(a, m);
    let one = Modular::make(1, m);
    let x = *Iterator::range(0, m).fold_m(
        one, |x, i|
        let _ = *println((a, i, x, m).format("{}^{} = {} (mod {})"));
        pure $ x * a
    );
    pure()
);

test_polynomial_power: IO ();
test_polynomial_power = (
    let _ = *println("----------- test_polynomial_power -----------");
    let a = Polynomial::make([1, 3]);
    let one = Polynomial::make([1]);
    let x = *Iterator::range(0, 5).fold_m(
        one, |x, i|
        let _ = *println((a, i, x).format("({})^{} = {}"));
        pure $ x * a
    );
    pure()
);

test_extended_euclid: IO ();
test_extended_euclid = (
    let _ = *println("----------- test_extended_euclid -----------");
    let table = [
        (5, 7),
        (20, 32),
        (40, 30)
    ];
    table.to_iter.fold_m(
        (), |_, (a, b)|
        let (x, y, d) = extended_euclid(a, b);
        println([a, x, b, y, d].format("{} * {} + {} * {} = {}"))
    )
);

test_modular_div: IO ();
test_modular_div = (
    let _ = *println("----------- test_modular_div -----------");
    let m = 31;
    let table = [
        (5, 7),
        (20, 12),
        (10, 3)
    ];
    table.to_iter.fold_m(
        (), |_, (a, b)|
        let a = modulo(a, m);
        let b = modulo(b, m);
        let c = a / b;
        let cc = c * b;
        let d = b / a;
        let dd = d * a;
        println(
            [a, b, c, cc].format("a={}, b={}, a/b={}, a/b*b={}") +
            [m].format(" (modulo {})\n") +
            [a, b, d, dd].format("a={}, b={}, b/a={}, b/a*a={}") +
            [m].format(" (modulo {})\n") +
            [cc == a, dd == b].format("ok={} {}\n")
        )
    )
);

test_polynomial_modular: IO ();
test_polynomial_modular = (
    let _ = *println("----------- test_polynomial_modular -----------");
    let p = 3;
    let f = polynomial([ modulo(1, p), modulo(2, p), modulo(1, p), modulo(1, p) ]);
    let m = f.get_degree;
    let q = p.pow_by_U64(m.to_U64);     // q = p ^ m
    let a = polynomial([ modulo(0, p), modulo(1, p) ]);
    let a = modulo(a, f);
    let one_ = modulo(one, f);
    let x = *Iterator::range(1, q).fold_m(
        a, |x, i|
        let is_one = if x == one_ { " !!!" } else { "" };
        let _ = *println((a, i, x, f).format("{}^{} = {} (modulo {})") + is_one);
        pure $ x * a
    );
    pure()    
);

test_primitive_polynomials: IO ();
test_primitive_polynomials = (
    let _ = *println("----------- test_primitive_polynomials -----------");
    let p = 2;
    let m = 8;
    let _ = *println(
        [m, p].format("Generating primitive polynomials of degree {} in GF({})")
    );
    generate_primitive_polynomials(p, m)
    .foreach_m(|f|
        println((f, f.subst(2)).format("{} (decimal={})"))
    )
);

main: IO ();
main = (
    let _ = *test_modular_power;
    let _ = *test_polynomial_power;
    let _ = *test_extended_euclid;
    let _ = *test_modular_div;
    let _ = *test_polynomial_modular;
    let _ = *test_primitive_polynomials;
    pure()
);
