module Main;

import Debug;

import HTML;
import HttpServer;
import Request;
import StringEx;

type Chat = unbox struct {
    name: String,
    message: String
};

namespace Chat {
    make: String -> String -> Chat;
    make = |name, message| Chat {
        name: name,
        message: message
    };
    
    to_element: Chat -> HTMLElement;
    to_element = |chat| (
        div_.attr("class", "chat")
            .add(span.attr("class", "name").text(chat.@name))
            .add(span.attr("class", "message").text(chat.@message))
    );
}

type ChatBoard = unbox struct {
    template: String,
    history: Array Chat
};

namespace ChatBoard {
    empty: ChatBoard;
    empty = ChatBoard {
        template: "",
        history: Array::empty(100)
    };

    read_template: Path -> ChatBoard -> IOFail ChatBoard;
    read_template = |path, chat_board| (
        let template = *read_file_string(path);
        pure $ chat_board.set_template(template)
    );

    add_chat: Chat -> ChatBoard -> ChatBoard;
    add_chat = |chat, chat_board| (
        chat_board.mod_history(push_back(chat))
    );

    render: ChatBoard -> String;
    render = |chat_board| (
        let history = chat_board.@history.to_iter
                .map(|chat| chat.to_element.to_html)
                .concat_iter;
        let html = chat_board.@template;
        let html = html.replace_all("${history}", history);
        html
    );

    on_get: Request AppState -> Response AppState -> IOFail (Response AppState);
    on_get = |req, res| (
        let chat_board = req.@state.@chat_board;
        let html = chat_board.render;
        res.content_type("html").write_str(html)
    );

    on_post: Request AppState -> Response AppState -> IOFail (Response AppState);
    on_post = |req, res| (
        let chat_board = req.@state.@chat_board;
        let name = req.find_query("name").map_or("", |s| s);
        let message = req.find_query("message").map_or("", |s| s);
        eval debug_eprintln("name="+name+" message="+message);
        let chat_board = if name != "" || message != "" {
            chat_board.add_chat(Chat::make(name, message))
        } else {
            chat_board
        };
        let res = res.mod_state(set_chat_board(chat_board));
        let html = chat_board.render;
        res.content_type("html").write_str(html)
    );
}

type AppState = unbox struct {
    asset_dir: String,
    chat_board: ChatBoard
};

namespace AppState {
    empty: AppState;
    empty = (
        AppState {
            asset_dir: "./examples/sample_http_server/",
            chat_board: ChatBoard::empty
        }
    );

    initialize: AppState -> IOFail AppState;
    initialize = |state| (
        let chat_board = *state.@chat_board.read_template(
            Path::parse(state.@asset_dir + "chat_board.html").as_some
        );
        let state = state.set_chat_board(chat_board);
        pure $ state
    );

    merge_state: AppState -> AppState -> AppState;
    merge_state = |s1, s2| s2;
}

main: IO ();
main = (
    do {
        let state = *AppState::empty.initialize;
        let app = App::make_with_state(state, merge_state);
        let app = app.on("GET", "/", ChatBoard::on_get);
        let app = app.on("POST", "/", ChatBoard::on_post);
        let app = *app.listen("localhost:8080");
        pure()
    }
    .try(|err| eprintln("ERROR: " + err))
);
