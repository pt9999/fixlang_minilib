// Spell checker sample program
//
// Spell checker can be used by user-defined word list, but
// predefined Word list file is preferable.
//
// For Ubuntu 22.04, American English word list file can be installed by the command below:
//    $ sudo apt install wamerican
// It is installed to `/usr/share/dict/american-english`.
//
module Main;

import Character;
import Debug;
import Hash;
import HashMap;
import HashSet;

import Minilib.App.Clap;
//import Minilib.Collection.TreeMap;
//import Minilib.Collection.TreeSet;
import Minilib.IO.IOEx;
import Minilib.Text.StringEx;

namespace SpellChecker {
    type SpellChecker = unbox struct {
        words: HashSet String,
        symspell: HashMap String (Array String)
    };

    empty: SpellChecker;
    empty = (
        SpellChecker {
            words: HashSet::empty(100),
            symspell: HashMap::empty(100)
        }
    );

    from_word_list_file: Path -> IOFail SpellChecker;
    from_word_list_file = |filepath| (
        let _ = *eprintln("loading word list file...").lift;
        // IO::read_file_string() sometimes freezes
        let word_lists = (*IO::read_file_bytes(filepath))._unsafe_to_string;
        let _ = *eprintln("registering word list...").lift;
        let (checker, time) = consumed_time_while(|_|
            from_word_list_file_contents(word_lists)
        , ());
        let _ = *eprintln("registering time=" + time.to_string).lift;
        /*
        let _ = *eprintln("deleted count=" + checker.@symspell.get_size.to_string).lift;
        let (count, time) = consumed_time_while(|_|
            checker.@symspell.to_iter.fold(0, |n, (k, words)| n + words.get_size)
        , ());
        let _ = *eprintln("word count=" + count.to_string).lift;
        let _ = *eprintln("word count time=" + time.to_string).lift;
        */
        let _ = *eprintln("done.").lift;
        pure $ checker
    );

    from_word_list_file_contents: String -> SpellChecker;
    from_word_list_file_contents = |word_lists| (
        let checker = SpellChecker::empty;
        let words = word_lists.split_by(Character::is_space);
        words.zip(Iterator::count_up(0)).loop_iter(
            checker, |checker, (word, i)|
            //if i >= 10000 { break $ checker };
            eval if i % 1000 == 0 { debug_eprintln(i.to_string) } else { () };
            continue $ checker.add_word(word)
        )
    );

    _upsert: [k: HashKey] k -> v -> (v -> v) -> HashMap k v -> HashMap k v;
    _upsert = |k, v, f, map| (
        let opt = map.find(k);
        if opt.is_none {
            map.insert(k, v)
        };
        let v = f(opt.as_some);
        map.insert(k, v)
    );

    add_word: String -> SpellChecker -> SpellChecker;
    add_word = |word, checker| (
        let checker = checker.mod_words(insert(word));
        let k = _max_delete_char_count(word);
        _delete_chars(k, word).to_iter.fold(
            checker, |checker, deleted|
            checker.mod_symspell(_upsert(deleted, [word], push_back(word)))
        )
    );

    find_word: String -> SpellChecker -> Iterator String;
    find_word = |typemiss_word, checker| (
        if checker.@words.contains(typemiss_word) {
            Iterator::empty
        };
        let k = _max_delete_char_count(typemiss_word);
        let candidates: Iterator String = (
            _delete_chars(k, typemiss_word).to_iter.map(
                |typemiss_deleted|
                checker.@symspell.find(typemiss_deleted)
                .map_or(Iterator::empty, to_iter)
            )
            .flatten
        );
        //let candidates = candidates.push_front(typemiss_word);
        let candidates = HashSet::from_iter(candidates).to_iter;    // uniq
        let candidates = candidates.map(|word|
            (levenshtein(word, typemiss_word), word)
        );
        // sort by levenshtein
        let candidates = candidates.to_array.sort_by(|((i1, w1), (i2,w2))|
            i1 < i2 ||
            (i1 == i2 && w1 < w2)
        ).to_iter;
        // filter by levenshtein
        let max_levenshtein = 2;
        let min_levenshtein = candidates.fold(
            max_levenshtein, |min_levenshtein, (i, w)|
            min(min_levenshtein, i)
        );
        let candidates = candidates.filter(|(i, w)| i == min_levenshtein);
        candidates.map(|(i,w)| w)
    );

    _max_delete_char_count: String -> I64;
    _max_delete_char_count = |word| (
        let n = word.get_size;
        if n < 3      { 0 }
        else if n < 5 { 1 }
        else          { 2 }
    );

    // delete at most `k` characters from a string
    _delete_chars: I64 -> String -> Array String;
    _delete_chars = |k, str| (
        let n = str.get_size;
        let buf = Array::empty(n + 1);
        let output = Array::empty(100);
        _delete_chars_inner(0, k, str, buf, output)
    );

    _delete_chars_inner: I64 -> I64 -> String -> Array U8 -> Array String -> Array String;
    _delete_chars_inner = |start, k, str, buf, output| (
        if start >= str.get_size {
            output.push_back(buf._unsafe_to_string)
        };

        let output = if k > 0 {
            _delete_chars_inner(start + 1, k - 1, str, buf, output)
        } else { output };
        let buf = buf.push_back(str.get_bytes.@(start));
        _delete_chars_inner(start + 1, k, str, buf, output)
    );

    levenshtein: String -> String -> I64;
    levenshtein = |str1, str2| (
        let n1 = str1.get_size;
        let n2 = str2.get_size;
        let bytes1 = str1.get_bytes;
        let bytes2 = str2.get_bytes;
        let arr = Array::fill((n1 + 1) * (n2 + 1), I64::maximum);
        let arr = arr.set(0, 0);
        let arr = loop(
            (arr, 0), |(arr, i1)|
            if i1 > n1 {
                break $ arr
            };
            let arr = loop(
                (arr, 0), |(arr, i2)|
                if i2 > n2 {
                    break $ arr
                };
                let i = i1 * (n2 + 1) + i2;
                let c = arr.@(i);
                let arr = if i2 < n2 {
                    arr.mod(i + 1, |d| min(d, c + 1))
                } else { arr };
                let arr = if i1 < n1 {
                    arr.mod(i + (n2 + 1), |d| min(d, c + 1))
                } else { arr };
                let arr = if i1 < n1 && i2 < n2{
                    let change = if bytes1.@(i1) == bytes2.@(i2) { 0 } else { 1 };
                    arr.mod(i + (n2 + 1) + 1, |d| min(d, c + change))
                } else { arr };
                continue $ (arr, i2 + 1)
            );
            continue $ (arr, i1 + 1)
        );
        let _ = loop(
            (arr, 0), |(arr, i1)|
            if i1 > n1 {
                break $ arr
            };
            continue $ (arr, i1 + 1)
        );
        arr.@((n1 + 1) * (n2 + 1) - 1)
    );


}

test_levenshtein: IO ();
test_levenshtein = (
    do {
        loop_m(
            (), |_|
            let _ = *eprintln("input word1,word2").lift;
            let line = *read_line(IO::stdin);
            if line == "" { break_m $ () };
            let line = line.strip_spaces;
            let (word1, word2) = line.split_first(",");
            let c = levenshtein(word1, word2);
            let _ = *eprintln("word1="+word1+" word2="+word2+" levenshtein="+c.to_string).lift;
            continue_m $ ()
        )
    }
    .try(eprintln)
);

test_delete_chars: IO ();
test_delete_chars = (
    do {
        loop_m(
            (), |_|
            let _ = *eprintln("input word").lift;
            let line = *read_line(IO::stdin);
            if line == "" { break_m $ () };
            let word = line.strip_spaces;
            let words = _delete_chars(2, word);
            let _ = *words.to_iter.fold_m(
                (), |_, w|
                eprintln(w).lift
            );
            continue_m $ ()
        )
    }
    .try(eprintln)
);

command: Command;
command = (
    Command::new("spell_checker.out")
    .version("1.0")
    .about("Sample spell checker")
    .arg(Arg::new("word-list").short('w').long("word-list").help("Word list file").takes_value.default_value("/usr/share/dict/american-english"))
);

main: IO ();
main = (
    do {
        let matches = *command.get_matches;
        let word_list_file = matches.get_one("word-list").as_some;

        let checker = *SpellChecker::from_word_list_file(
            Path::parse(word_list_file).as_some
        );
        loop_m(
            (), |_|
            let _ = *print("Input word> ").lift;
            let _ = *fflush(IO::stdout);
            let line = *read_line(IO::stdin);
            if line == "" { break_m $ () };
            let typemiss_word = line.strip_spaces;
            let words = checker.find_word(typemiss_word);
            let _ = *println("Candidates are:").lift;
            let _ = *words.fold_m(
                (), |_, word|
                println("  " + word).lift
            );
            continue_m $ ()
        )
    }
    .try(eprintln)
);
