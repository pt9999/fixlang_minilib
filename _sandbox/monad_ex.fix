module Main;


trait [f : *->*] f : FunctorM {
    map_m : [m : Monad] (a -> m b) -> f a -> m (f b);
    foreach_m : [m : Monad] (a -> m ()) -> f a -> m ();
}

impl Array: FunctorM {
    map_m = |f, array| array.to_iter.fold_m(
        Array::empty(array.get_size), |output, a|
        let b = *f(a);
        pure $ output.push_back(b)
    );
    foreach_m = |f, array| array.to_iter.fold_m(
        (), |_, a|
        f(a)
    );
}

impl Iterator: FunctorM {
    map_m = |f, iter| (
        let output = *iter.to_array.map_m(f);
        pure $ output.to_iter
    );
    foreach_m = |f, iter| iter.fold_m(
        (), |_, a|
        f(a)
    );
}

impl Option: FunctorM {
    map_m = |f, opt| (
        if opt.is_none {
            pure $ none()
        };
        let a = opt.as_some;
        let b = *f(a);
        pure $ some(b)
    );
    foreach_m = |f, opt| (
        if opt.is_none {
            pure()
        };
        f(opt.as_some)
    );
}

impl Result e: FunctorM {
    map_m = |f, res| (
        if res.is_err {
            pure $ err $ res.as_err
        };
        let a = res.as_ok;
        let b = *f(a);
        pure $ ok(b)
    );
    foreach_m = |f, res| (
        if res.is_err {
            pure()      // ignore error
        };
        f(res.as_ok)
    );
}

test_map_m: IO ();
test_map_m = (
    let array = [1,2,3];
    let _ = *array.map(to_string).map_m(println);
    let iter = [4,5,6].to_iter;
    let _ = *iter.map(to_string).map_m(println);
    let opt: Option I64 = some(10);
    let _ = *opt.map(to_string).map_m(println);
    let opt: Option I64 = none();
    let _ = *opt.map(to_string).map_m(println);
    let res: Result ErrMsg I64 = ok(20);
    let _ = *res.map(to_string).map_m(println);
    let res: Result ErrMsg I64 = err $ "Error";
    let _ = *res.map(to_string).map_m(println);
    pure()
);

test_foreach_m: IO ();
test_foreach_m = (
    let array = [1,2,3];
    let _ = *array.map(to_string).foreach_m(println);
    let iter = [4,5,6].to_iter;
    let _ = *iter.map(to_string).foreach_m(println);
    let opt: Option I64 = some(10);
    let _ = *opt.map(to_string).foreach_m(println);
    let opt: Option I64 = none();
    let _ = *opt.map(to_string).foreach_m(println);
    let res: Result ErrMsg I64 = ok(20);
    let _ = *res.map(to_string).foreach_m(println);
    let res: Result ErrMsg I64 = err $ "Error";
    let _ = *res.map(to_string).foreach_m(println);
    pure()
);

main: IO ();
main = (
    let _ = *test_map_m;
    let _ = *test_foreach_m;
    pure()
);