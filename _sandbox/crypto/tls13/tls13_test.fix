module Main;

import Debug;

import Minilib.Crypto.Tls13.Types;
import Minilib.Crypto.Tls13.Connection;
import Minilib.Crypto.Tls13.MemConnection;
//import Minilib.Crypto.Tls13;
import Minilib.Encoding.Binary;
import Minilib.Monad.FunctorM;
import Minilib.Monad.Reader;
import Minilib.Monad.State;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;
import Minilib.Thread.Time;
import Minilib.Testing.UnitTest;

test_mem_connection: IO ();
test_mem_connection = do {
    let (local_conn, remote_conn) = *MemConnection::pipe.lift;
    let n = 102400;
    let bytes = Array::from_map(n, |i| i.to_U8);
    let task = do {
        let _ =  *send_bytes(bytes).run_state_t(local_conn);
        let (bytes2, _) = *recv_n_bytes(n).run_state_t(remote_conn);
        pure $ bytes == bytes2
    }.to_result;
    let res = *timeit_io("send_recv", task).lift;
    //eval *println("res="+(bytes == bytes2).to_string).lift;
    pure()
}.try(eprintln);

/*
type MockServer = unbox struct {

};

namespace MockServer {
    make: IOHandle -> MockServer;
    make = |handle| MockServer {
        handle: handle
    };
}

test_client_hello: TestCase;
test_client_hello = (
    let ()
);
*/

main: IO ();
main = test_mem_connection;
