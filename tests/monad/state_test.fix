module Main;

import Debug;

import Minilib.Monad.State;
import Minilib.Monad.Error;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_state_functor: TestCase;
test_state_functor = (
    make_test("test_state_functor") $ |_|
    let sm = make_state_monad(|s| (2, s));
    let sm = sm.map(add(1));
    let sm = sm.map(to_string);
    assert_equal("eq", ("3", "abc"), sm.run_state("abc"))
);

test_state_monad: TestCase;
test_state_monad = (
    make_test("test_state_monad") $ |_|
    let get_elt = |i| (
        let a = *get_state;
        pure $ a.@(i)
    );
    let set_elt = |i, elt| (
        let a = *get_state;
        let a = a.set(i, elt);
        put_state(a)
    );
    let sm = do {
        eval *set_elt(1, 4);
        let x = *get_elt(0);
        let y = *get_elt(1);
        pure $ x + y
    };
    assert_equal("eq", (6, [2, 4]), sm.run_state([2, 3]))
);

test_state_result_error: TestCase;
test_state_result_error = (
    make_test("test_state_result_error") $ |_|
    let sm: StateT I64 (Result ErrMsg) I64 = do {
        let i = *get_state;
        if i == 0 { error $ "err" };
        eval *put_state(i + 1);
        pure(i + 2)
    };
    eval *assert_equal("eq1", ok $ (3, 2), sm.run_state_t(1));
    eval *assert_equal("eq2", err $ "err", sm.run_state_t(0));
    pure()
);

test_state_iofail_error: TestCase;
test_state_iofail_error = (
    make_test("test_state_iofail_error") $ |_|
    let sm: StateT (Array I64) IOFail I64 = do {
        let arr: Array I64 = *get_state;
        let arr = arr.push_back(2);
        if arr.get_size != 2 { error $ "err" };
        eval *put_state(arr);
        pure $ arr.to_iter.sum
    };
    eval *assert_equal("eq1", ok $ (3, [1, 2]), *sm.run_state_t([1]).to_result.lift);
    eval *assert_equal("eq2", err $ "err", *sm.run_state_t([1, 2]).to_result.lift);
    pure()
);

main: IO ();
main = (
    [
        test_state_functor,
        test_state_monad,
        test_state_result_error,
        test_state_iofail_error,
        TestCase::empty
    ]
    .run_test_driver
);

