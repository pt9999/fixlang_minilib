module Main;

import Minilib.Media.Svg;
import Minilib.Encoding.Xml;
//import Minilib.Text.StringEx;

//----------------------------------------------------------------------------
// Test routine
//----------------------------------------------------------------------------

figure1: XmlElement;
figure1 = (
    let fill = Svg::fill;
    let group1 = group
        .stroke("red").stroke_width(5)
        .fill("transparent")
        .add(rect(10, 10, 30, 30))
        .add(circle(200, 200, 20))
        .add(
            path(
                newpath
                .moveto(25, 25)
                .curveto(75, 25, 100, 50, 100, 100)
                .scurveto(125.0, 175.0, 175.0, 175.0)
                .lineto(200, 200)
            ).stroke("black")
        )
        .add(
            Svg::text("Hello あいう")
            .xy(110, 120)
            .font_size(20)
            .font_family("SansSerif")
            .stroke("transparent")
            .fill("black")
        )
        ;
    Svg::svg(500, 500).view_box(0, 0, 300, 300).add(group1)
);

sudoku_figure: XmlElement;
sudoku_figure = (
    let fill = Svg::fill;
    let line_width_L = 5.0;
    let line_width_S = 2.0;
    let cell_size = 60.0;
    let board_size = cell_size * 9.0 + line_width_L;
    let font_siz = 28.0;
    let background = rect(0.0, 0.0, board_size, board_size)
                    .fill("white");
    let lines = Svg::group.fill("black");
    let lines = Iterator::range(0, 9 + 1).fold(
        lines, |lines, i|
        let lw = if i % 3 == 0 { line_width_L } else { line_width_S };
        let hline = Svg::rect(0.0, i.to_F64 * cell_size, board_size, lw);
        let vline = Svg::rect(i.to_F64 * cell_size, 0.0, lw, board_size);
        lines.add(hline).add(vline)
    );
    let texts = Svg::group.fill("black")
                .font_family("SansSerif").font_size(font_siz);
    let texts = Iterator::range(0, 9).fold(
        texts, |texts, row|
        Iterator::range(0, 9).fold(
            texts, |texts, col|
            let text = Svg::text(((row + col) % 9 + 1).to_string)
                    .xy(col.to_F64 * cell_size + cell_size / 2.0 + line_width_L / 2.0,
                        row.to_F64 * cell_size + cell_size / 2.0 + line_width_L / 2.0)
                    .attr("text-anchor","middle")
                    .attr("alignment-baseline", "middle");
            texts.add(text)
        )
    );
    let scale = 1.0;
    Svg::svg(board_size * scale, board_size * scale)
        .view_box(0.0, 0.0, board_size, board_size)
        .add(background)
        .add(lines)
        .add(texts)

);

main: IO ();
main = (
    do {
        let svg = sudoku_figure;
        let filepath = "tmp.svg";
        eval *svg.write_file(filepath);
        eval *eprintln("Wrote " + filepath).lift;
        pure()
    }
    .try(eprintln)
);
