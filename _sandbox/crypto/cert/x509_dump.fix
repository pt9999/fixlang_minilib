module Main;

import Minilib.Crypto.Cert.Asn1;
import Minilib.Crypto.Cert.Asn1.Der;
import Minilib.Crypto.Cert.X509;
import Minilib.Encoding.Binary;
import Minilib.Monad.State;
import Minilib.Monad.Error;
import Minilib.Monad.Trans;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;
import Minilib.Testing.UnitTest;

dump_triplets: Path -> IOFail ();
dump_triplets = |path| (
    let bytes = *read_file_bytes(path);
    let buf = ByteBuffer::make(bytes, big_endian());
    let sm: StateT ByteBuffer IOFail () = loop_m(
        (), |_|
        let buf = *get_state;
        if buf.@position >= buf.get_size { break_m $ () };
        let identifier = *decode_identifier;
        let length = *decode_length;
        if identifier.@constructed {
            eval *println(
                identifier.to_string +
                " length=" + length.to_string
            ).lift.lift_t;
            continue_m $ ()
        };
        let contents = *decode_contents(length);
        eval *println(
            identifier.to_string +
            " length=" + length.to_string +
            " contents=" + contents.to_string_hex +
            if identifier.@tag == tag_printable_string {
                " (" + contents._unsafe_to_string + ")"
            } else { "" }
        ).lift.lift_t;
        continue_m $ ()
    );
    sm.run_state_t(buf).forget
);


dump_certificate: Path -> IOFail Certificate;
dump_certificate = |path| (
    let bytes = *read_file_bytes(path);
    let buf = ByteBuffer::make(bytes, big_endian());
    let decode_certificate: StateT ByteBuffer IOFail Certificate = do {
        decode_obj
    };
    decode_certificate.run_state_t(buf).map(@0)
);

main: IO ();
main = (
    do {
        let path = Path::parse(".local/tmp.cert_0.cer").as_some;
        if false { dump_triplets(path) };
        let certificate = *dump_certificate(path);
        println(certificate.to_string).lift
    }.try(eprintln)
);