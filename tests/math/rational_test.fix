module RationalTest;

import Math;

import Minilib.Math.Rational;
import Minilib.Testing.UnitTest;
import Minilib.Common.TimeEx;
import Minilib.Text.StringEx;

test_reduce: TestCase;
test_reduce = (
    make_table_test("test_reduce",
        [
            ((6, 9), (2, 3)),
            ((6, -9), (-2, 3)),
            ((-6, 9), (-2, 3)),
            ((-6, -9), (2, 3)),
            ((6, 3), (2, 1)),
            ((1, 1), (1, 1))
        ],
        |((num, den), (exp_num, exp_den))|
        let a = rational(num, den);
        let a = a.reduce;
        assert_equal("reduce", (exp_num, exp_den), (a.@num, a.@den))
    )
);

test_to_string: TestCase;
test_to_string = (
    make_table_test("test_to_string",
        [
            ((1, 2), "(1/2)"),
            ((-3, -6), "(-3/-6)")
        ],
        |((num, den), expected)|
        assert_equal("to_string", expected, rational(num, den).to_string)
    )
);

test_eq: TestCase;
test_eq = (
    make_table_test("test_eq",
        [
            (rational(1, 2), rational(1, 2), true),
            (rational(1, 2), rational(3, 2), false),
            (rational(1, 2), rational(1, 3), false),
            (rational(1, 2), rational(3, 6), false)
        ],
        |(a, b, expected)|
        assert_equal("expected", expected, a == b)
    )
);

test_add_sub: TestCase;
test_add_sub = (
    make_table_test("test_add_sub",
        [
            (rational(1, 2), rational(1, 2), rational(1, 1)),
            (rational(1, 2), rational(3, 2), rational(2, 1)),
            (rational(1, 2), rational(1, 3), rational(5, 6)),
            (rational(-3, 4), rational(5, 6), rational(1, 12))
        ],
        |(a, b, c)|
        let _ = *assert_equal("add", c, a + b);
        let _ = *assert_equal("sub", a, c - b);
        let _ = *assert_equal("sub", b, c - a);
        pure()
    )
);

test_mul_div: TestCase;
test_mul_div = (
    make_table_test("test_mul_div",
        [
            (rational(1, 2), rational(1, 2), rational(1, 4)),
            (rational(1, 2), rational(3, 2), rational(3, 4)),
            (rational(3, 10), rational(5, 3), rational(1, 2)),
            (rational(-3, 4), rational(5, 6), rational(-5, 8))
        ],
        |(a, b, c)|
        let _ = *assert_equal("mul", c, a * b);
        let _ = *assert_equal("div", a, c / b);
        let _ = *assert_equal("div", b, c / a);
        pure()
    )
);

main: IO ();
main = (
    [
        test_reduce,
        test_to_string,
        test_eq,
        test_add_sub,
        test_mul_div,
        TestCase::empty
    ]
    .run_test_driver
);

