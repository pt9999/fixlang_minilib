module Main;


import Minilib.App.Clap;
import Minilib.Net.Tcp;
import Minilib.Text.StringEx;

type URL = unbox struct {
    url: String,
    scheme: String,
    host: String,
    port: String,
    path: String
};

namespace URL {
    _cut: String -> String -> (String, String);
    _cut = |delim, str| (
        let pos = str.find(delim, 0);
        if pos.is_none {
            (str, "")
        };
        let pos = pos.as_some;
        (str.substring(0, pos), str.substring(pos + delim.get_size, str.get_size))
    );

    parse: String -> Result ErrMsg URL;
    parse = |url| (
        let (scheme, rest) = if url.find("://", 0).is_some {
            url._cut("://")
        } else {
            ("http", url)
        };
        let (host_port, path) = rest._cut("/");
        let path = if path == "" { "/" } else { "/" + path };

        let (host, port) = host_port._cut(":");
        let port = if port == "" { "80" } else { port };

        ok $ URL { url:url, scheme:scheme, host:host, port:port, path:path }
    );
}

http_fetch: URL -> IOFail ();
http_fetch = |url| (
    if url.@scheme != "http" {
        throw $ "url does not start with 'http://': url=" + url.@url
    };
    let host_port = url.@host + ":" + url.@port;
    let path = url.@path;
    //let _ = *println("host_port = " + host_port).lift;
    //let _ = *println("path = " + path).lift;
    let socket = *connect_to_tcp_server(host_port);
    let bufsock = BufferedSocket::make(socket);
    let bufsock = *bufsock.write_str("GET " + path + " HTTP/1.0\n\n");
    let bufsock = *bufsock.flush;
    loop_m(
        bufsock, |bufsock|
        let (line, bufsock) = *(bufsock.read_line);
        if line == "" {
            break_m $ ()
        };
        eval *(lift $ eprint(line));
        continue_m $ bufsock
    )
);

main: IO ();
main = (
    do {
        let command = (
            Command::new("sample_client")
            .version("0.1")
            .about("Fetches contents from remote HTTP server.")
            .arg(Arg::new("URL").takes_value.default_value("http://localhost")
                .help("The URL to fetch. NOTE: URL should start with 'http://'."))
        );
        let matches = *command.get_matches;
        let url = matches.get_one("URL").as_some;
        //let _ = *println("url = " + url).lift;
        let url = *URL::parse(url).from_result;
        http_fetch(url)
    }.try (
        |err| eprintln(err)
    )
);
