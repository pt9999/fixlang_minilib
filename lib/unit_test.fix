module UnitTest;

type TestCase = IOFail ();

run_tests: Array (TestCase) -> TestCase;
run_tests = |tests|
    tests.to_iter.fold_m((), |_, test| test);

make_test: String -> IOFail () -> TestCase;
make_test = |test_name, body| (
    eval *(lift $ println ("=== " + test_name + " ==="));
    do {
        let _ = *body;
        eval *(lift $ println ("[OK] " + test_name));
        pure()
    }.try(|err| 
        eval *(println("error: " + err));
        println("[NG] " + test_name)
    ).lift
);


assert_true : String -> Bool -> IOFail ();
assert_true = |msg, b| (
    if !b {
        let msg = "assert_true: " + msg;
        throw $ msg
    };
    pure()
);

assert_equal : [a: Eq, a: ToString] String -> a -> a -> IOFail ();
assert_equal = |msg, lhs, rhs| (
    if lhs != rhs {
        let msg = "assert_equal: " + msg + ": lhs="+lhs.to_string+" rhs="+rhs.to_string;
        throw $ msg
    };
    pure()
);


