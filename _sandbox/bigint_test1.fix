module Main;

import Debug;
import Random;

import Minilib.Math.BigInt;
import Minilib.Math.BigIntPrime;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;
import Minilib.Testing.Timeit;

namespace BigIntOpt {

    _get_sub_or_zero: I64 -> I64 -> Array U32 -> Array U32;
    _get_sub_or_zero = |begin, end, a| (
        eval assert(|_| "invalid range", begin < end);
        let n = a.get_size;
        if begin >= n { BigNat::_zero };
        let end = min(end, n);
        if begin == 0 && end == n { a };
        a.get_sub(begin, end)
    );
    
    // Calculates `a * b`.
    _mul_karatsuba: Array U32 -> Array U32 -> Array U32;
    _mul_karatsuba = |a, b| (
        if a.get_size <= 2 && b.get_size <= 2 {
            _mul(a,b)
        };
        /*
        if a._is_zero || b._is_zero {
            BigNat::_zero
        };
        if a.get_size == 1 {
            _mul_u32(a.@(0), b)
        };
        if b.get_size == 1 {
            _mul_u32(b.@(0), a)
        };
        */
        let n = max(a.get_size, b.get_size);
        let m = (n + 1) / 2;
        let a0 = a._get_sub_or_zero(0, m);
        let a1 = a._get_sub_or_zero(m, n);
        let b0 = b._get_sub_or_zero(0, m);
        let b1 = b._get_sub_or_zero(m, n);
        let z0 = _mul_karatsuba(a0, b0);
        let z2 = _mul_karatsuba(a1, b1);
        let z3 = _mul_karatsuba(_add(a1, a0), _add(b1, b0)); 
        let z1 = _sub(_sub(z3, z2), z0);
        let (z,zoff) = _add_with_offset((z0,0), (z1,m));
        let (z,zoff) = _add_with_offset((z,zoff), (z2,2*m));
        eval assert(|_| "zoff != 0", zoff == 0);
        z
    );


    mul_karatsuba: BigInt -> BigInt -> BigInt;
    mul_karatsuba = |a, b| (
        let nat = _mul_karatsuba(a.@nat, b.@nat);
        let nat = nat._remove_last_zeros;
        BigInt::make(a.@sign * b.@sign, nat)
    );
}

test_prime: IO ();
test_prime = (
    let _ = *pure();
    let _ = CALL_C[() setbuf(Ptr, Ptr), IO::stdout._file_ptr, nullptr];
    let time = CALL_C[I32 time(Ptr), nullptr];
    let random = Random::init_by_seed(time.to_U64);
    let a = pow_by_U64(two, 512_U64);
    let (b, random) = random.generate_range(zero, a);
    //let _ = *println(a.to_string);
    let _ = *loop_m(
        (b, random), |(b, random)|
        // Miller-Rabin Primality test.
        let (ret, random) = miller_rabin(b, random);
        // Solovayâ€“Strassen primality test.
        let (ret2, random) = solovay_strassen(b, random);
        let judge = |b| if b { "prime" } else { "composite" };
        let _ = *println(
            (b, judge(ret), judge(ret2)).format("{}: {}: {}")
        );
        if ret {
            break_m $ ()
        };
        continue_m $ (b + one, random)
    );
    pure()
);

test_probable_prime: IO ();
test_probable_prime = (
    let _ = *pure();
    let _ = CALL_C[() setbuf(Ptr, Ptr), IO::stdout._file_ptr, nullptr];
    let time = CALL_C[I32 time(Ptr), nullptr];
    let random = Random::init_by_seed(time.to_U64);
    loop_m(
        128, |bit_length|
        if bit_length > 512 { break_m $ () };
        let _ = *println("Searching a probable prime of " + bit_length.to_string + " bits...");
        let ((n, random), time) = consumed_time_while(|_|
            probable_prime(bit_length, random)
        , ());
        let _ = *println(n.to_string);
        let _ = *println("time="+time.to_string);
        continue_m $ bit_length + 128
    )
);

test_karatsuba: IO ();
test_karatsuba = (
    let _ = *pure();
    let _ = CALL_C[() setbuf(Ptr, Ptr), IO::stdout._file_ptr, nullptr];
    let time = CALL_C[I32 time(Ptr), nullptr];
    let random = Random::init_by_seed(123_U64); // time.to_U64);
    let bits = 1024;
    let (a, random) = random.generate_bigint(bits);
    let (b, random) = random.generate_bigint(bits);
    let _ = *timeit("a*b", |_| a*b);
    let _ = *timeit("mul_karatsuba(a,b)", |_| mul_karatsuba(a,b));
    eval assert(|_| "not eq", a*b == mul_karatsuba(a,b));
    pure()
);

main: IO ();
main = test_karatsuba;


