[general]
## Project name. This is a required field.
name = "fixlang-minilib"

## Project version (in semver). This is a required field.
version = "0.0.1"

## Project authors.
authors = ["pt9999 <18054486+pt9999@users.noreply.github.com>"]

## Project description.
description = "Minilib is a small library for FixLang."

## Project license.
license = "MIT"

[build]
## Fix source files to be compiled.
## Merged with files specified in the command line argument.
files = [
"lib/app/clap.fix",
"lib/collection/deque.fix",
"lib/collection/ordered_map.fix",
"lib/collection/rbtree.fix",
"lib/collection/tree_map.fix",
"lib/collection/tree_set.fix",
"lib/common/common.fix",
"lib/comonad/env.fix",
"lib/comonad/identity_c.fix",
"lib/comonad/traced.fix",
"lib/crypto/aes.fix",
"lib/crypto/aes/aes_gcm.fix",
"lib/crypto/hmac.fix",
"lib/crypto/hmac/hmac_md5.fix",
"lib/crypto/hmac/hmac_sha1.fix",
"lib/crypto/hmac/hmac_sha256.fix",
"lib/crypto/md5.fix",
"lib/crypto/secure_random.fix",
"lib/crypto/sha1.fix",
"lib/crypto/sha256.fix",
"lib/crypto/sha512.fix",
"lib/encoding/base64.fix",
"lib/encoding/binary.fix",
"lib/encoding/json.fix",
"lib/encoding/json/json_decoder.fix",
"lib/encoding/json/json_encoder.fix",
"lib/encoding/xml.fix",
"lib/encoding/xml/xml_helpers.fix",
"lib/encoding/xml/xml_parser.fix",
"lib/io/channel.fix",
"lib/io/errno.fix",
"lib/io/file_system.fix",
"lib/io/path.fix",
"lib/io/platform.fix",
"lib/math/bigfloat.fix",
"lib/math/bigint.fix",
"lib/math/bigint_prime.fix",
"lib/math/bignat.fix",
"lib/math/complex.fix",
"lib/math/euclid.fix",
"lib/math/modular.fix",
"lib/math/polynomial.fix",
"lib/math/random_ex.fix",
"lib/math/rational.fix",
"lib/math/ring.fix",
"lib/math/types.fix",
"lib/media/image.fix",
"lib/media/png.fix",
"lib/media/svg.fix",
"lib/monad/cont.fix",
"lib/monad/error.fix",
"lib/monad/except.fix",
"lib/monad/functor_m.fix",
"lib/monad/identity.fix",
"lib/monad/io.fix",
"lib/monad/reader.fix",
"lib/monad/state.fix",
"lib/monad/trans.fix",
"lib/monad/writer.fix",
"lib/net/html.fix",
"lib/net/http_server.fix",
"lib/net/request.fix",
"lib/net/router.fix",
"lib/net/tcp.fix",
"lib/net/url.fix",
"lib/testing/test_util_array.fix",
"lib/testing/unit_test.fix",
"lib/text/hex.fix",
"lib/text/regexp.fix",
"lib/text/regexp/regexp_nfa.fix",
"lib/text/regexp/regexp_pattern.fix",
"lib/text/simple_parser.fix",
"lib/text/string_ex.fix",
"lib/text/unicode.fix",
"lib/thread/future.fix",
"lib/thread/task_pool.fix",
"lib/thread/time.fix",
"lib/trait/comonad.fix",
"lib/trait/monoid.fix",
"lib/trait/semigroup.fix",
]

## Object files to be linked.
## Merged with object files specified in the command line argument.
# objects = ["lib.o"]

## Static link libraries.
## Merged with libraries specified in the command line argument.
# static_links = ["abc"] # libabc.a

## Dynamic link libraries.
## Merged with libraries specified in the command line argument.
# dynamic_links = ["xyz"] # libxyz.so

## Library search paths for "static_links" and "dynamic_links".
## Merged with paths specified in the command line argument.
# library_paths = ["."]

## Whether to generate debug information.
## Overwritten by the command line argument.
# debug = true

## Optimization level.
## One of "none", "minimum", "separated", "default".
## Overwritten by the command line argument.
opt_level = "separated"

## Output file name.
## Overwritten by the command line argument.
# output = "myprogram.out"

## Whether to use the thread-safe reference counting.
## Overwritten by the command line argument.
# threaded = false

## Preliminary commands to be executed before the Fix program is compiled.
## This is useful when you need to compile a object files / library before compiling the Fix program.
# preliminary_commands = [["make", "lib.o"]]

## Additional build options when running `fix test`.
## Available fields are almost the same as ones in "[build]".
[build.test]
files = [
"tests/test.fix",
"tests/app/clap_test.fix",
"tests/collection/deque_test.fix",
"tests/collection/ordered_map_test.fix",
"tests/collection/rbtree_test.fix",
"tests/collection/tree_map_test.fix",
"tests/collection/tree_set_test.fix",
"tests/comonad/env_test.fix",
"tests/comonad/identity_c_test.fix",
"tests/comonad/traced_test.fix",
"tests/crypto/aes/aes_gcm_test.fix",
"tests/crypto/aes_test.fix",
"tests/crypto/hmac_test.fix",
"tests/crypto/md5_test.fix",
"tests/crypto/sha1_test.fix",
"tests/crypto/sha256_test.fix",
"tests/crypto/sha512_test.fix",
"tests/encoding/base64_test.fix",
"tests/encoding/binary_test.fix",
"tests/encoding/json_test.fix",
"tests/encoding/xml/xml_helpers_test.fix",
"tests/encoding/xml/xml_parser_test.fix",
"tests/encoding/xml_test.fix",
"tests/io/channel_test.fix",
"tests/io/file_system_test.fix",
"tests/io/path_test.fix",
"tests/io/platform_test.fix",
"tests/math/bigfloat_test.fix",
"tests/math/bigint_prime_test.fix",
"tests/math/bigint_test.fix",
"tests/math/bignat_test.fix",
"tests/math/complex_test.fix",
"tests/math/euclid_test.fix",
"tests/math/modular_test.fix",
"tests/math/polynomial_test.fix",
"tests/math/random_ex_test.fix",
"tests/math/rational_test.fix",
"tests/math/ring_test.fix",
"tests/media/svg_test.fix",
"tests/monad/cont_test.fix",
"tests/monad/error_test.fix",
"tests/monad/except_test.fix",
"tests/monad/functor_m_test.fix",
"tests/monad/identity_test.fix",
"tests/monad/io_test.fix",
"tests/monad/reader_test.fix",
"tests/monad/state_test.fix",
"tests/monad/writer_test.fix",
"tests/net/html_test.fix",
"tests/net/request_test.fix",
"tests/net/router_test.fix",
"tests/net/url_test.fix",
"tests/text/hex_test.fix",
"tests/text/regexp_test.fix",
"tests/text/simple_parser_test.fix",
"tests/text/string_ex_test.fix",
"tests/text/unicode_test.fix",
"tests/thread/task_pool_test.fix",
"tests/trait/monoid_test.fix",
]

## By "[[dependencies]]" array, you can specify a Fix project as a dependency.
## Each dependent project must have "fixproj.toml" file at the project root directory.
## If a dependent project also has dependencies, "fix" will consider them recursively.
## NOTE: The syntax for version requirement is the same as in Cargo. See: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html

## The following is an example of a dependency to a project in the local file system.
# [[dependencies]]
# name = "another-project"
# version = "*"
# path = "/path/to/project"

## The following is an example of a dependency to a project in a remote git repository.
## In this case, "fix" searches the tags (each name should be a semver, or semver with "v" prefix) of the repository to find the version that satisfies the requirement.
## If the repository has no tags, "fix" will use the latest commit of the default branch.
# [[dependencies]]
# name = "your-project"
# version = "1.2.0"
# git = { url = "https://github.com/tttmmmyyyy/your-project.git" }


[[dependencies]]
name = "asynctask"
version = "*"
git = { url = "https://github.com/tttmmmyyyy/fixlang-asynctask.git" }

[[dependencies]]
name = "character"
version = "*"
git = { url = "https://github.com/tttmmmyyyy/fixlang-character.git" }

[[dependencies]]
name = "hash"
version = "*"
git = { url = "https://github.com/tttmmmyyyy/fixlang-hash.git" }

[[dependencies]]
name = "hashmap"
version = "*"
git = { url = "https://github.com/tttmmmyyyy/fixlang-hashmap.git" }

[[dependencies]]
name = "hashset"
version = "*"
git = { url = "https://github.com/tttmmmyyyy/fixlang-hashset.git" }

[[dependencies]]
name = "math"
version = "*"
git = { url = "https://github.com/tttmmmyyyy/fixlang-math.git" }

[[dependencies]]
name = "random"
version = "*"
git = { url = "https://github.com/tttmmmyyyy/fixlang-random.git" }

[[dependencies]]
name = "regexp"
version = "*"
git = { url = "https://github.com/tttmmmyyyy/fixlang-regexp.git" }

[[dependencies]]
name = "subprocess"
version = "*"
git = { url = "https://github.com/tttmmmyyyy/fixlang-subprocess.git" }

[[dependencies]]
name = "time"
version = "*"
git = { url = "https://github.com/tttmmmyyyy/fixlang-time.git" }