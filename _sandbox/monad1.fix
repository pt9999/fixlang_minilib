module Main;

// Function monad. same as Reader monad
type Function a b = unbox struct {
    data: a -> b
};

namespace Function {
    make: (a -> b) -> Function a b;
    make = |f| Function { data: f };

    get: Function a b -> (a -> b);
    get = @data;
}

impl Function a: Functor {
    map = |f, mb| Function::make(mb.@data >> f);
}

impl Function a: Monad {
    pure = |b| Function::make(|_| b);
    bind = |f, mb| Function::make(|a|
        let mc = f((mb.@data)(a));
        (mc.@data)(a)
    );
}
