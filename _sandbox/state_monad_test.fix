// TODO: use UnitTest
module Main;

import Sandbox.StateEx;

type App = unbox struct {
    users: Array String,
    pages: Array String
};

type StateApp = State App;

namespace App {
    empty: App;
    empty = App {
        users: Array::empty(0),
        pages: Array::empty(0)
    };
    
    get_app: [m: StateMonad] m App;
    get_app = get_state;

    mod_app: [m: StateMonad] m ();
    mod_app = mod_state;

    add_user: [m: StateMonad] String -> m ();
    add_user = |user| (
        mod_state(mod_users(push_back(user)))
    );

    add_page: [m: StateMonad] String -> m ();
    add_page = |page| (
        mod_state(mod_pages(push_back(page)))
    );

    get_users: [m: StateMonad] m (Array String);
    get_users = get_state.map(@users);

    get_pages: [m: StateMonad] m (Array String);
    get_pages = get_state.map(@pages);

    print_users: [m: StateIOMonad] m ();
    print_users = do {
        let users = *get_users;
        do {
            let _ = *println("---users---");
            users.to_iter.fold_m((), |_, u| println(u))
        }.from_io
    };

    print_pages: [m: StateIOMonad] m ();
    print_pages = do {
        let pages = *get_pages;
        do {
            let _ = *println("---pages---");
            pages.to_iter.fold_m((), |_, p| println(p))
        }.from_io
    };

    register_users: [m: StateMonad] m ();
    register_users = do {
        let _ = *add_user("taro");
        let _ = *add_user("jiro");
        let _ = *add_user("saburo");
        pure()
    };

    create_user_pages: [m: StateMonad] m ();
    create_user_pages = do {
        let users = *get_users;
        users.to_iter.fold_m(
            (), |_, user|
            add_page(user + "'s page")
        )
    };

    save_file: [m: StateIOFMonad] String -> m ();
    save_file = |path| (
        let users = *get_users;
        let pages = *get_pages;
        do {
            if path == "" { throw $ "Empty path" };
            let path = Path::parse(path);
            if path.is_none { throw $ "Path::parse failed" };
            let path = path.as_some;
            let fh = *open_file(path, "w");
            let _ = *users.to_iter.join(",").write_string(fh); 
            let _ = *pages.to_iter.join(",").write_string(fh); 
            let _ = *close_file(fh).lift;
            pure()
        }
        .from_iofail
    );
}

state_func: [m: StateMonad] m ();
state_func = do {
    let _ = *mod_state(|i| i+1);
    pure()
};

test_state: IO ();
test_state = do {
    let _ = *println("=== test_state ===");
    let m = do {
        let _ = *register_users;
        get_users
    };
    let (users,_) = m.run_state(App::empty);  // App 以外を指定するとpanicする
    let _ = *println(users.to_iter.join(","));
    pure()
};

//stateio_func: StateIO App ();
stateio_func: [m: StateIOMonad] m ();
stateio_func = do {
    let _ = *register_users;
    let _ = *create_user_pages;
    let _ = *print_users;
    let _ = *print_pages;
    pure()
};

test_stateio: IO ();
test_stateio = do {
    let _ = *println("=== test_stateio ===");
    let (_,s) = *stateio_func.run_stateio(App::empty);
    pure()
};

//stateiof_func: StateIOF App ();
// 返り値がTrait Monadの場合、Lazyにするとうまくいった。
stateiof_func: [m: StateIOFMonad] () -> m ();
stateiof_func = |_| do {
    let _ = *stateio_func;
    let _ = *save_file("");
    let _ = *println("completed.").from_io;
    pure()
};

test_stateiof: IO ();
test_stateiof = do {
    let _ = *println("=== test_stateiof ===").lift;
    let (_,s) = *stateiof_func().run_stateiof(App::empty);
    pure()
}.try(|err| eprintln("ERROR: " + err));

main: IO ();
main = (
    let _ = *test_state;
    let _ = *test_stateio;
    let _ = *test_stateiof;
    pure()
);
