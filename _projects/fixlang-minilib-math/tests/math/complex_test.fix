module ComplexTest;

import Math;

import Minilib.Math.Complex;
import Minilib.Testing.UnitTest;
import Minilib.Common.TimeEx;
import Minilib.Text.StringEx;

test_to_string: TestCase;
test_to_string = (
    make_test("test_to_string") $ |_|
    let a = complex(1.0, 2.0);
    let b = complex(-3.4, -5.6);
    let _ = *assert_equal("a", "1.000000+2.000000i", a.to_string);
    let _ = *assert_equal("b", "-3.400000+-5.600000i", b.to_string);
    pure()
);

test_eq: TestCase;
test_eq = (
    make_test("test_eq") $ |_|
    let a = complex(1.0, 2.0);
    let b = complex(3.0, 5.0);
    let _ = *assert_equal("a == a", true, a == a);
    let _ = *assert_equal("a != a", false, a != a);
    let _ = *assert_equal("a == b", false, a == b);
    let _ = *assert_equal("a != b", true, a != b);
    pure()
);

test_zero: TestCase;
test_zero = (
    make_test("test_zero") $ |_|
    let z: Complex F64 = zero;
    let _ = *assert_equal("re", 0.0, z.@re);
    let _ = *assert_equal("im", 0.0, z.@im);
    pure()
);

test_neg: TestCase;
test_neg = (
    make_test("test_add_sub_neg") $ |_|
    let a = complex(1.0, 2.0);
    let _ = *assert_equal("-a", complex(-1.0, -2.0), -a);
    let _ = *assert_equal("-a+a", zero, -a+a);
    pure()
);

test_add_sub: TestCase;
test_add_sub = (
    make_table_test("test_add_sub",
        [
            (complex(1.0, 2.0), complex(3.0, 5.0), complex(4.0, 7.0), complex(-2.0, -3.0)),
            (complex(1.0, 2.0), complex(0.0, 0.0), complex(1.0, 2.0), complex(1.0, 2.0)),
            (complex(0.0, 0.0), complex(1.0, 2.0), complex(1.0, 2.0), complex(-1.0, -2.0))
        ],
        |(a, b, expect_add, expect_sub)|
        let _ = *assert_equal("a+b", expect_add, a + b);
        let _ = *assert_equal("a-b", expect_sub, a - b);
        pure()
    )
);

test_mul: TestCase;
test_mul = (
    make_table_test("test_mul",
        [
            (complex(1.0, 2.0), complex(3.0, 4.0), complex(-5.0, 10.0)),
            (complex(1.2, 3.4), complex(1.0, 0.0), complex(1.2, 3.4)),
            (complex(1.2, 3.4), complex(0.0, 1.0), complex(-3.4, 1.2)),
            (complex(1.2, 3.4), complex(0.0, 0.0), complex(0.0, 0.0))
        ],
        |(a, b, expect)|
        assert_equal("a*b", expect, a*b)
    )
);

test_div: TestCase;
test_div = (
    make_table_test("test_div",
        [
            (complex(6.0, 3.0), complex(2.0, 1.0), complex(3.0, 0.0)),
            (complex(3.0, -6.0), complex(2.0, 1.0), complex(0.0, -3.0)),
            (complex(-5.0, 10.0), complex(3.0, 4.0), complex(1.0, 2.0)),
            (complex(1.2, 3.4), complex(1.0, 0.0), complex(1.2, 3.4))
        ],
        |(a, b, expect)|
        assert_equal("a/b", expect, a/b)
    )
);

test_abs: TestCase;
test_abs = (
    make_table_test("test_abs",
        [
            (complex(1.0, -2.0), 5.0),
            (complex(-3.0, 4.0), 25.0),
            (complex(0.0, 0.0), 0.0)
        ],
        |(a, expect)|
        let _ = *assert_equal("a.abs2", expect, a.abs2);
        let _ = *assert_equal("a.abs", sqrt(expect), a.abs);
        pure()
    )
);

test_arg: TestCase;
test_arg = (
    make_table_test("test_arg",
        [
            (complex(1.0, sqrt(3.0)), pi64 / 3.0),
            (complex(-1.0, -1.0), -pi64 * 3.0 / 4.0),
            (complex(0.0, 1.0), pi64 / 2.0)
        ],
        |(a, expect)|
        let _ = *assert_true("a.arg", (expect - a.arg).abs < 1.0e-6);
        pure()
    )
);

test_conj: TestCase;
test_conj = (
    make_table_test("test_conj",
        [
            (complex(6.0, 3.0), complex(6.0, -3.0)),
            (complex(1.2, -3.4), complex(1.2, 3.4))
        ],
        |(a, expect)|
        assert_equal("a.conj", expect, a.conj)
    )
);

main: IO ();
main = (
    [
        test_to_string,
        test_eq,
        test_zero,
        test_neg,
        test_add_sub,
        test_mul,
        test_div,
        test_abs,
        test_arg,
        test_conj,
        TestCase::empty
    ]
    .run_test_driver
);

