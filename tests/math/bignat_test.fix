module Main;

import Math;
import Debug;

import Minilib.Math.BigNat;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

// TODO: add tests

test_bit_length: TestCase;
test_bit_length = (
    make_table_test("test_bit_length",
        [
            ([0x76543210_U32, 0x00000a98_U32], 44_U64),
            ([0x01010101_U32, 4_U32], 35_U64),
            ([0xabababab_U32, 1_U32], 33_U64),
            ([0xcdcdcdcd_U32, 0_U32], 32_U64),
            ([0_U32, 0_U32], 0_U64),
            ([1_U32], 1_U64),
            ([0_U32], 0_U64)
        ],
        |(a, expect)|
        assert_equal("eq", expect, a._bit_length)
    )
);

test_shift_left: TestCase;
test_shift_left = (
    make_table_test("test_shift_left",
        [
            ([0x1234_U32, 0xabcd_U32], 56_U64, [0_U32, 0x34000000_U32, 0xcd000012_U32, 0xab_U32]),
            ([0x1234_U32, 0xabcd_U32], 32_U64, [0_U32, 0x1234_U32, 0xabcd_U32]),
            ([0x1234_U32, 0xabcd_U32], 4_U64,  [0x12340_U32, 0xabcd0_U32]),
            ([0x76543210_U32, 0xfedcba98_U32], 1_U64, [0xeca86420_U32, 0xfdb97530_U32, 0x1_U32]),
            ([0x1234_U32, 0_U32], 36_U64, [0_U32, 0x12340_U32, 0_U32]),
            ([0x1234_U32, 0_U32], 32_U64, [0_U32, 0x1234_U32, 0_U32]),
            ([0x1234_U32, 0_U32], 4_U64, [0x12340_U32, 0_U32]),
            ([0_U32], 0_U64, [0_U32])
        ],
        |(a, shift, expect)|
        assert_equal("eq", expect, a._shift_left(shift))
    )
);

test_shift_right: TestCase;
test_shift_right = (
    make_table_test("test_shift_right",
        [
            ([0x76543210_U32, 0xfedcba98_U32], 1_U64, [0x3b2a1908_U32, 0x7f6e5d4c_U32]),
            ([0x76543210_U32, 0xfedcba98_U32], 4_U64, [0x87654321_U32, 0x0fedcba9_U32]),
            ([0x76543210_U32, 0xfedcba98_U32], 32_U64, [0xfedcba98_U32]),
            ([0x76543210_U32, 0xfedcba98_U32], 36_U64, [0x0fedcba9_U32]),
            ([0x76543210_U32, 0xfedcba98_U32], 64_U64, [0_U32]),
            ([0x76543210_U32, 0xfedcba98_U32], 65_U64, [0_U32]),
            ([0x1234_U32, 0_U32], 32_U64, [0_U32]),
            ([0x1234_U32, 0_U32], 16_U64, [0_U32]),
            ([0_U32], 0_U64, [0_U32])
        ],
        |(a, shift, expect)|
        assert_equal("eq", expect, a._shift_right(shift))
    )
);

test_divmod_by_power_of_two: TestCase;
test_divmod_by_power_of_two = (
    make_table_test("test_divmod_by_power_of_two",
        [
            ([0x76543210_U32, 0xfedcba98_U32], 0_U64,  ([0x76543210_U32, 0xfedcba98_U32], [0x00_U32])),
            ([0x76543210_U32, 0xfedcba98_U32], 8_U64,  ([0x98765432_U32, 0x00fedcba_U32], [0x10_U32])),
            ([0x76543210_U32, 0xfedcba98_U32], 16_U64, ([0xba987654_U32, 0x0000fedc_U32], [0x3210_U32])),
            ([0x76543210_U32, 0xfedcba98_U32], 32_U64, ([0xfedcba98_U32], [0x76543210_U32])),
            ([0x76543210_U32, 0xfedcba98_U32], 36_U64, ([0x0fedcba9_U32], [0x76543210_U32, 0x08_U32])),
            ([0x76543210_U32, 0xfedcba98_U32, 0x4321_U32], 36_U64, ([0x1fedcba9_U32, 0x432_U32], [0x76543210_U32, 0x08_U32])),
            ([0x76543210_U32, 0xfedcba98_U32], 64_U64, ([0_U32], [0x76543210_U32, 0xfedcba98_U32])),
            ([0x76543210_U32, 0xfedcba98_U32], 65_U64, ([0_U32], [0x76543210_U32, 0xfedcba98_U32])),
            ([0xfedcba98_U32], 16_U64, ([0xfedc_U32], [0xba98_U32])),
            ([0x1234_U32, 0_U32], 32_U64, ([0_U32], [0x1234_U32])),
            ([0_U32], 0_U64, ([0_U32], [0_U32]))
        ],
        |(a, exp, expect)|
        assert_equal("eq", expect, _divmod_by_power_of_two(a, exp))
    )
);

main: IO ();
main = (
    [
        test_bit_length,
        test_shift_left,
        test_shift_right,
        test_divmod_by_power_of_two,
        TestCase::empty
    ]
    .run_test_driver
);
