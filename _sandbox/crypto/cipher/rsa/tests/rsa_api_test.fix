module Main;

import AsyncTask;
import HashMap;
import Random;

import Minilib.Crypto.Cipher.Rsa.RsaApi;
import Minilib.Crypto.Cipher.Rsa.RsaApiDefault;
//import Minilib.Crypto.Cipher.Rsa.RsaApiMock;
import Minilib.Crypto.Cipher.Rsa.RSAPrivateKey;
import Minilib.Monad.Random;
import Minilib.Monad.State;
import Minilib.Testing.UnitTest;
import Minilib.Text.Hex;
import Minilib.Text.StringEx;

// For how to generate this private key, see `rsa_private_key_test.fix`.
private_key_hex: String;
private_key_hex = "3082025d02010002818100eb36b2ca5230d1f4befd61d84bc165859ee376645f6c8859ce777df91d0fd384540a4dc1f338a686c266a8caa9dac3f86c5d9252074a38e010095454ab2ff78c11835a04be3913f09b094b47ba3e9e14f969cbb2fce1ae2aa5d05de5794bcc48758ccf26bf1ae634b8b1b25750aaf1388fbfc49c0cfd7b6d2b7eac5872134cf3020301000102818100e6255e2982e44bfb3b09783c885b5237bd30f97ddab4ba718d08f454d4afd099b11567e1f7571df1cbb36142f3919fa0aa7fa014ed171db1775f798962fb0b2dbd11580b67cfeda3262e033d9e19d0db2697793dab18a2423b814750ef2ee21c4965f6cada5f90251e580a8100330de2a5974319ce6074710dbf81f07c1553b1024100f8a4eb7e64fcbda228fd4ef4af21515e8f11d3724a47bca0202b6364c116d590265f1961f6a1dee7c4bb2b43877143c67ef54f9e2fb6ace08cc023279b6bf9d9024100f22c104c3f232811846909c898b133f500dcf77632218c9b558b5a714cb7b1fb45c080a83aee7a20278ebe328d172d338491af63aae8f05b738ce6ef8abc11ab02400173fd4854d0c14ef44c5eacc16541737b0490a6c75659fcd99347566c6674c30de65a609f2f5cfd1fc2344385c41cb04947a7ba75eeec5db794dbdfbc61ca29024059ccf9262ceb6e7a406d6ad155bdb01494035c481a02d2ceef03c3bfebc0da60e0d6a75ebaab9fe1b8897801eacbc3592d39909e16cc5604b36e765c3147d80d024100b9ea206cda5a957186937ecd3df5d4b2e34b5b31816b06c8f20703772811edf32bf39beba4e71720fa1c7a39e4c5568b07c58ae6e5c4b1d2f4704959e3bdfc9f";

public_key_hex: String;
public_key_hex = "30818902818100eb36b2ca5230d1f4befd61d84bc165859ee376645f6c8859ce777df91d0fd384540a4dc1f338a686c266a8caa9dac3f86c5d9252074a38e010095454ab2ff78c11835a04be3913f09b094b47ba3e9e14f969cbb2fce1ae2aa5d05de5794bcc48758ccf26bf1ae634b8b1b25750aaf1388fbfc49c0cfd7b6d2b7eac5872134cf30203010001";

test_rsassa_pss_verify: TestCase;
test_rsassa_pss_verify = (
    make_test("test_rsassa_pss_verify") $ |_|
    let private_key: Array U8 = *from_string_hex(private_key_hex).from_result;
    let public_key: Array U8 = *from_string_hex(public_key_hex).from_result;
    let message: Array U8 = Array::from_map(1024, |i| i.to_U8);
    let rsa_api = *make_rsa_api.from_result;
    let hash_name = "sha256";

    // Signing
    let random = Random::init_by_seed(123_U64);
    let var_random = *Var::make(random).lift;
    let free_random: FreeRandom (Result ErrMsg (Array U8)) = @rsassa_pss_sign(rsa_api, hash_name, private_key, message);
    let signature: Result ErrMsg (Array U8) = *free_random.interpret.eval_state_t(var_random);
    let signature: Array U8 = *signature.from_result;

    // Verifying
    eval *@rsassa_pss_verify(rsa_api, hash_name, public_key, message, signature).from_result;

    pure()
);

test_rsassa_pkcs1_v1_5: TestCase;
test_rsassa_pkcs1_v1_5 = (
    make_test("test_cavp_rsassa_pkcs1_v1_5") $ |_|
    let private_key: Array U8 = *from_string_hex(private_key_hex).from_result;
    let public_key: Array U8 = *from_string_hex(public_key_hex).from_result;
    let message: Array U8 = Array::from_map(1024, |i| i.to_U8);
    let hash_name = "sha256";

    let rsa_api = *make_rsa_api.from_result;

    // Signing
    let signature = *@rsassa_pkcs1_v1_5_sign(rsa_api, hash_name, private_key, message).from_result;

    // Verifying
    eval *@rsassa_pkcs1_v1_5_verify(rsa_api, hash_name, public_key, message, signature).from_result;

    pure()
);


main: IO ();
main = (
    [
        test_rsassa_pss_verify,
        test_rsassa_pkcs1_v1_5,
    ]
    .run_test_driver
);
