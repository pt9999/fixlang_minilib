
module Main;

import Minilib.Trait.Applicative;
import Minilib.Trait.Traversable;
//import Minilib.Functor.ZipList;
import Minilib.Testing.UnitTest;

test_array_sequence_a: TestCase;
test_array_sequence_a = (
    make_test("test_array_sequence_a") $ |_|
    let arr: Array (Option I64) = [some(1),some(2),some(3)];
    let opt: Option (Array I64) = arr.sequence_a;
    assert_equal("eq", some $ [1, 2, 3], opt);;
    let arr: Array (Option I64) = [some(1),none(),some(3)];
    let opt: Option (Array I64) = arr.sequence_a;
    assert_equal("eq", none(), opt);;
    /*
    let arr: Array (ZipList I64) = [
        ZipList::from_array $ [1, 2],
        ZipList::from_array $ [3, 4, 5]
    ];
    let zl: ZipList (Array I64) = arr.sequence_a;
    assert_equal("eq", [[1], [3]], zl.to_array);;
    */
    pure()
);

test_array_sequence: TestCase;
test_array_sequence = (
    make_test("test_array_sequence") $ |_|
    let arr: Array (Result ErrMsg I64) = [ok(1),ok(2),ok(3)];
    let res: Result ErrMsg (Array I64) = arr.sequence;
    assert_equal("eq", ok $ [1, 2, 3], res);;
    let arr: Array (Result ErrMsg I64) = [ok(1),err("err"),ok(3)];
    let res: Result ErrMsg (Array I64) = arr.sequence;
    assert_equal("eq", err("err"), res);;
    let arr: Array (IOFail I64) = [pure(1),pure(2),pure(3)];
    let res: Result ErrMsg (Array I64) = *arr.sequence.to_result.lift;
    assert_equal("eq", ok $ [1, 2, 3], res);;
    let arr: Array (IOFail I64) = [pure(1),throw("err"),pure(3)];
    let res: Result ErrMsg (Array I64) = *arr.sequence.to_result.lift;
    assert_equal("eq", err("err"), res);;
    pure()
);

// TODO: add tests

main: IO ();
main = (
    [
        test_array_sequence_a,
        test_array_sequence,
    ]
    .run_test_driver
);
