module Main;

import Debug;

import Minilib.Monad.Error;
import Minilib.Monad.State;
import Minilib.Testing.UnitTest;

test_result_error: TestCase;
test_result_error = (
    make_test("test_result_error") $ |_|
    let f: I64 -> Result ErrMsg I64 = |i| (
        if i == 0 { error $ "i==0" };
        pure $ i
    );
    eval *assert_equal("eq1", ok(1), f(1));
    eval *assert_equal("eq2", err("i==0"), f(0));
    pure()
);

test_iofail_error: TestCase;
test_iofail_error = (
    make_test("test_iofail_error") $ |_|
    let f: I64 -> IOFail I64 = |i| (
        if i == 0 { error $ "i==0" };
        pure $ i
    );
    eval *assert_equal("eq1", ok(1), *f(1).to_result.lift);
    eval *assert_equal("eq2", err("i==0"), *f(0).to_result.lift);
    pure()
);


main: IO ();
main = (
    [
        test_result_error,
        test_iofail_error,
    ]
    .run_test_driver
);