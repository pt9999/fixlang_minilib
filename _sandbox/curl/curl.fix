module Minilib.Net.Curl;

import AsyncTask;
import Debug;
import Minilib.Text.StringEx;

type Curl = box struct {
    dtor: Destructor Ptr
};

make: IOFail Curl;
make = (
    eval *pure();
    eval debug_eprintln("curl_glue_init");
    let glue = FFI_CALL[Ptr curl_glue_init()];
    let curl = Curl {
        dtor: Destructor::make(glue, |glue|
            eval debug_eprintln("curl_glue_cleanup");
            FFI_CALL[() curl_glue_cleanup(Ptr), glue]
        )
    };
    pure $ curl
);

_check_error: CInt -> Ptr -> IOFail ();
_check_error = |code, glue| (
    if code != 0.to_CInt {
        let errmsg = FFI_CALL[Ptr curl_glue_get_error_message(Ptr), glue];
        throw $ String::_unsafe_from_c_str_ptr(errmsg)
    };
    pure()
);

set_url: String -> Curl -> IOFail ();
set_url = |url, curl| (
    eval *pure();
    url.borrow_c_str(|p_url|
        curl.@dtor.borrow(|glue|
            glue._check_error(FFI_CALL[CInt curl_glue_set_url(Ptr, Ptr), glue, p_url])
        )
    )
);

perform: Curl -> IOFail ();
perform = |curl| (
    eval *pure();
    curl.@dtor.borrow(|glue|
        glue._check_error(FFI_CALL[CInt curl_glue_perform(Ptr), glue])
    )
);

set_boxed_value: I64 -> Boxed a -> Curl -> IOFail ();
set_boxed_value = |index, boxed, curl| (
    eval *pure();
    curl.@dtor.borrow(|glue|
        let retained_ptr = FFI::unsafe_get_retained_ptr_of_boxed_value(boxed);
        let retain = FFI::unsafe_get_retain_function_of_boxed_value(boxed);
        let release = FFI::unsafe_get_release_function_of_boxed_value(boxed);
        pure $ FFI_CALL[() curl_glue_set_boxed_value(Ptr, CInt, Ptr, Ptr, Ptr), glue, index.to_CInt, retained_ptr, retain, release]
    )
);

get_boxed_value: I64 -> Curl -> IOFail (Boxed a);
get_boxed_value = |index, curl| (
    eval *pure();
    curl.@dtor.borrow(|glue|
        pure $ _get_boxed_value(index, glue)
    )
);

_get_boxed_value: I64 -> Ptr -> Boxed a;
_get_boxed_value = |index, glue| (
    let retained_ptr = FFI_CALL[Ptr curl_glue_get_boxed_value(Ptr, CInt), glue, index.to_CInt];
    FFI::unsafe_get_boxed_value_from_retained_ptr(retained_ptr)
);

_callback_write_function: Ptr -> CSizeT -> CSizeT -> Ptr -> CSizeT;
_callback_write_function = |ptr, size, nmemb, userdata| (
    let glue = userdata;
    //eval debug_eprintln("_callback_write_function: nmemb=" + nmemb.to_string);
    eval assert(|_| "invalid size", size == 1.to_CSizeT);
    eval assert(|_| "invalid nmemb", nmemb >= 0.to_CSizeT);

    let bytes: Array U8 = Array::fill(nmemb.to_I64, 0_U8);
    eval bytes.borrow_ptr(|p_bytes|
        FFI_CALL[() memcpy(Ptr, Ptr, CSizeT), p_bytes, ptr, nmemb]
    );

    let boxed: Boxed WriteFunc = glue._get_boxed_value(0);
    let iof: IOFail I64 = (boxed.@value)(bytes);
    let res: Result ErrMsg I64 = iof.to_result._unsafe_perform;
    if res.is_err {
        eval debug_eprintln("err=" + res.as_err);
        0.to_CSizeT
    };
    res.as_ok.to_CSizeT
);
FFI_EXPORT[_callback_write_function, _callback_write_function];

type WriteFunc = Array U8 -> IOFail I64;

set_write_callback: WriteFunc -> Curl -> IOFail ();
set_write_callback = |func, curl| (
    eval *pure();
    let func = mark_threaded(func);
    let boxed: Boxed WriteFunc = mark_threaded(Boxed { value: func });
    eval *curl.set_boxed_value(0, boxed);
    curl.@dtor.borrow(|glue|
        glue._check_error(FFI_CALL[CInt curl_glue_set_write_callback(Ptr), glue])
    )
);
