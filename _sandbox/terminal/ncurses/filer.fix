module Main;

import Minilib.IO.FileSystem;
import Minilib.IO.Path;
import Minilib.Monad.State;
import Minilib.Monad.IO;
import Minilib.Terminal.Ncurses;
import Minilib.Trait.Traversable;
import Minilib.Text.StringEx;

type StateIOF s = StateT s IOFail;

select_state: [m: Monad] (s -> a) -> StateT s m a;
select_state = |selector| get_state.map(selector);

namespace StringUtils {
    pad_right: I64 -> U8 -> String -> String;
    pad_right = |result_size, char, str| (
        let str_size = str.get_size;
        if str_size >= result_size {
            str.get_sub(0, result_size)
        };
        let pad_size = result_size - str_size;
        let pad = Array::fill(pad_size, char)._unsafe_to_string;
        str + pad
    );

    pad_left: I64 -> U8 -> String -> String;
    pad_left = |result_size, char, str| (
        let str_size = str.get_size;
        if str_size >= result_size {
            str.get_sub(str_size - result_size, str_size)
        };
        let pad_size = result_size - str_size;
        let pad = Array::fill(pad_size, char)._unsafe_to_string;
        pad + str
    );

    ellipsis: I64 -> String -> String;
    ellipsis = |result_size, str| (
        let str_size = str.get_size;
        let result_size = max(0, result_size);
        if str_size <= result_size { str };
        if result_size < 3 { str.get_sub(0, result_size) };
        "..." + str.get_sub(str_size - (result_size - 3), str_size)
    );
}

namespace CustomColorPair {
    cp_selected: ColorPair;
    cp_selected = 10;

    init_custom_color_pairs: IOFail ();
    init_custom_color_pairs = (
        pure();;    // make it lazy
        init_color_pair(cp_selected, white, blue);;
        pure()
    );
}

type ListViewId = I64;

type Action = unbox union {
    no_action: (),
    action_quit: (),
    action_next_focus: (),
    action_select_prev_item: ListViewId,
    action_select_next_item: ListViewId,
    action_page_up: ListViewId,
    action_page_down: ListViewId,
    action_open_file: (),
    action_up_directory: (),
};

type ListItem = unbox struct {
    text: String,
    attr: ChType
};

type ListView = unbox struct {
    id: I64,
    window: Window,
    visible: Bool,
    has_focus: Bool,
    title: String,
    items: Array ListItem,
    scroll_top: I64,
    selected_index: I64,
    message: String,
};

namespace ListView {
    make: Window -> Array ListItem -> IOFail ListView;
    make = |window, items| (
        pure $ ListView {
            id: 0,
            window: window,
            visible: true,
            has_focus: false,
            title: "",
            items: items,
            scroll_top: 0,
            selected_index: -1,
            message: "",
        }
    );

    show: StateIOF ListView ();
    show = (
        let ListView {
            has_focus: has_focus,
            title: title,
            items: items,
            scroll_top: scroll_top,
            selected_index: selected_index,
            message: message,
            window: window
        } = *get_state;

        window.clear;;

        let (w, h) = *window.get_window_size;
        let visible_lines = max(0, h - 2);
        let scroll_top = (
            if selected_index < 0 {
                scroll_top
            } else if selected_index < scroll_top || scroll_top + visible_lines <= selected_index {
                max(0, selected_index - visible_lines / 2)
            } else {
                scroll_top
            }
        );
        State::mod_state(set_scroll_top(scroll_top));;

        loop_m(
            0, |i|
            let item_index = scroll_top + i;
            if i >= visible_lines || item_index >= items.get_size { break_m $ () };
            let item = items.@(item_index);
            if item_index == selected_index {
                if (has_focus) {
                    window.set_color_pair(cp_selected, normal)
                } else {
                    window.set_color_pair(cp_selected, dim)
                }
            } else {
                //window.set_color_pair(cp_white, normal)
                window.set_attr(item.@attr)
            };;
            window.move_add_str(1, i + 1, item.@text);;
            continue_m $ i + 1
        );;
        if (has_focus) {
            window.set_color_pair(cp_green, normal)
        } else {
            window.set_color_pair(cp_white, normal)
        };;
        window.draw_border;;
        window.move_add_str(2, 0, " " + ellipsis(w - 6, title) + " ").when(title != "");;
        window.move_add_str(2, h - 1, " " + ellipsis(w - 6, message) + " ").when(message != "");;
        window.refresh;;
        pure()
    );

    handle_key: KeyName -> StateIOF ListView Action;
    handle_key = |key| (
        let id = *select_state(@id);

        if key == "q" || key == "Q" || key == "KEY_ESC" {
            pure $ action_quit()
        };
        if key == "j" || key == "KEY_DOWN" {
            pure $ action_select_next_item(id)
        };
        if key == "k" || key == "KEY_UP" {
            pure $ action_select_prev_item(id)
        };
        if key == "KEY_PPAGE" {
            pure $ action_page_up(id)
        };
        if key == "KEY_NPAGE" {
            pure $ action_page_down(id)
        };
        if key == "^I" {
            pure $ action_next_focus()
        };
        pure $ no_action()
    );

    handle_action: Action -> StateIOF ListView ();
    handle_action = |action| (
        match action {
            action_select_prev_item(target) => ListView::select_prev_item(target),
            action_select_next_item(target) => ListView::select_next_item(target),
            action_page_up(target) => ListView::page_up(target),
            action_page_down(target) => ListView::page_down(target),
            _ => pure()
        }
    );

    has_focus: StateIOF ListView Bool;
    has_focus = select_state(@has_focus);

    set_focus: Bool -> StateIOF ListView ();
    set_focus = |focus| mod_state $ set_has_focus(focus);

    get_key: StateIOF ListView KeyName;
    get_key = (
        let window = *select_state(ListView::@window);
        window.get_key
    );

    window_size: StateIOF ListView (I64, I64);
    window_size = (
        let window = *select_state(ListView::@window);
        window.get_window_size
    );

    select_next_item: ListViewId -> StateIOF ListView ();
    select_next_item = |target| (
        if target != *select_state(@id) { pure() };
        let size = *select_state(|s| s.@items.get_size);
        mod_state $ mod_selected_index(|index| min(size - 1, index + 1))
    );

    select_prev_item: ListViewId -> StateIOF ListView ();
    select_prev_item = |target| (
        if target != *select_state(@id) { pure() };
        mod_state $ mod_selected_index(|index| max(0, index - 1))
    );

    page_down: ListViewId -> StateIOF ListView ();
    page_down = |target| (
        if target != *select_state(@id) { pure() };
        let size = *select_state(|s| s.@items.get_size);
        let (w, h) = *ListView::window_size;
        mod_state $ mod_selected_index(|index| min(size - 1, index + h / 2))
    );

    page_up: ListViewId -> StateIOF ListView ();
    page_up = |target| (
        if target != *select_state(@id) { pure() };
        let (w, h) = *ListView::window_size;
        mod_state $ mod_selected_index(|index| max(0, index - h / 2))
    );
}

trait s: WithListView {
    type ListViewType s;
    with_list_view: [m: Monad, m: Functor] StateT (ListViewType s) m a -> StateT s m a;
}


type FileItem = box struct {
    file_name: String,
    file_path: String,
    stat: FileStat,
};

namespace FileItem {
    get_file_item: String -> String -> IOFail FileItem;
    get_file_item = |dir_path, file_name| (
        let file_path = join_paths([dir_path, file_name]);
        pure $ FileItem {
            file_name: file_name,
            file_path: file_path,
            stat: *stat(file_path)
        }
    );

    get_file_items: String -> IOFail (Array FileItem);
    get_file_items = |dir_path| (
        let file_names = *list_dir(dir_path);
        file_names.map_m(|name| get_file_item(dir_path, name))
    );

    format_file_item: FileItem -> String;
    format_file_item = |item| (
        let name = item.@file_name;
        let stat = item.@stat;
        let name = if stat.is_dir { name + "/" }
        else if stat.st_mode.bit_and(0o100_U32) == 0o100_U32 { name + "*" }
        else { name };
        name.pad_right(20, ' ') +
        stat.st_size.to_string.pad_left(13, ' ')
    );

    get_attr: FileItem -> ChType;
    get_attr = |item| (
        let stat = item.@stat;
        if stat.is_dir { color_pair(cp_blue).bit_or(bold) };
        if stat.st_mode.bit_and(0o100_U32) == 0o100_U32 { color_pair(cp_green).bit_or(bold) };
        color_pair(cp_white)
    );

    to_list_item: FileItem -> ListItem;
    to_list_item = |file_item| (
        ListItem {
            text: file_item.format_file_item,
            attr: file_item.get_attr
        }
    );
}

type FileListView = unbox struct {
    list_view: ListView,
    dir_path: String,
    file_items: Array FileItem,
};

impl FileListView: WithListView {
    type ListViewType FileListView = ListView;
    with_list_view = |sm| sm.lens_state_t(act_list_view);
}

namespace FileListView {
    make: Window -> String -> IOFail FileListView;
    make = |window, dir_path| (
        let file_items = *get_file_items(dir_path);
        let list_items = file_items.map(to_list_item);
        let list_view = *ListView::make(window, list_items);
        let list_view = list_view.set_title(dir_path);
        pure $ FileListView {
            list_view: list_view,
            dir_path: dir_path,
            file_items: file_items,
        }
    );

    has_focus: StateIOF FileListView Bool;
    has_focus = with_list_view(has_focus);

    selected_item: StateIOF FileListView (Option FileItem);
    selected_item = (
        let file_items = *select_state(@file_items);
        let selected_index = *with_list_view(select_state(@selected_index));
        if 0 <= selected_index && selected_index < file_items.get_size {
            pure $ some $ file_items.@(selected_index)
        } else {
            pure $ none()
        }
    );

    select_item_by_name: String -> StateIOF FileListView ();
    select_item_by_name = |name| (
        let file_items = *select_state(@file_items);
        match file_items.find_by(|item| item.@file_name == name) {
            none() => pure(),
            some(index) => with_list_view $ mod_state(set_selected_index(index))
        }
    );

    show: StateIOF FileListView ();
    show =  (
        with_list_view $ ListView::show
    );

    handle_key: StateIOF FileListView Action;
    handle_key = (
        let key = *with_list_view(ListView::get_key);
        //eval debug_eprintln(key);

        let action = *with_list_view(ListView::handle_key(key));
        if ! action.is_no_action { pure $ action };

        if key == "^J" || key == "KEY_ENTER" {
            pure $ action_open_file()
        };
        if key == "^" {
            pure $ action_up_directory()
        };
        pure $ no_action()
    );

    handle_action: Action -> StateIOF FileListView ();
    handle_action = |action| (
        with_list_view(ListView::handle_action(action));;
        match action {
            action_up_directory() => up_directory,
            _ => pure()
        }
    );

    open_directory: String -> StateIOF FileListView ();
    open_directory = |dir_path| (
        let focus = *with_list_view(has_focus);
        let window = *with_list_view(select_state(@window));
        put_state $ *FileListView::make(window, dir_path).lift_iofail;;
        with_list_view(set_focus(focus));;
        pure()
    );

    up_directory: StateIOF FileListView ();
    up_directory = (
        let dir_path = *select_state(@dir_path);
        if dir_path == "/" {
            pure()
        };
        let dir_name = Path::basename(dir_path);
        let parent_path = Path::dirname(dir_path);
        open_directory(parent_path);;
        select_item_by_name(dir_name)
    );
}

type FileView = unbox struct {
    list_view: ListView,
};

impl FileView: WithListView {
    type ListViewType FileView = ListView;
    with_list_view = |sm| sm.lens_state_t(act_list_view);
}

namespace FileView {
    make: Window -> IOFail FileView;
    make = |win| (
        pure $ FileView {
            list_view: *ListView::make(win, []),
        }
    );

    has_focus: StateIOF FileView Bool;
    has_focus = with_list_view(has_focus);

    open_file: String -> StateIOF FileView ();
    open_file = |file_path| (
        let contents = *read_file_bytes(file_path).lift_iofail;
        let contents = contents._unsafe_to_string;
        let items = contents.split("\n").to_array.map(|line|
            let line = if line == "" { " " } else { line };
            ListItem {
                text: line,
                attr: normal
            }
        );
        with_list_view $ mod_state(set_items(items) >> set_title(Path::basename(file_path)))
    );

    show: StateIOF FileView ();
    show = (
        with_list_view(ListView::show)
    );

    handle_key: StateIOF FileView Action;
    handle_key = (
        let key = *with_list_view(ListView::get_key);
        //eval debug_eprintln(key);

        let action = *with_list_view(ListView::handle_key(key));
        if ! action.is_no_action { pure $ action };

        pure $ no_action()
    );

    handle_action: Action -> StateIOF FileView ();
    handle_action = |action| (
        with_list_view(ListView::handle_action(action));;
        match action {
            _ => pure $ ()
        }
    );
}

type App = unbox struct {
    window: Window,
    file_list_view: FileListView,
    file_view: FileView,
};

namespace App {
    make: Window -> IOFail App;
    make = |win| (
        let (w, h) = *win.get_window_size;
        let flv_w = w * 1 / 3;
        let flv_win = *win.make_sub_window(0, 0, flv_w, h);
        let fv_win = *win.make_sub_window(flv_w, 0, w - flv_w, h);
        let flv = *FileListView::make(flv_win, *realpath("."));
        let flv = flv.mod_list_view(set_id(0) >> set_has_focus(true));
        let fv = *FileView::make(fv_win);
        let fv = fv.mod_list_view(set_id(1) >> set_has_focus(false));
        pure $ App {
            window: win,
            file_list_view: flv,
            file_view: fv
        }
    );

    with_file_list_view: StateIOF FileListView a -> StateIOF App a;
    with_file_list_view = |sm| sm.lens_state_t(act_file_list_view);

    with_file_view: StateIOF FileView a -> StateIOF App a;
    with_file_view = |sm| sm.lens_state_t(act_file_view);

    show: StateIOF App ();
    show = (
        with_file_list_view(FileListView::show);;
        with_file_view(FileView::show);;
        pure()
    );

    get_focus: StateIOF App I64;
    get_focus = (
        if *with_file_list_view(has_focus) { pure $ 0 };
        if *with_file_view(has_focus) { pure $ 1 };
        pure $ -1
    );

    set_focus: I64 -> StateIOF App ();
    set_focus = |id| (
        with_file_list_view $ with_list_view $ set_focus(id == 0);;
        with_file_view $ with_list_view $ set_focus(id == 1);;
        pure()
    );

    next_focus: StateIOF App ();
    next_focus = (
        let focus = *get_focus;
        set_focus((focus + 1) % 2)
    );

    handle_key: StateIOF App Action;
    handle_key = (
        let focus = *get_focus;
        if focus == 0 { with_file_list_view $ FileListView::handle_key };
        if focus == 1 { with_file_view $ FileView::handle_key };
        pure $ no_action()
    );

    handle_action: Action -> StateIOF App ();
    handle_action = |action| (
        with_file_list_view $ FileListView::handle_action(action);;
        with_file_view $ FileView::handle_action(action);;
        match action {
            action_next_focus() => next_focus,
            action_open_file() => (
                match *with_file_list_view(selected_item) {
                    none() => pure(),
                    some(item) => (
                        if item.@stat.is_dir {
                            with_file_list_view(FileListView::open_directory(item.@file_path))
                        };
                        if item.@stat.is_file {
                            with_file_view(FileView::open_file(item.@file_path))
                        };
                        pure()
                    )
                }
            ),
            _ => pure()
        }
    );
}

main: IO ();
main = do {
    Ncurses::run $ |win| (
        init_custom_color_pairs;;
        let app = *App::make(win);
        loop_m(
            (), |_|
            App::show;;
            let action = *App::handle_key;
            if action.is_action_quit {
                break_m $ ()
            };
            App::handle_action(action);;
            continue_m $ ()
        ).eval_state_t(app)
    )
}.try(eprintln);
