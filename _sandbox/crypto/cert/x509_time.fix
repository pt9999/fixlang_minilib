module Minilib.Crypto.Cert.X509Time;

import Time;

import Minilib.Crypto.Cert.Asn1;
import Minilib.Crypto.Cert.Asn1Der;
import Minilib.Monad.Error;
import StringEx;

// A structure that represents a specific point in time.
// Same as `Time::Time`, but redefined as another type
// in order to implement several functionalities for X.509.
type X509Time = unbox struct { sec : I64, nanosec : U32 };

namespace X509Time {
    make: I64 -> U32 -> X509Time;
    make = |sec, nanosec| X509Time {
        sec: sec,
        nanosec: nanosec
    };

    to_time: X509Time -> Time::Time;
    to_time = |asn1_time| Time::Time {
        sec: asn1_time.@sec,
        nanosec: asn1_time.@nanosec
    };

    from_time: Time::Time -> X509Time;
    from_time = |time| X509Time {
        sec: time.@sec,
        nanosec: time.@nanosec
    };

    get_now: IO X509Time;
    get_now = (
        Time::get_now.map(from_time)
    );

    from_utc: Time::DateTime -> Result ErrMsg X509Time;
    from_utc = Time::from_utc >> map(from_time);

    to_utc: X509Time -> Result ErrMsg Time::DateTime;
    to_utc = to_time >> Time::to_utc;

    format: DateTimeFormat::FormatFunc -> X509Time -> String;
    format = |format_func, time| (
        time.to_utc
        .map(|datetime| DateTimeFormat::format(datetime, format_func))
        .catch(|errmes| pure $ "err:" + errmes)
        .as_ok
    );

    // Converts a X.509 GeneralizedTime string (YYYYMMDDHHMMSSZ) to a X509Time.
    from_generalized_time_string: String -> Result ErrMsg X509Time;
    from_generalized_time_string = |str| (
        if str.get_size != 15 {
            err $ "from_generalized_time_string: length mismatch: " + str
        };
        if str.get_bytes.@(14) != 'Z' {
            err $ "from_generalized_time_string: invalid format: " + str
        };
        let datetime = Time::DateTime {
            year: *from_string(str.substring(0, 4)).map(I64::to_I32),
            month: *from_string(str.substring(4, 6)).map(I64::to_U8),
            day_in_month: *from_string(str.substring(6, 8)).map(I64::to_U8),
            hour: *from_string(str.substring(8, 10)).map(I64::to_U8),
            min: *from_string(str.substring(10, 12)).map(I64::to_U8),
            sec: *from_string(str.substring(12, 14)).map(I64::to_U8),
            nanosec: 0_U32,
            day_in_week: 0_U8,
            day_in_year: 0_U32,
            is_dst: none()
        };
        X509Time::from_utc(datetime)
    );

    // Converts a X509Time to a X.509 GeneralizedTime string (YYYYMMDDHHMMSSZ).
    to_generalized_time_string: X509Time -> String;
    to_generalized_time_string = |time| (
        time.format(
            |(year, month, day, hour, minute, second, nanosec)|
            year + month + day + hour + minute + second + "Z"
        )
    );

    // Converts a X.509 UTCTime string (YYMMDDHHMMSSZ) to a X509Time.
    from_utc_time_string: String -> Result ErrMsg X509Time;
    from_utc_time_string = |str| (
        if str.get_size != 13 {
            err $ "from_utc_time_string: length mismatch: " + str
        };
        if str.get_bytes.@(12) != 'Z' {
            err $ "from_utc_time_string: invalid format: " + str
        };
        let datetime = Time::DateTime {
            year: *from_string(str.substring(0, 2)).map(
                        // RFC5280 4.1.2.5.1. UTCTime
                        // Where YY is greater than or equal to 50, the year SHALL be interpreted as 19YY; and
                        // Where YY is less than 50, the year SHALL be interpreted as 20YY.
                        |yy| if yy >= 50 { yy + 1900 } else { yy + 2000 }
                    ).map(I64::to_I32),
            month: *from_string(str.substring(2, 4)).map(I64::to_U8),
            day_in_month: *from_string(str.substring(4, 6)).map(I64::to_U8),
            hour: *from_string(str.substring(6, 8)).map(I64::to_U8),
            min: *from_string(str.substring(8, 10)).map(I64::to_U8),
            sec: *from_string(str.substring(10, 12)).map(I64::to_U8),
            nanosec: 0_U32,
            day_in_week: 0_U8,
            day_in_year: 0_U32,
            is_dst: none()
        };
        X509Time::from_utc(datetime)
    );
}

impl X509Time: Eq {
    eq = |a, b| a.@sec == b.@sec && a.@nanosec == b.@nanosec;
}

impl X509Time: LessThan {
    less_than = |a, b| (
        if a.@sec < b.@sec { true };
        if a.@sec > b.@sec { false };
        if a.@nanosec < b.@nanosec { true };
        if a.@nanosec > b.@nanosec { false };
        false
    );
}

impl X509Time: LessThanOrEq {
    less_than_or_eq = |a, b| less_than(a, b) || eq(a, b);
}

namespace DateTimeFormat {
    // (year, month, day, hour, minute, second, nanosec) -> String
    type FormatFunc = (String, String, String, String, String, String, String) -> String;

    format: Time::DateTime -> FormatFunc -> String;
    format = |datetime, formatter| (
        let zero_padding = |i64, prec| (
            let str = Array::fill(prec - 1, '0')._unsafe_to_string + i64.to_string;
            str.substring(str.get_size - prec, str.get_size)
        );
        let year = zero_padding(datetime.@year.to_I64, 4);
        let month = zero_padding(datetime.@month.to_I64, 2);
        let day = zero_padding(datetime.@day_in_month.to_I64, 2);
        let hour = zero_padding(datetime.@hour.to_I64, 2);
        let minute = zero_padding(datetime.@min.to_I64, 2);
        let second = zero_padding(datetime.@sec.to_I64, 2);
        let nanosec = zero_padding(datetime.@nanosec.to_I64, 9);
        formatter $ (year, month, day, hour, minute, second, nanosec)
    );
}

impl X509Time: ToString {
    to_string = |asn1_time| (
        let res = asn1_time.to_utc;
        if res.is_err { "err:" + res.as_err };
        let datetime = res.as_ok;
        DateTimeFormat::format(
            datetime,
            |(year, month, day, hour, minute, second, nanosec)|
            year + "-" + month + "-" + day + "T" + hour + ":" + minute  + ":" + second + "." + nanosec + "Z"
        )
    );
}

//type GeneralizedTime = X509Time; // YYYYMMDDHHMMSSZ for RFC5280
//type UTCTime = X509Time; // YYMMDDHHMMSSZ for RFC5280

impl X509Time: DecodeDer {
    decode_obj = (
        choice $ [
            decode_utc_time,
            decode_generalized_time
        ]
    );
}

decode_generalized_time: [m: MonadReadByte] m X509Time;
decode_generalized_time = (
    let (identifier, contents) = *decode_primitive;
    eval *assert_tag(tag_generalized_time, identifier);
    let str = contents._unsafe_to_string;
    from_generalized_time_string(str).from_result_t
);

decode_utc_time: [m: MonadReadByte] m X509Time;
decode_utc_time = (
    let (identifier, contents) = *decode_primitive;
    eval *assert_tag(tag_utc_time, identifier);
    let str = contents._unsafe_to_string;
    from_utc_time_string(str).from_result_t
);

