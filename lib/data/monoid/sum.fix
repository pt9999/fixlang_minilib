module Minilib.Data.Monoid.Sum;

import Minilib.Trait.Monoid;

type Sum a = unbox struct {
    data: a
};

to_sum: a -> Sum a;
to_sum = |a| Sum { data: a };

get_sum: Sum a -> a;
get_sum = @data;

impl [a: Additive] Sum a: Monoid {
    mempty = zero.to_sum;
    mappend = |b, a| (a.get_sum + b.get_sum).to_sum;
}

impl Sum: Functor {
    map = |f, ma| f(ma.get_sum).to_sum;
}


