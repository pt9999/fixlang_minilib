module Minilib.Crypto.Cert.X509Signature;

import Debug;
import HashMap;

import Minilib.Crypto.Cert.Asn1;
import Minilib.Crypto.Cert.Asn1.Der;
import Minilib.Crypto.Cert.X509;
import Minilib.Crypto.Cert.Pem;
import Minilib.Crypto.Cert.OID;
import Minilib.Crypto.Cert.Pkcs1;
import Minilib.Encoding.Binary;
import Minilib.Monad.State;
import Minilib.Monad.Error;
import Minilib.Monad.Trans;
import Minilib.Monad.FunctorM;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;
import Minilib.Thread.Time;
import Minilib.Testing.UnitTest;

validate_signature: SubjectPublicKeyInfo -> Certificate -> Result ErrMsg ();
validate_signature = |public_key, certificate| (
    //eval debug_eprintln("validate_signature");
    let hashspec = _find_pkcs1_v1_5_hashspec(certificate);
    //eval debug_eprintln("hashspec=" + hashspec.is_some.to_string);
    if hashspec.is_some {
        validate_signature_pkcs1_v1_5(hashspec.as_some, public_key, certificate)
    };
    err $ "Not supported signature algorithm: " + certificate.@signature_algorithm.to_string
);

_find_pkcs1_v1_5_hashspec: Certificate -> Option Pkcs1::HashSpec;
_find_pkcs1_v1_5_hashspec = |certificate| (
    let signature_algorithm: AlgorithmIdentifier = certificate.@signature_algorithm;
    if signature_algorithm.match_name("sha-1WithRSAEncryption") {
        some $ Pkcs1::hashspec_sha1
    };
    if signature_algorithm.match_name("sha256WithRSAEncryption") {
        some $ Pkcs1::hashspec_sha256
    };
    if signature_algorithm.match_name("sha384WithRSAEncryption") {
        some $ Pkcs1::hashspec_sha384
    };
    if signature_algorithm.match_name("sha512WithRSAEncryption") {
        some $ Pkcs1::hashspec_sha512
    };
    none()
);

validate_signature_pkcs1_v1_5: Pkcs1::HashSpec -> SubjectPublicKeyInfo -> Certificate -> Result ErrMsg ();
validate_signature_pkcs1_v1_5 = |hashspec, public_key, certificate| (
    let pubkey_algorithm: AlgorithmIdentifier = public_key.@algorithm;
    if !pubkey_algorithm.match_name("rsaEncryption") {
        err $ "Public_key algorithm does not match `rsaEncryption`: " + pubkey_algorithm.to_string
    };
    let rsa_pubkey: RSAPublicKey = *decode_der_from_bytes(public_key.@subject_public_key.@data);
    let n = rsa_pubkey.@modulus;
    let e = rsa_pubkey.@public_exponent;
    let message = certificate.@tbs_certificate_bytes;
    let signature = certificate.@signature_value.@data;
    Pkcs1::rsassa_pkcs1_v1_5_verify((n, e), message, signature, hashspec)
);

