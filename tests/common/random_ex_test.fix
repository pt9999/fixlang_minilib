module RandomExTest;

import Random;

import Minilib.Common.RandomEx;
import Minilib.Testing.UnitTest;

test_generate_U8: TestCase;
test_generate_U8 = (
    make_test("test_generate_U8") $ |_|
    let random = Random::init_by_seed(123_U64);
    let (random, r) = random.generate_U8;
    pure()
);

test_generate_U16: TestCase;
test_generate_U16 = (
    make_test("test_generate_U16") $ |_|
    let random = Random::init_by_seed(123_U64);
    let (random, r) = random.generate_U16;
    pure()
);

test_generate_U32: TestCase;
test_generate_U32 = (
    make_test("test_generate_U32") $ |_|
    let random = Random::init_by_seed(123_U64);
    let (random, r) = random.generate_U32;
    pure()
);

test_generate_I64_range: TestCase;
test_generate_I64_range = (
    make_table_test("test_generate_I64_range",
        [
            (I64::minimum, I64::maximum),
            (1000, 2000),
            (10, 11),
            (-11, -10),
        ],
        |(begin, end)|
        let random = Random::init_by_seed(123_U64);
        let (random, r) = random.generate_I64_range(begin, end);
        eval *assert_true("range", begin <= r && r < end);
        pure()
    )
);

main: IO ();
main = (
    [
        test_generate_U8,
        test_generate_U16,
        test_generate_U32,
        test_generate_I64_range,
    ]
    .run_test_driver
);

