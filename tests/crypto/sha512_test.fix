module Sha512Test;

import Random;

import Minilib.Crypto.SHA512;
import Minilib.Common.RandomEx;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;
import Minilib.Testing.UnitTest;

make_random_bytes: I64 -> I64 -> Array U8;
make_random_bytes = |size, seed| (
    Random::init_by_seed(seed.to_U64).generate_array(size, generate_U8).@1
);

test_sha384_digest: TestCase;
test_sha384_digest = (
    make_table_test("test_sha384_digest",
        [
            ("empty", [], "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b"),
            ("abcdefg", "abcdefg".get_bytes.pop_back, "9f11fc131123f844c1226f429b6a0a6af0525d9f40f056c7fc16cdf1b06bda08e302554417a59fa7dcf6247421959d22"),
            ("0-255", Array::from_map(256, |i| i.to_U8), "ffdaebff65ed05cf400f0221c4ccfb4b2104fb6a51f87e40be6c4309386bfdec2892e9179b34632331a59592737db5c5"),
            ("random_567", make_random_bytes(100000, 567), "2bf9d6970f0b47d2dce007daa69bd26270820a5352372e3780ca3ddcc37d5bfb9a3b21eca931b8188c45f35026a1fcfc"),
        ],
        |(name, bytes, expected)|
        //eval *write_file_bytes(Path::parse("tmp." + name).as_some, bytes);
        let actual = SHA384::digest(bytes).to_string_hex;
        assert_equal(name, expected, actual)
    )
);

test_sha512_digest: TestCase;
test_sha512_digest = (
    make_table_test("test_sha512_digest",
        [
            ("empty", [], "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e"),
            ("abcdefg", "abcdefg".get_bytes.pop_back, "d716a4188569b68ab1b6dfac178e570114cdf0ea3a1cc0e31486c3e41241bc6a76424e8c37ab26f096fc85ef9886c8cb634187f4fddff645fb099f1ff54c6b8c"),
            ("0-255", Array::from_map(256, |i| i.to_U8), "1e7b80bc8edc552c8feeb2780e111477e5bc70465fac1a77b29b35980c3f0ce4a036a6c9462036824bd56801e62af7e9feba5c22ed8a5af877bf7de117dcac6d"),
            ("random_567", make_random_bytes(100000, 567), "5e715bfb8f4ef983b85dc1d72908e95452879cc57175c178744bd7d2fe5cc72b8a4309703c2397d4544c81739a0084963bea44d69a6ca5411df9cefa06b5b507"),
        ],
        |(name, bytes, expected)|
        //eval *write_file_bytes(Path::parse("tmp." + name).as_some, bytes);
        let actual = SHA512::digest(bytes).to_string_hex;
        assert_equal(name, expected, actual)
    )
);

main: IO ();
main = (
    [
        test_sha384_digest,
        test_sha512_digest,
        TestCase::empty
    ]
    .run_test_driver
);

