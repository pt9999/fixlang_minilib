// Timing module, such as sleep for a while, and measuring execution time.
module Minilib.Thread.Time;

import Debug;
import Time;

// Sleeps for specified micro-seconds.
// For details, see Linux manual page for [usleep()](https://man7.org/linux/man-pages/man3/usleep.3.html).
usleep: U32 -> IOFail ();
usleep = |usec| (
    let _ = *pure();    // make it lazy
    let res = CALL_C[I32 usleep(U32), usec];
    if res == -1_I32 {
        throw("usleep failed!: some error occurred in usleep.")
    };
    pure()
);

// Measures wall-clock time per a function call.
// Specifically, It calls the function many times and measures the total time.
// It then prints the function result and measured time per loop.
timeit: [a: ToString] String -> (() -> a) -> IO a;
timeit = |label, f| (
    let total_time_threshold = 0.1;  // 100 msec
    let repeat = fix $ |repeat, n| (
        let result = f();
        if n <= 1 { result };
        repeat(n - 1)
    );
    let repeat_io = |n| (
        let _ = *pure();
        pure(repeat(n))
    );
    let (result, total_time) = *consumed_realtime_while_io(repeat_io(1));
    let (result, total_time, total_count) = *loop_m(
        (result, total_time, 1, 1), |(result, total_time, total_count, count)|
        if total_time >= total_time_threshold {
            break_m $ (result, total_time, total_count)
        };
        let (result, time) = *consumed_realtime_while_io(repeat_io(count));
        let total_time = total_time + time;
        let total_count = total_count + count;
        continue_m $ (result, total_time, total_count, count * 2)
    );
    let time = total_time / total_count.to_F64;
    let (time, unit) = if time >= 1.0 { (time, "sec") }
    else if time >= 1.0e-3 { (time * 1.0e3, "msec") }
    else                   { (time * 1.0e6, "usec") };
    let _ = *eprintln(label + "=" + result.to_string + 
                      " time/loop=" + time.to_string_precision(3_U8) + " " + unit);
    pure $ result
);

// Same interface as `timeit()` but does not measure time.
notimeit: [a: ToString] String -> (() -> a) -> IO a;
notimeit = |label, f| (
    let result = f();
    let _ = *eprintln(label + "=" + result.to_string);
    pure $ result
);

// Get wall-clock time elapsed while executing an I/O action.
consumed_realtime_while_io : IO a -> IO (a, F64);
consumed_realtime_while_io = |io| (
    let _ = *pure();
    let start = *Time::get_now;
    let result = *io;
    let end = *Time::get_now;
    let time = (end.@sec.to_F64 - start.@sec.to_F64) +
               (end.@nanosec.to_F64 * 1.0e-9 - start.@nanosec.to_F64 * 1.0e-9);
    pure $ (result, time)
);
