// Arbitrary-precision floating point number.
//
// A BigFloat is composed from a mantissa and the exponent of base 2.
//
// Each BigFloat has a precision. It is same as the precision of the mantissa,
// and determined by the length of the underlying array (= BigNat).
//
// The precision of a BigNat can be changed with `set_prec()`.
//
// For unary operator such as `-a`, the precision of the result is the same as the precision of the operand.
//
// For binary operator such as `a + b`, `a - b`, `a * b`, `a / b`, the precision of the result is the maximum precision of the two operands.
//
module Minilib.Math.BigFloat;

import Math;

import Minilib.Math.BigInt;
import Minilib.Math.BigNat;
import Minilib.Math.Types;
import Minilib.Text.StringEx;


// Arbitrary-precision floating point number.
// It is interpreted as `mantissa * 2 ^ exponent`.
type BigFloat = unbox struct {
    int: BigInt,        // the mantissa
                        // NOTE: @int.@nat might have trailing zeros.
    exp: I64            // the exponent of base 2
};

// Creates a BigFloat from a BigInt and the exponent of base 2.
make: BigInt -> I64 -> BigFloat;
make = |int, exp| (
    BigFloat { int: int, exp: exp }
);

_zero: BigFloat;
_zero = BigFloat { int: Zero::zero, exp: 0 };

_one: BigFloat;
_one = BigFloat::from_F64(1.0);

_ten: BigFloat;
_ten = BigFloat::from_F64(10.0);

// Returns true iff the BigFloat is zero.
is_zero: BigFloat -> Bool;
is_zero = |a| a.@int.is_zero;

// Returns true iff the BigFloat is positive.
is_positive: BigFloat -> Bool;
is_positive = |a| a.@int.is_positive;

// Returns true iff the BigFloat is negative.
is_negative: BigFloat -> Bool;
is_negative = |a| a.@int.is_negative;

// Converts F64 to BigFloat.
from_F64: F64 -> BigFloat;
from_F64 = |f64| (
    if f64 == 0.0 { BigFloat::_zero };
    let sign = if f64 < 0.0 { -1 } else { 1 };
    let f64 = f64.abs;
    let (fr, exp) = Math::frexp(f64);
    let exp = exp.to_I64 - 53;
    let fr = fr * 2.0.Math::pow(53.0);
    let (quo, rem) = _divmod_base(fr.to_U64);
    let nat = [rem.to_U32, quo.to_U32];
    BigFloat::make(BigInt::make(sign, nat), exp)
);

// Converts BigFloat to F64. If BigFloat is out of range of F64, unexpected result is returned.
to_F64: BigFloat -> F64;
to_F64 = |a| (
    if a.is_zero { 0.0 };
    let a = a.set_prec(53);
    eval assert(|_| "invalid nat size", a.@int.@nat.get_size <= 2);
    let u64 = a.@int.@nat._to_u64;
    let sign = a.@int.@sign;
    let f64 = sign.to_F64 * u64.to_F64 * 2.0.Math::pow(a.@exp.to_F64);
    f64
);

// Gets the precision of a BigFloat in base 10.
// It calls `get_prec()` and converts the precision from base 2.
get_prec10: BigFloat -> I64;
get_prec10 = |a| (
    let prec = a.get_prec;
    let prec10 = Math::floor(prec.to_F64 * Math::log10(2.0)).to_I64;
    prec10
);

// Gets the precision of a BigFloat in base 2. It is multiple of 32.
get_prec: BigFloat -> I64;
get_prec = |a| (
    a.@int.@nat.get_size * BigNat::_log2_base.to_I64
);

// Sets the precision of a BigFloat in base 10.
// It calls `set_prec()` after converting the precision to base 2.
set_prec10: I64 -> BigFloat -> BigFloat;
set_prec10 = |prec10, a| (
    let prec = Math::ceil(prec10.to_F64 / Math::log10(2.0)).to_I64;
    a.set_prec(prec)
);

// Set the precision of a BigFloat in base2.
// The precision is round-up to multiple of 32, except if `prec == 0` then the precision is set to 32.
set_prec: I64 -> BigFloat -> BigFloat;
set_prec = |prec, a| (
    // Round-up the precision to the multiple of _log2_base.
    let prec = (
        if prec == 0 { _log2_base.to_I64 };
        let (quo, rem) = _divmod_log2_base(prec.to_U64);
        let quo = if rem == 0_U64 { quo } else { quo + 1_U64 };
        (quo * _log2_base).to_I64
    );

    // Move the topmost 1 to MSB
    let a = _maximize_precision(a);

    let old_size = a.@int.@nat.get_size;
    let new_size = prec / BigNat::_log2_base.to_I64;
    if old_size == new_size {
        a
    };
    let a = if old_size < new_size {
        a.mod_int(mod_nat $ |nat|
            Array::fill(new_size - old_size, 0_U32).append(nat)
        )
    } else { // old_size > new_size
        a.mod_int(mod_nat $ |nat|
            let n = old_size - new_size;
            // round up if truncated part >= 0.5
            let round_up = nat.@(n - 1) >= _base.shift_right(1_U64).to_U32;
            let nat = nat.get_sub(n, old_size);
            let nat = if round_up { _add(nat, BigNat::_one) } else { nat };
            nat
        )
    };
    let a = a.mod_exp(|exp|
        exp + (old_size - new_size) * BigNat::_log2_base.to_I64
    );
    a
);

// Move the topmost 1 to MSB
_maximize_precision: BigFloat -> BigFloat;
_maximize_precision = |a| (
    if a.is_zero { a };
    let nat = a.@int.@nat;
    let last_digit = nat.@(nat.get_size - 1);
    if last_digit.shift_right(_log2_base.to_U32 - 1_U32).bit_and(1_U32) != 0_U32 {
        a   // MSB is 1 already
    };
    let bit_length = nat._bit_length;
    let (_, last_bit_length) = _divmod_log2_base(bit_length);
    let shift = _log2_base - last_bit_length;
    let a = a.mod_int(mod_nat(_shift_left(shift)));
    let a = a.mod_exp(|exp| exp - shift.to_I64);
    a
);

// Gets a BigInt that represents the smallest change in the mantissa of this BigInt.
epsilon: BigFloat -> BigFloat;
epsilon = |a| (
    a.mod_int(mod_nat(|nat|
        let nat = Array::fill(nat.get_size, 0_U32);
        nat.set(0, 1_U32)
    ))
);

// Calculates approximation of `log2(a.abs)`.
_approx_log2: BigFloat -> I64;
_approx_log2 = |a| (
    a.@int.@nat._bit_length.to_I64 + a.@exp
);

// Calculates `a * 2^e`.
mul_pow2: I64 -> BigFloat -> BigFloat;
mul_pow2 = |e, a| (
    a.mod_exp(|exp| exp + e)
);

// Returns the absolute value of `a`.
abs: BigFloat -> BigFloat;
abs = |a| (
    a.mod_int(set_sign(1))
);

// Returns the square root of `a`.
sqrt: BigFloat -> BigFloat;
sqrt = |a| (
    eval assert(|_| "out of range: a="+a.to_string, !a.is_negative);
    if a.is_zero { BigFloat::_zero };
    let a_prec = a.get_prec;
    let a_log2 = a._approx_log2;
    let x = BigFloat::_one.mul_pow2(a_log2 / 2).set_prec(a_prec);
    let max_loop = a_prec;
    BigFloat::_sqrt_inner(x, a, max_loop)
);

// Returns the square root of `a` using Newton-Raphson method.
_sqrt_inner: BigFloat -> BigFloat -> I64 -> BigFloat;
_sqrt_inner = |x, a, max_loop| (
    // f(x) = x^2 - a
    // x <- x - f(x) / f'(x)
    // x <- x - (x^2 - a) / 2x
    // x <- (2x^2 - x^2 + a) / 2x
    // x <- (x^2 + a) / 2x
    if max_loop < 0 { 
        eval debug_eprintln("max_loop reached");
        x 
    };
    let xsq_a = x * x + a;              // x^2 + a
    let x2 = x.mul_pow2(1);             // 2x
    let quo = xsq_a / x2;
    //eval debug_eprintln(max_loop.to_string + ": x  ="+x.to_string_exp);
    //eval debug_eprintln(max_loop.to_string + ": quo="+quo.to_string_exp);

    let is_converged = (
        let dq = (quo - x).abs;
        let dx = x.epsilon;
        //let dx = x.mul_pow2(-(x.get_prec - 1));
        //eval debug_eprintln("dq="+dq.to_string);
        //eval debug_eprintln("dx="+dx.to_string);
        dq <= dx
    );
    if is_converged { x };
    let quo = quo.set_prec(a.get_prec);
    if quo == x { x };
    _sqrt_inner(quo, a, max_loop - 1)
);

// Calculates `a^n`.
pow_by_U64: U64 -> BigFloat -> BigFloat;
pow_by_U64 = |n, a| (
    loop(
        (BigFloat::_one, a, n), |(prod, a, n)|
        if n == 0_U64 {
            break $ prod
        };
        let prod = if n.bit_and(1_U64) != 0_U64 {
            prod * a
        } else { prod };
        continue $ (prod, a * a, n.shift_right(1_U64))
    )
);

_from_string: String -> Result ErrMsg BigFloat;
_from_string = |str| (
    if str.get_size > 0 && str.get_bytes.@(0) == '-' {
        str.get_sub(1, str.get_size)._from_string.map(neg)
    };
    let (mantissa_part, exp_part) = str.to_lower.split_first("e");
    let exp10: I64 = *if exp_part == "" {
        pure $ 0
    } else {
        from_string(exp_part)
    };
    let (int_part, frac_part) = mantissa_part.split_first(".");
    let str_append = int_part + frac_part;
    let prec10 = str_append.get_size;
    let int: BigInt = *from_string(str_append);
    let bf: BigFloat = BigFloat::make(int, 0);
    let exp10 = exp10 - frac_part.get_size;
    let bf = if exp10 == 0 {
        bf
    } else if exp10 > 0 {
        bf * BigFloat::_ten.set_prec10(prec10).pow_by_U64(exp10.to_U64)
    } else {
        bf / BigFloat::_ten.set_prec10(prec10).pow_by_U64((-exp10).to_U64)
    };
    let bf = bf.set_prec10(prec10);
    ok $ bf
);

// Convert a BigFloat to a string of internal representation.
_to_string_rep: BigFloat -> String;
_to_string_rep = |a| (
    "{ sign=" + a.@int.@sign.to_string +
    " nat=" + a.@int.@nat._to_string_hex +
    " exp=" + a.@exp.to_string +
    " }"
);

// Convert a BigFloat to a string with specified precision (i.e., number of digits after the decimal point).
to_string_precision: I64 -> BigFloat -> String;
to_string_precision = |num_frac_digits, a| (
    eval assert(|_| "invalid num_frac_digits", num_frac_digits >= 0);
    if a.is_negative {
        "-" + a.neg.to_string_precision(num_frac_digits)
    };
    let a_nat = a.@int.@nat;
    let a_exp = a.@exp;
    // multiply a_nat by 10^num_frac_digits.
    let a_nat = if num_frac_digits == 0 {
        a_nat
    } else {
        _mul(a_nat, _pow_by_U64([10_U32], num_frac_digits.to_U64))
    };
    // multiply a_nat by 2^a_exp.
    let a_nat = if a_exp >= 0 {
        a_nat._shift_left(a_exp.to_U64)
    } else {
        let neg_exp = (-a_exp).to_U64;
        let (quo, rem) = _divmod_by_power_of_two(a_nat, neg_exp);
        // round-up by rem
        let rem = rem._shift_right(neg_exp - 1_U64)._remove_last_zeros;
        if rem._is_zero { quo } else { _add(quo, BigNat::_one) }
    };

    // convert BigNat to a string.
    let str = a_nat._to_string;
    if num_frac_digits == 0 {
        str
    };
    let str = if str.get_size >= num_frac_digits + 1 { str }
    else {
        let zero_padding = Array::fill(num_frac_digits + 1 - str.get_size, '0');
        zero_padding._unsafe_to_string + str
    };
    let int_part = str.get_sub(0, str.get_size - num_frac_digits);
    let frac_part = str.get_sub(str.get_size - num_frac_digits, str.get_size);
    int_part + "." + frac_part
);

// Convert a BigFloat to a string of exponential form.
to_string_exp: BigFloat -> String;
to_string_exp = |a| (
    a._to_string_exp_precision(none())
);

// Convert a BigFloat to a string of exponential form with specified precision (i.e., number of digits after the decimal point).
to_string_exp_precision: I64 -> BigFloat -> String;
to_string_exp_precision = |num_frac_digits, a| (
    a._to_string_exp_precision(some(num_frac_digits))
);

_to_string_exp_precision: Option I64 -> BigFloat -> String;
_to_string_exp_precision = |num_frac_digits, a| (
    let (a, log10) = (
        if a.is_zero { (a, 0) };
        let log2 = a._approx_log2;
        let log10 = (log2.to_F64 * Math::log10(2.0)).to_I64 - 1;
        let a = if log10 == 0 { a }
        else if log10 > 0 {
            a / BigFloat::_ten.pow_by_U64(log10.to_U64)
        } else {
            a * BigFloat::_ten.pow_by_U64((-log10).to_U64)
        };
        loop(
            (a, log10), |(a, log10)|
            //eval debug_eprintln("(log10,a)="+(log10,a, a._to_string_rep).to_string);
            let a_abs = a.abs;
            if a_abs < BigFloat::_one {
                continue $ (a * BigFloat::_ten, log10 - 1)
            };
            if a_abs >= BigFloat::_ten {
                continue $ (a / BigFloat::_ten, log10 + 1)
            };
            if a_abs + a_abs.epsilon >= BigFloat::_ten {    // workaround for that 9.999999 is printed as 10.000000
                break $ (a / BigFloat::_ten, log10 + 1)
            };
            break $ (a, log10)
        )
    );
    //eval debug_eprintln("==> (log10,a)="+(log10,a, a._to_string_rep).to_string);
    let num_frac_digits = num_frac_digits.as_some_or(a._get_num_frac_digits);
    let str = a.to_string_precision(num_frac_digits);
    let str = str + "E" + (if log10 >= 0 { "+" } else { "" }) + log10.to_string;
    str
);

// get the preferred number of fractional digits (not same as a.get_prec10).
_get_num_frac_digits: BigFloat -> I64;
_get_num_frac_digits = |a| (
    if a.@exp >= 0 {
        0
    } else {
        Math::floor((-a.@exp).to_F64 * Math::log10(2.0)).to_I64
    }
);

impl BigFloat: FromString {
    from_string = _from_string;
}

impl BigFloat: ToString {
    to_string = |a| (
        let num_frac_digits = a._get_num_frac_digits;
        a.to_string_precision(num_frac_digits)
    );
}

impl BigFloat: Eq {
    eq = |a, b| (
        let c = a - b;
        c.is_zero
    );
}

impl BigFloat: LessThan {
    less_than = |a, b| (
        let c = a - b;
        c.is_negative
    );
}

impl BigFloat: LessThanOrEq {
    less_than_or_eq = |a, b| (
        let c = a - b;
        !c.is_positive
    );
}

impl BigFloat: Zero {
    zero = BigFloat::_zero;
}

impl BigFloat: One {
    one = BigFloat::_one;
}

impl BigFloat: Neg {
    neg = |a| (
        let prec = a.get_prec;
        a.mod_int(neg).set_prec(prec)
    );
}

impl BigFloat: Add {
    add = |a, b| (
        if a.is_zero { b };
        if b.is_zero { a };
        let prec = max(a.get_prec, b.get_prec);
        let a = a.set_prec(prec);
        let b = b.set_prec(prec);
        let a_exp = a.@exp;
        let b_exp = b.@exp;
        if a_exp < b_exp { add(b, a) };
        // now a_exp >= b_exp
        // LSB of a is 2^(a_exp+a_prec-1)
        let c_exp = a_exp;
        let diff_exp = a_exp - b_exp;
        let a_int = a.@int;
        let b_int = b.@int;
        let c_int = if diff_exp >= prec {
            a_int
        } else {
            a_int + b_int.shift_right(diff_exp.to_U64)
        };
        BigFloat::make(c_int, c_exp).set_prec(prec)
    );
}

impl BigFloat: Sub {
    sub = |a, b| (
        a.add(b.neg)
    );
}

impl BigFloat: Mul {
    mul = |a, b| (
        if a.is_zero { BigFloat::_zero };
        if b.is_zero { BigFloat::_zero };
        let prec = max(a.get_prec, b.get_prec);
        let a = a.set_prec(prec);
        let b = b.set_prec(prec);
        let c_int = a.@int * b.@int;
        let c_exp = a.@exp + b.@exp;
        BigFloat::make(c_int, c_exp).set_prec(prec)
    );
}

impl BigFloat: Div {
    div = |a, b| (
        if a.is_zero { BigFloat::_zero };
        if b.is_zero { BigFloat::_zero };
        let prec = max(a.get_prec, b.get_prec);
        let a = a.set_prec(2 * prec);
        let b = b.set_prec(prec);
        // TODO: round c_int by fraction
        let c_int = a.@int / b.@int;
        let c_exp = a.@exp - b.@exp;
        BigFloat::make(c_int, c_exp).set_prec(prec)
    );
}
