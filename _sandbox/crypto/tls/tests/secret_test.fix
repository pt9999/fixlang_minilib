module Main;


import Minilib.Crypto.Tls.Types;
import Minilib.Crypto.Tls.Secret;
import Minilib.Crypto.Tls.Hkdf;
import Minilib.Crypto.Tls.CipherSuite;
import Minilib.Encoding.Binary;
import Minilib.Text.Hex;
import StringEx;
import UnitTest;

parse_hex: String -> IOFail (Array U8);
parse_hex = |str| str.from_string_hex.from_result;

make_hkdf: IOFail HKDF;
make_hkdf = (
    let cipher_suite: CipherSuite = _TLS_AES_128_GCM_SHA256();
    HKDF::from_cipher_suite(cipher_suite).from_result
);

// RFC 8448: Example Handshake Traces for TLS 1.3
// 3.  Simple 1-RTT Handshake

// {client}  construct a ClientHello handshake message:
client_hello_bytes: IOFail (Array U8);
client_hello_bytes = parse_hex("
01 00 00 c0 03 03 cb 34 ec b1 e7 81 63
ba 1c 38 c6 da cb 19 6a 6d ff a2 1a 8d 99 12 ec 18 a2 ef 62 83
02 4d ec e7 00 00 06 13 01 13 03 13 02 01 00 00 91 00 00 00 0b
00 09 00 00 06 73 65 72 76 65 72 ff 01 00 01 00 00 0a 00 14 00
12 00 1d 00 17 00 18 00 19 01 00 01 01 01 02 01 03 01 04 00 23
00 00 00 33 00 26 00 24 00 1d 00 20 99 38 1d e5 60 e4 bd 43 d2
3d 8e 43 5a 7d ba fe b3 c0 6e 51 c1 3c ae 4d 54 13 69 1e 52 9a
af 2c 00 2b 00 03 02 03 04 00 0d 00 20 00 1e 04 03 05 03 06 03
02 03 08 04 08 05 08 06 04 01 05 01 06 01 02 01 04 02 05 02 06
02 02 02 00 2d 00 02 01 01 00 1c 00 02 40 01
");

// {server}  extract secret "early":
test_early_secret: TestCase;
test_early_secret = (
    make_test("test_early_secret") $ |_|
    let hkdf = *make_hkdf;
    let secret = *hkdf.calc_early_secret_0.from_result;
    let expected = "33ad0a1c607ec03b09e6cd9893680ce210adf300aa1f2660e1b22e10f170f92a";
    let actual = secret.to_string_hex;
    assert_equal("eq", expected, actual)
);

// {server}  construct a ServerHello handshake message:
server_hello_bytes: IOFail (Array U8);
server_hello_bytes = parse_hex("
02 00 00 56 03 03 a6 af 06 a4 12 18 60
dc 5e 6e 60 24 9c d3 4c 95 93 0c 8a c5 cb 14 34 da c1 55 77 2e
d3 e2 69 28 00 13 01 00 00 2e 00 33 00 24 00 1d 00 20 c9 82 88
76 11 20 95 fe 66 76 2b db f7 c6 72 e1 56 d6 cc 25 3b 83 3d f1
dd 69 b1 b0 4e 75 1f 0f 00 2b 00 02 03 04
");

// {server}  derive secret for handshake "tls13 derived":
// {server}  extract secret "handshake":
test_handshake_secret: TestCase;
test_handshake_secret = (
    make_test("test_handshake_secret") $ |_|
    let hkdf = *make_hkdf;
    let early_secret = *parse_hex("33ad0a1c607ec03b09e6cd9893680ce210adf300aa1f2660e1b22e10f170f92a"); // PRK
    let dhe = *parse_hex("8bd4054fb55b9d63fdfbacf9f04b9f0d35e6d63f537563efd46272900f89492d"); // ikm
    let secret = *hkdf.calc_handshake_secret(early_secret, dhe).from_result;
    let expected = "1dc826e93606aa6fdc0aadc12f741b01046aa6b99f691ed221a9f0ca043fbeac";
    let actual = secret.to_string_hex;
    assert_equal("eq", expected, actual)
);

// {server}  derive secret "tls13 c hs traffic":
test_client_handshake_traffic_secret: TestCase;
test_client_handshake_traffic_secret = (
    make_test("test_client_handshake_traffic_secret") $ |_|
    let hkdf = *make_hkdf;
    let handshake_secret = *parse_hex("1dc826e93606aa6fdc0aadc12f741b01046aa6b99f691ed221a9f0ca043fbeac"); // PRK
    let messages = [
        *client_hello_bytes,
        *server_hello_bytes,
    ].flatten;
    let secret = *hkdf.calc_client_handshake_traffic_secret(handshake_secret, messages).from_result;
    let expected = "b3eddb126e067f35a780b3abf45e2d8f3b1a950738f52e9600746a0e27a55a21";
    let actual = secret.to_string_hex;
    assert_equal("eq", expected, actual)
);

// {server}  derive secret "tls13 s hs traffic":
test_server_handshake_traffic_secret: TestCase;
test_server_handshake_traffic_secret = (
    make_test("test_server_handshake_traffic_secret") $ |_|
    let hkdf = *make_hkdf;
    let handshake_secret = *parse_hex("1dc826e93606aa6fdc0aadc12f741b01046aa6b99f691ed221a9f0ca043fbeac"); // PRK
    let messages = [
        *client_hello_bytes,
        *server_hello_bytes,
    ].flatten;
    let secret = *hkdf.calc_server_handshake_traffic_secret(handshake_secret, messages).from_result;
    let expected = "b67b7d690cc16c4e75e54213cb2d37b4e9c912bcded9105d42befd59d391ad38";
    let actual = secret.to_string_hex;
    assert_equal("eq", expected, actual)
);

// {server}  extract secret "master":
test_master_secret: TestCase;
test_master_secret = (
    make_test("test_master_secret") $ |_|
    let hkdf = *make_hkdf;
    let handshake_secret = *parse_hex("1dc826e93606aa6fdc0aadc12f741b01046aa6b99f691ed221a9f0ca043fbeac"); // PRK
    let secret = *hkdf.calc_master_secret(handshake_secret).from_result;
    let expected = "18df06843d13a08bf2a449844c5f8a478001bc4d4c627984d5a41da8d0402919";
    let actual = secret.to_string_hex;
    assert_equal("eq", expected, actual)
);

// {server}  derive write traffic keys for handshake data:
test_server_handshake_traffic_keys: TestCase;
test_server_handshake_traffic_keys = (
    make_test("test_server_handshake_traffic_secret") $ |_|
    let hkdf = *make_hkdf;
    let server_handshake_traffic_secret = *parse_hex("b67b7d690cc16c4e75e54213cb2d37b4e9c912bcded9105d42befd59d391ad38");
    let (key, iv) = *hkdf.calc_traffic_keys(server_handshake_traffic_secret, 16, 12).from_result;
    let key_expected = "3fce516009c21727d0f2e4e86ee403bc";
    let key_actual = key.to_string_hex;
    let iv_expected = "5d313eb2671276ee13000b30";
    let iv_actual = iv.to_string_hex;
    eval *assert_equal("key", key_expected, key_actual);
    eval *assert_equal("iv", iv_expected, iv_actual);
    pure()
);


main: IO ();
main = (
    [
        test_early_secret,
        test_handshake_secret,
        test_client_handshake_traffic_secret,
        test_server_handshake_traffic_secret,
        test_master_secret,
        test_server_handshake_traffic_keys,
    ]
    .run_test_driver
);
