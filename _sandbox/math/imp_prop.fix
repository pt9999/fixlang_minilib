module Main;

type Var = String;

type Exp = box union {
    fals_: (),
    var_: Var,
    imp_: (Exp, Exp),
    forall_: (Exp, Exp)
};

impl Exp: ToString {
    to_string = |exp| (
        if exp.is_var_ {
            exp.as_var_.to_string
        };
        if exp.is_imp_ {
            let (a, b) = exp.as_imp_;
            "(" + a.to_string + " -> " + b.to_string + ")"
        };
        if exp.is_forall_ {
            let (var, body) = exp.as_forall_;
            "forall " + var.to_string + ", " + body.to_string
        };
        if exp.is_fals_ {
            "false"
        };
        "???"
    );
}

var: Var -> Exp;
var = |name| var_ $ name;

forall: Exp -> Exp -> Exp;
forall = |var, body| forall_ $ (var, body);

fals: Exp;
fals = fals_();

imp: Exp -> Exp -> Exp;
imp = |p, q| imp_ $ (p, q);

not: Exp -> Exp;
not = |p| imp(p, fals);

or: Exp -> Exp -> Exp;
or = |p, q| imp(imp(p, q), q);

and: Exp -> Exp -> Exp;
and = |p, q| imp(p, imp(q, fals), fals);

main: IO ();
main = (
    let p = var("p");
    let q = var("q");
    //let exp = forall(p, forall(q, imp(p, q)));
    let exp = imp(or(p, q), or(q, p));
    eval *println(exp.to_string);
    pure()
);
