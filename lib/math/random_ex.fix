// Extension of `Random`, eg. generating a random integer in range, or a random array.
module Minilib.Math.RandomEx;

import Random;

// `random.generate_I64_range(begin, end)` generates a random integer `r`
// such that `begin <= r && r < end`.
generate_I64_range: I64 -> I64 -> Random -> (I64, Random);
generate_I64_range = |begin, end, random| (
    let (begin, end) = if begin > end { (end, begin) } else { (begin, end) };
    let n = (end - begin).to_U64;
    let (r, random) = random.generate_U64;
    let r = r / (U64::maximum / n);
    if r >= n {
        generate_I64_range(begin, end, random)  // try again
    };
    let r = r.to_I64 + begin;
    (r, random)
);

// `random.generate_array(size, f)` generates a random array.
// Each element of the array is generated by `f`.
generate_array: I64 -> (Random -> (a, Random)) -> Random -> (Array a, Random);
generate_array = |size, f, random| (
    let array = Array::empty(size);
    let inner = fix $ |inner, array, i, random| (
        if i >= size {
            (array, random)
        };
        let (r, random) = f(random);
        inner(array.push_back(r), i + 1, random)
    );
    inner(array, 0, random)
);
