module Main;

import Debug;

import Binary;
import StringEx;
import UnitTest;

test_byte_buffer_get: TestCase;
test_byte_buffer_get = (
    make_test("test_byte_buffer_get") $ |_|
    let array = Array::from_map(256, |i| i.to_U8);
    let buf = ByteBuffer::make(array, ByteOrder::little_endian());
    let _ = *assert_equal("le get_u8", 0x41_U8, buf.get_u8(0x41));
    let _ = *assert_equal("le get_u16", 0x4241_U16, buf.get_u16(0x41));
    let _ = *assert_equal("le get_u32", 0x44434241_U32, buf.get_u32(0x41));
    let _ = *assert_equal("le get_u64", 0x4847464544434241_U64, buf.get_u64(0x41));
    let buf = ByteBuffer::make(array, ByteOrder::big_endian());
    let _ = *assert_equal("be get_u8", 0x41_U8, buf.get_u8(0x41));
    let _ = *assert_equal("be get_u16", 0x4142_U16, buf.get_u16(0x41));
    let _ = *assert_equal("be get_u32", 0x41424344_U32, buf.get_u32(0x41));
    let _ = *assert_equal("be get_u64", 0x4142434445464748_U64, buf.get_u64(0x41));
    pure()
);

test_byte_buffer_set: TestCase;
test_byte_buffer_set = (
    make_test("test_byte_buffer_set") $ |_|
    let buf = ByteBuffer::fill(8, 0_U8, ByteOrder::little_endian());
    let _ = *assert_equal("le set_u8",  [0x41_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u8(0, 0x41_U8).get_bytes);
    let _ = *assert_equal("le set_u16", [0x42_U8, 0x41_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u16(0, 0x4142_U16).get_bytes);
    let _ = *assert_equal("le set_u32", [0x44_U8, 0x43_U8, 0x42_U8, 0x41_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u32(0, 0x41424344_U32).get_bytes);
    let _ = *assert_equal("le set_u64", [0x48_U8, 0x47_U8, 0x46_U8, 0x45_U8, 0x44_U8, 0x43_U8, 0x42_U8, 0x41_U8],
                                        buf.set_u64(0, 0x4142434445464748_U64).get_bytes);
    let buf = ByteBuffer::fill(8, 0_U8, ByteOrder::big_endian());
    let _ = *assert_equal("be set_u8",  [0x41_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u8(0, 0x41_U8).get_bytes);
    let _ = *assert_equal("be set_u16", [0x41_U8, 0x42_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u16(0, 0x4142_U16).get_bytes);
    let _ = *assert_equal("be set_u32", [0x41_U8, 0x42_U8, 0x43_U8, 0x44_U8, 0x00_U8, 0x00_U8, 0x00_U8, 0x00_U8],
                                        buf.set_u32(0, 0x41424344_U32).get_bytes);
    let _ = *assert_equal("be set_u64", [0x41_U8, 0x42_U8, 0x43_U8, 0x44_U8, 0x45_U8, 0x46_U8, 0x47_U8, 0x48_U8],
                                        buf.set_u64(0, 0x4142434445464748_U64).get_bytes);
    pure()
);

main: IO ();
main = (
    [
        test_byte_buffer_get,
        test_byte_buffer_set,
        TestCase::empty
    ]
    .run_test_driver
);
