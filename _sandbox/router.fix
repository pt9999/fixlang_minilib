module Main;

import HashMap;
import Debug;

//import URL;
//import SimpleParser;
import StringEx;


//type RequestHandler = Request -> Response -> IOFail Response;
type RequestHandler = String;

type RouterEntry = box struct {
    map: HashMap String RequestHandler
};

namespace RouterEntry {
    empty: RouterEntry;
    empty = RouterEntry { 
        map: HashMap::empty(2)
    };

    update: String -> RequestHandler -> RouterEntry -> RouterEntry;
    update = |method, handler, entry| (
        entry.mod_map(|map| map.insert(method, handler))
    );

    find: String -> RouterEntry -> Option RequestHandler;
    find = |method, entry| (
        entry.@map.find(method)
    );

    show: RouterEntry -> IO ();
    show = |entry| (
        println (entry.@map.to_string)
    );
}

/*
    /               ... [ ]
    /about.html     ... [ "about.html" ]
    /users          ... [ "users" ]
    /users/         ... [ "users" ]
    /users/:id      ... [ "users", ":id" ]
    /users/:id/     ... [ "users", ":id" ]
*/
type RouterNode = box union {
    directory: HashMap String RouterNode,
    entry: RouterEntry
};
namespace RouterNode {
    empty_directory: RouterNode;
    empty_directory = directory $ HashMap::empty(8);

    create: Iterator String -> (RouterEntry -> RouterEntry) -> RouterNode;
    create =  |path, entry_updater| (
        if path.is_empty {
            entry $ entry_updater(RouterEntry::empty)
        };
        let node = RouterNode::empty_directory;
        node.update(path, entry_updater)
    ); 
    
    update: Iterator String -> (RouterEntry -> RouterEntry) -> RouterNode -> RouterNode;
    update = |path, entry_updater, node| (
        let (name, child_path) = if path.is_empty {
            ("", Iterator::empty)
        } else {
            path.advance.as_some
        };
        let dir = if node.is_directory { 
            node.as_directory
        } else {
            // node が entry だった場合、directory に置き換え、
            // "" に元のノードを登録する。
            HashMap::empty(8).insert("", node)
        };
        let child_node = dir.find(name).map_or(
            create(child_path, entry_updater),
            |child_node| child_node.update(child_path, entry_updater)
        );
        let dir = dir.insert(name, child_node);
        directory $ dir
    );

    find: Iterator String -> RouterNode -> Option RouterEntry;
    find = |path, node| (
        let (name, child_path) = if path.is_empty {
            ("", Iterator::empty)
        } else {
            path.advance.as_some
        };
        if node.is_entry {
            if name == "" { some(node.as_entry) } else { none() }
        };
        let dir = node.as_directory;
        // TODO: `:id` のようなパターンに対応する
        dir.find(name).map(|child_node| child_node.find(child_path))
    );

    show: I64 -> RouterNode -> IO ();
    show = |indent, node| (
        let print_indent = |indent| print(Array::fill(indent, ' ')._unsafe_to_string);
        if node.is_entry {
            node.as_entry.show
        };
        let _ = *println("{");
        let dir = node.as_directory;
        let _ = *dir.to_iter.fold_m((), |_,(name, child_node)|
            let _ = *print_indent(indent + 2);
            let _ = *print(name + ": ");
            child_node.show(indent + 2)
        );
        let _ = *print_indent(indent);
        println("}")
    );
}

type Router = box struct {
    root: RouterNode
};

namespace Router {

    empty: Router;
    empty = Router {
        root: RouterNode::empty_directory
    };

    insert: String -> String -> RequestHandler -> Router -> Router;
    insert = |method, path, handler, router| (
        let path: Iterator String = path.split("/").filter(|s| s != "");
        let entry_updater : RouterEntry -> RouterEntry = |entry| entry.update(method, handler);
        router.mod_root(|root| root.update(path, entry_updater))
    );

/*
    route: Request -> Response -> Router -> IOFail Response;
    route = |req, res, router| (
        // TODO: split query and path
        // TODO: lookup hierarchy
        let opt = router.@map.find(req.request_target);
        xxx
    );
*/
}

main: IO ();
main = (
    let _ = *eprintln("start");
    let node = RouterNode::empty_directory;
    /*
    let router = Router::empty;
    let router = router.insert("GET", "/", "index");
    let router = router.insert("GET", "/users", "users");
    let router = router.insert("POST", "/users", "users-post");
    let router = router.insert("GET", "/users/1", "users-1");
    let _ = *router.@root.show(0);
    */
    pure()
);
