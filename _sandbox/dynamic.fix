// dynamic type and value
module Main;

import HashMap;

import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

// dynamic type
type DT = box union {
    dt_unknown: (),
    dt_dt: (),
    dt_dv: (),
    dt_i8: (),
    dt_i16: (),
    dt_i32: (),
    dt_i64: (),
    dt_u8: (),
    dt_u16: (),
    dt_u32: (),
    dt_u64: (),
    dt_f32: (),
    dt_f64: (),
    dt_bool: (),
    dt_string: (),
    dt_unit: (),
    dt_tuple2: (DT, DT),
    dt_tuple3: (DT, DT, DT),
    dt_tuple4: (DT, DT, DT, DT),
    dt_func: (DT, DT),
    dt_array: DT,
    dt_iterator: DT,
    dt_option: DT,
    dt_result: (DT, DT),
    dt_hashmap: (DT, DT),
    dt_io: DT,
    dt_iohandle: (),
    dt_iofail: DT
};

impl [a:Eq, b:Eq, c:Eq] (a, b, c) : Eq {
    eq = |(a1,b1,c1),(a2,b2,c2)| a1 == a2 && b1 == b2 && c1 == c2;
}
impl [a:Eq, b:Eq, c:Eq, d:Eq] (a, b, c, d) : Eq {
    eq = |(a1,b1,c1,d1),(a2,b2,c2,d2)| a1 == a2 && b1 == b2 && c1 == c2 && d1 == d2;
}

impl DT: Eq {
    eq = |lhs, rhs| (
        if lhs.is_dt_unknown && rhs.is_dt_unknown { lhs.as_dt_unknown == rhs.as_dt_unknown };
        if lhs.is_dt_dt && rhs.is_dt_dt { lhs.as_dt_dt == rhs.as_dt_dt };
        if lhs.is_dt_dv && rhs.is_dt_dv { lhs.as_dt_dv == rhs.as_dt_dv };
        if lhs.is_dt_i8 && rhs.is_dt_i8 { lhs.as_dt_i8 == rhs.as_dt_i8 };
        if lhs.is_dt_i16 && rhs.is_dt_i16 { lhs.as_dt_i16 == rhs.as_dt_i16 };
        if lhs.is_dt_i32 && rhs.is_dt_i32 { lhs.as_dt_i32 == rhs.as_dt_i32 };
        if lhs.is_dt_i64 && rhs.is_dt_i64 { lhs.as_dt_i64 == rhs.as_dt_i64 };
        if lhs.is_dt_u8 && rhs.is_dt_u8 { lhs.as_dt_u8 == rhs.as_dt_u8 };
        if lhs.is_dt_u16 && rhs.is_dt_u16 { lhs.as_dt_u16 == rhs.as_dt_u16 };
        if lhs.is_dt_u32 && rhs.is_dt_u32 { lhs.as_dt_u32 == rhs.as_dt_u32 };
        if lhs.is_dt_u64 && rhs.is_dt_u64 { lhs.as_dt_u64 == rhs.as_dt_u64 };
        if lhs.is_dt_f32 && rhs.is_dt_f32 { lhs.as_dt_f32 == rhs.as_dt_f32 };
        if lhs.is_dt_f64 && rhs.is_dt_f64 { lhs.as_dt_f64 == rhs.as_dt_f64 };
        if lhs.is_dt_bool && rhs.is_dt_bool { lhs.as_dt_bool == rhs.as_dt_bool };
        if lhs.is_dt_string && rhs.is_dt_string { lhs.as_dt_string == rhs.as_dt_string };
        if lhs.is_dt_unit && rhs.is_dt_unit { lhs.as_dt_unit == rhs.as_dt_unit };
        if lhs.is_dt_tuple2 && rhs.is_dt_tuple2 { lhs.as_dt_tuple2 == rhs.as_dt_tuple2 };
        if lhs.is_dt_tuple3 && rhs.is_dt_tuple3 { lhs.as_dt_tuple3 == rhs.as_dt_tuple3 };
        if lhs.is_dt_tuple4 && rhs.is_dt_tuple4 { lhs.as_dt_tuple4 == rhs.as_dt_tuple4 };
        if lhs.is_dt_func && rhs.is_dt_func { lhs.as_dt_func == rhs.as_dt_func };
        if lhs.is_dt_array && rhs.is_dt_array { lhs.as_dt_array == rhs.as_dt_array };
        if lhs.is_dt_iterator && rhs.is_dt_iterator { lhs.as_dt_iterator == rhs.as_dt_iterator };
        if lhs.is_dt_option && rhs.is_dt_option { lhs.as_dt_option == rhs.as_dt_option };
        if lhs.is_dt_result && rhs.is_dt_result { lhs.as_dt_result == rhs.as_dt_result };
        if lhs.is_dt_hashmap && rhs.is_dt_hashmap { lhs.as_dt_hashmap == rhs.as_dt_hashmap };
        if lhs.is_dt_io && rhs.is_dt_io { lhs.as_dt_io == rhs.as_dt_io };
        if lhs.is_dt_iohandle && rhs.is_dt_iohandle { lhs.as_dt_iohandle == rhs.as_dt_iohandle };
        if lhs.is_dt_iofail && rhs.is_dt_iofail { lhs.as_dt_iofail == rhs.as_dt_iofail };
        false
    );
}

impl DT: ToString {
    to_string = |dt| (
        if dt.is_dt_unknown { "dt_unknown()" };
        if dt.is_dt_dt { "dt_dt()" };
        if dt.is_dt_dv { "dt_dv()" };
        if dt.is_dt_i8 { "dt_i8()" };
        if dt.is_dt_i16 { "dt_i16()" };
        if dt.is_dt_i32 { "dt_i32()" };
        if dt.is_dt_i64 { "dt_i64()" };
        if dt.is_dt_u8 { "dt_u8()" };
        if dt.is_dt_u16 { "dt_u16()" };
        if dt.is_dt_u32 { "dt_u32()" };
        if dt.is_dt_u64 { "dt_u64()" };
        if dt.is_dt_f32 { "dt_f32()" };
        if dt.is_dt_f64 { "dt_f64()" };
        if dt.is_dt_bool { "dt_bool()" };
        if dt.is_dt_string { "dt_string()" };
        if dt.is_dt_unit { "dt_unit()" };
        if dt.is_dt_tuple2 { "dt_tuple2(" + dt.as_dt_tuple2.to_string + ")" };
        if dt.is_dt_tuple3 { "dt_tuple3(" + dt.as_dt_tuple3.to_string + ")"  };
        if dt.is_dt_tuple4 { "dt_tuple4(" + dt.as_dt_tuple4.to_string + ")"  };
        if dt.is_dt_func { "dt_func(" + dt.as_dt_func.to_string + ")"  };
        if dt.is_dt_array { "dt_array(" + dt.as_dt_array.to_string + ")" };
        if dt.is_dt_iterator { "dt_iterator(" + dt.as_dt_iterator.to_string + ")"};
        if dt.is_dt_option { "dt_option(" + dt.as_dt_option.to_string + ")"};
        if dt.is_dt_result { "dt_result(" + dt.as_dt_result.to_string + ")"};
        if dt.is_dt_io { "dt_io(" + dt.as_dt_io.to_string + ")"};
        if dt.is_dt_iohandle { "dt_iohandle()" };
        if dt.is_dt_iofail { "dt_iofail(" + dt.as_dt_iofail.to_string + ")"};
        ""
    );
}

// dynamic value
type DV = box union {
    dv_unknown: (),
    dv_dt: DT,
    dv_dv: DV,
    dv_i8: I8,
    dv_i16: I16,
    dv_i32: I32,
    dv_i64: I64,
    dv_u8: U8,
    dv_u16: U16,
    dv_u32: U32,
    dv_u64: U64,
    dv_f32: F32,
    dv_f64: F64,
    dv_bool: Bool,
    dv_string: String,
    dv_unit: (),
    dv_tuple2: ((DV, DV), (DT, DT)),
    dv_tuple3: ((DV, DV, DV), (DT, DT, DT)),
    dv_tuple4: ((DV, DV, DV, DV), (DT, DT, DT, DT)),
    dv_func: (DV -> DV, (DT, DT)),
    dv_array: (Array (DV), DT),
    dv_iterator: (Iterator (DV), DT),
    dv_option: (Option (DV), DT),
    dv_result: (Result (DV) (DV), (DT, DT)),
    dv_hashmap: (HashMap (DV) (DV), (DT, DT)),
    dv_io: (IO (DV), DT),
    dv_iohandle: IOHandle,
    dv_iofail: (IOFail (DV), DT)
};

impl DV: ToString {
    to_string = |dv| (
        if dv.is_dv_unknown { "dv_unknown()" };
        if dv.is_dv_dt { "dv_dt(" + dv.as_dv_dt.to_string + ")" };
        if dv.is_dv_dv { "dv_dv(" + dv.as_dv_dv.to_string + ")" };
        if dv.is_dv_i8 { "dv_i8(" + dv.as_dv_i8.to_string + ")" };
        if dv.is_dv_i16 { "dv_i16(" + dv.as_dv_i16.to_string + ")" };
        if dv.is_dv_i32 { "dv_i32(" + dv.as_dv_i32.to_string + ")" };
        if dv.is_dv_i64 { "dv_i64(" + dv.as_dv_i64.to_string + ")" };
        if dv.is_dv_u8 { "dv_u8(" + dv.as_dv_u8.to_string + ")" };
        if dv.is_dv_u16 { "dv_u16(" + dv.as_dv_u16.to_string + ")" };
        if dv.is_dv_u32 { "dv_u32(" + dv.as_dv_u32.to_string + ")" };
        if dv.is_dv_u64 { "dv_u64(" + dv.as_dv_u64.to_string + ")" };
        if dv.is_dv_f32 { "dv_f32(" + dv.as_dv_f32.to_string + ")" };
        if dv.is_dv_f64 { "dv_f64(" + dv.as_dv_f64.to_string + ")" };
        if dv.is_dv_bool { "dv_bool(" + dv.as_dv_bool.to_string + ")" };
        if dv.is_dv_string { "dv_string(" + dv.as_dv_string.to_string + ")" };
        if dv.is_dv_unit { "dv_unit(" + dv.as_dv_unit.to_string + ")" };
        if dv.is_dv_tuple2 { "dv_tuple2(" + dv.as_dv_tuple2.to_string + ")" };
        if dv.is_dv_tuple3 { "dv_tuple3(" + dv.as_dv_tuple3.to_string + ")"  };
        if dv.is_dv_tuple4 { "dv_tuple4(" + dv.as_dv_tuple4.to_string + ")"  };
        if dv.is_dv_func { "dv_func(" + dv.as_dv_func.@1.to_string + ")"  };
        if dv.is_dv_array { "dv_array(" + dv.as_dv_array.@1.to_string + ")" };
        if dv.is_dv_iterator { "dv_iterator(" + dv.as_dv_iterator.@1.to_string + ")"};
        if dv.is_dv_option { "dv_option(" + dv.as_dv_option.@1.to_string + ")"};
        if dv.is_dv_result { "dv_result(" + dv.as_dv_result.@1.to_string + ")"};
        if dv.is_dv_io { "dv_io(" + dv.as_dv_io.@1.to_string + ")"};
        if dv.is_dv_iohandle { "dv_iohandle()" };
        if dv.is_dv_iofail { "dv_iofail(" + dv.as_dv_iofail.@1.to_string + ")"};
        ""
    );
}

namespace DV {
    to_dt: DV -> DT;
    to_dt = |dv| (
        if dv.is_dv_unknown { dt_unknown() };
        if dv.is_dv_dt { dt_dt() };
        if dv.is_dv_dv { dt_dv() };
        if dv.is_dv_i8 { dt_i8() };
        if dv.is_dv_i16 { dt_i16() };
        if dv.is_dv_i32 { dt_i32() };
        if dv.is_dv_i64 { dt_i64() };
        if dv.is_dv_u8 { dt_u8() };
        if dv.is_dv_u16 { dt_u16() };
        if dv.is_dv_u32 { dt_u32() };
        if dv.is_dv_u64 { dt_u64() };
        if dv.is_dv_f32 { dt_f32() };
        if dv.is_dv_f64 { dt_f64() };
        if dv.is_dv_bool { dt_bool() };
        if dv.is_dv_string { dt_string() };
        if dv.is_dv_unit { dt_unit() };
        if dv.is_dv_tuple2 { let (_, (dt1, dt2)) = dv.as_dv_tuple2; dt_tuple2 $ (dt1, dt2) };
        if dv.is_dv_tuple3 { let (_, (dt1, dt2, dt3)) = dv.as_dv_tuple3; dt_tuple3 $ (dt1, dt2, dt3) };
        if dv.is_dv_tuple4 { let (_, (dt1, dt2, dt3, dt4)) = dv.as_dv_tuple4; dt_tuple4 $ (dt1, dt2, dt3, dt4) };
        if dv.is_dv_func { let (_, (dt1, dt2)) = dv.as_dv_func; dt_func $ (dt1, dt2) };
        if dv.is_dv_array { let (_, dt1) = dv.as_dv_array; dt_array $ dt1 };
        if dv.is_dv_iterator { let (_, dt1) = dv.as_dv_iterator; dt_iterator $ dt1 };
        if dv.is_dv_option { let (_, dt1) = dv.as_dv_option; dt_option $ dt1 };
        if dv.is_dv_result { let (_, (dt1, dt2)) = dv.as_dv_result; dt_result $ (dt1, dt2) };
        if dv.is_dv_hashmap { let (_, (dt1, dt2)) = dv.as_dv_hashmap; dt_hashmap $ (dt1, dt2) };
        if dv.is_dv_io { let (_, dt1) = dv.as_dv_io; dt_io $ dt1 };
        if dv.is_dv_iohandle { dt_iohandle() };
        if dv.is_dv_iofail { let (_, dt1) = dv.as_dv_iofail; dt_iofail $ dt1 };
        dt_unknown()
    );
}

trait a: Dyn {
    get_dt: (() -> a) -> DT;
    to_dv: a -> DV;
    from_dv: DV -> Result ErrMsg a;
}


impl DT: Dyn {
    get_dt = |_| dt_dt();
    to_dv = |v| dv_dt(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_dt, as_dv_dt);
}

impl DV: Dyn {
    get_dt = |_| dt_dv();
    to_dv = |v| dv_dv(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_dv, as_dv_dv);
}

impl I8: Dyn {
    get_dt = |_| dt_i8();
    to_dv = |v| dv_i8(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_i8, as_dv_i8);
}

impl I16: Dyn {
    get_dt = |_| dt_i16();
    to_dv = |v| dv_i16(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_i16, as_dv_i16);
}

impl I32: Dyn {
    get_dt = |_| dt_i32();
    to_dv = |v| dv_i32(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_i32, as_dv_i32);
}

impl I64: Dyn {
    get_dt = |_| dt_i64();
    to_dv = |v| dv_i64(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_i64, as_dv_i64);
}

impl U8: Dyn {
    get_dt = |_| dt_u8();
    to_dv = |v| dv_u8(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_u8, as_dv_u8);
}

impl U16: Dyn {
    get_dt = |_| dt_u16();
    to_dv = |v| dv_u16(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_u16, as_dv_u16);
}

impl U32: Dyn {
    get_dt = |_| dt_u32();
    to_dv = |v| dv_u32(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_u32, as_dv_u32);
}

impl U64: Dyn {
    get_dt = |_| dt_u64();
    to_dv = |v| dv_u64(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_u64, as_dv_u64);
}

impl F32: Dyn {
    get_dt = |_| dt_f32();
    to_dv = |v| dv_f32(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_f32, as_dv_f32);
}

impl F64: Dyn {
    get_dt = |_| dt_f64();
    to_dv = |v| dv_f64(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_f64, as_dv_f64);
}

impl Bool: Dyn {
    get_dt = |_| dt_bool();
    to_dv = |v| dv_bool(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_bool, as_dv_bool);
}

impl String: Dyn {
    get_dt = |_| dt_string();
    to_dv = |v| dv_string(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_string, as_dv_string);
}

impl (): Dyn {
    get_dt = |_| dt_unit();
    to_dv = |v| dv_unit(v);
    from_dv = |dv| dv._from_dv_helper(is_dv_unit, as_dv_unit);
}

impl [a:Dyn, b:Dyn] (a,b): Dyn {
    get_dt = |f| dt_tuple2 $ Tuple2::get_opt_dt (|_| f());
    to_dv = |v| (
        dv_tuple2 $ ((to_dv(v.@0), to_dv(v.@1)), Tuple2::get_opt_dt(|_|v))
    );
    from_dv = |dv| (
        let ((dv_a, dv_b), (dt_a, dt_b)) = *dv._from_dv_helper(is_dv_tuple2, as_dv_tuple2);
        let _ = *_assert_dt_equal("tuple.@0", to_dt(dv_a), dt_a);
        let _ = *_assert_dt_equal("tuple.@1", to_dt(dv_b), dt_b);
        let a = *from_dv(dv_a);
        let b = *from_dv(dv_b);
        ok $ (a, b)
    );
}

impl [a:Dyn, b:Dyn, c:Dyn] (a,b,c): Dyn {
    get_dt = |f| dt_tuple3 $ Tuple3::get_opt_dt (|_| f());
    to_dv = |v| (
        dv_tuple3 $ ((to_dv(v.@0), to_dv(v.@1), to_dv(v.@2)), Tuple3::get_opt_dt(|_|v))
    );
    from_dv = |dv| (
        let ((dv_a, dv_b, dv_c), (dt_a, dt_b, dt_c)) = *dv._from_dv_helper(is_dv_tuple3, as_dv_tuple3);
        let _ = *_assert_dt_equal("tuple.@0", to_dt(dv_a), dt_a);
        let _ = *_assert_dt_equal("tuple.@1", to_dt(dv_b), dt_b);
        let _ = *_assert_dt_equal("tuple.@2", to_dt(dv_c), dt_c);
        let a = *from_dv(dv_a);
        let b = *from_dv(dv_b);
        let c = *from_dv(dv_c);
        ok $ (a, b, c)
    );
}

impl [a:Dyn, b:Dyn, c:Dyn, d:Dyn] (a,b,c,d): Dyn {
    get_dt = |f| dt_tuple4 $ Tuple4::get_opt_dt (|_| f());
    to_dv = |v| (
        dv_tuple4 $ ((to_dv(v.@0), to_dv(v.@1), to_dv(v.@2), to_dv(v.@3)), Tuple4::get_opt_dt(|_|v))
    );
    from_dv = |dv| (
        let ((dv_a, dv_b, dv_c, dv_d), (dt_a, dt_b, dt_c, dt_d)) = *dv._from_dv_helper(is_dv_tuple4, as_dv_tuple4);
        let _ = *_assert_dt_equal("tuple.@0", to_dt(dv_a), dt_a);
        let _ = *_assert_dt_equal("tuple.@1", to_dt(dv_b), dt_b);
        let _ = *_assert_dt_equal("tuple.@2", to_dt(dv_c), dt_c);
        let _ = *_assert_dt_equal("tuple.@3", to_dt(dv_d), dt_d);
        let a = *from_dv(dv_a);
        let b = *from_dv(dv_b);
        let c = *from_dv(dv_c);
        let d = *from_dv(dv_d);
        ok $ (a, b, c, d)
    );
}

namespace Helper {
    _assert_dt_equal: String -> DT -> DT -> Result ErrMsg ();
    _assert_dt_equal = |msg, lhs, rhs| (
        if lhs != rhs { err $ "Type mismatch ("+ msg + "): lhs=" + lhs.to_string + " rhs=" + rhs.to_string };
        ok()
    );

    _from_dv_helper: (DV -> Bool) -> (DV -> a) -> DV -> Result ErrMsg a;
    _from_dv_helper = |is_dv, as_dv, dv| (
        if is_dv(dv) { ok $ as_dv(dv) } else { err $ "Type mismatch" }
    );

    _from_dv_helper_opt: (DV -> Bool) -> (DV -> (a, t1)) -> ((() -> a) -> DT) -> DV -> Result ErrMsg a;
    _from_dv_helper_opt = |is_dv, as_dv, get_opt_dt, dv| (
        dv._from_dv_helper(is_dv, |dv|
            let (v, dt1) = as_dv(dv);
            let dt1_ = get_opt_dt(|_| v);
            if dt1 != dt1_ { err $ "Type mismatch (dt1)" };
            ok $ v
        )
    );

    namespace Array {
        get_opt_dt: [a: Dyn] (() -> Array a) -> DT;
        get_opt_dt = |f| get_dt $ |_| f().@(0);
    }

    namespace Tuple2 {
        get_opt_dt: [a: Dyn, b: Dyn] (() -> (a, b)) -> (DT, DT);
        get_opt_dt = |f| (get_dt $ |_| f().@0, get_dt $ |_| f().@1);
    }

    namespace Tuple3 {
        get_opt_dt: [a: Dyn, b: Dyn, c: Dyn] (() -> (a, b, c)) -> (DT, DT, DT);
        get_opt_dt = |f| (get_dt $ |_| f().@0, get_dt $ |_| f().@1,
                          get_dt $ |_| f().@2);
    }

    namespace Tuple4 {
        get_opt_dt: [a: Dyn, b: Dyn, c: Dyn, d: Dyn] (() -> (a, b, c, d)) -> (DT, DT, DT, DT);
        get_opt_dt = |f| (get_dt $ |_| f().@0, get_dt $ |_| f().@1,
                          get_dt $ |_| f().@2, get_dt $ |_| f().@3);
    }

    namespace Result {
        get_opt_dt: [a: Dyn, e: Dyn] (() -> Result e a) -> (DT, DT);
        get_opt_dt = |f| (get_dt $ |_| f().as_err, get_dt $ |_| f().as_ok);
    }
    namespace Func {
        get_opt_dt: [a: Dyn, b: Dyn] (() -> (a -> b)) -> (DT, DT);
        get_opt_dt = |f|
            let fa = |_| from_dv(dv_unknown()).as_ok;   // () -> a 
            let fb = |_| f() $ fa();                     // () -> b
            let ta = get_dt(fa);
            let tb = get_dt(fb);
            (ta, tb);
    }
}


/*
impl [a:Dyn, e:Dyn] Result e a: Dyn {
}
*/

convert_from_array_dv: [a: Dyn] Array DV -> Result ErrMsg (Array a);
convert_from_array_dv = |array| (
    array.to_iter.loop_iter_m(
        Array::empty(array.get_size), |output, dv|
        let a = *from_dv(dv);
        continue_m $ output.push_back(a)
    )
);

impl [a:Dyn] Array a: Dyn {
    get_dt = |f| dt_array(get_opt_dt(f));
    to_dv = |array| (
        let array_dv = array.map(to_dv);
        let dt1 = Array::get_opt_dt(|_| array);
        dv_array $ (array_dv, dt1)
    );
    from_dv = |dv| (
        if !dv.is_dv_array { err $ "Type Mismatch" };
        let (array_dv, dt1) = dv.as_dv_array;
        convert_from_array_dv(array_dv)
    );
}


impl [a:Dyn, b:Dyn] a -> b : Dyn {
    get_dt = |f| (                      // f: () -> (a -> b)
        dt_func $ Func::get_opt_dt(f)
    );
    to_dv = |func| (                    // func: a -> b
        let func_dv = |dv_a| (          // func_dv: DV -> DV
            let a = from_dv(dv_a).as_ok;  // won't panic if dt1 is checked properly
            let b = func(a);
            let dv_b = to_dv(b);
            dv_b
        );
        dv_func $ (func_dv, Func::get_opt_dt(|_| func))
    );
    from_dv = |dv| (
        let (func_dv, (dt1, dt2)) = *dv._from_dv_helper(is_dv_func, as_dv_func);
        let func = |a| (                // func: a -> b
            let dv_a = to_dv(a);
            let dv_b = func_dv (dv_a);
            let b = from_dv(dv_b).as_ok;   // won't panic if dt2 is checked properly
            b
        );
        let (dt1_, dt2_) = Func::get_opt_dt(|_| func);
        if dt1 != dt1_ || dt2 != dt2_ { err $ "Type Mismatch (dt1 or dt2)" };
        ok $ func
    );
}

namespace Util {
    dv_apply: DV -> DV -> Result ErrMsg DV;
    dv_apply = |dv_f, dv_x| (
        if !dv_f.is_dv_func { err $ "dv_apply: not a function" };
        let (func_dv, (dt1, dt2)) = dv_f.as_dv_func;
        let dt_x = dv_x.to_dt;
        if dt_x != dt1 {
            err $ "dv_apply: argument type mismatch"
        };
        let dv_y = func_dv(dv_x);
        ok $ dv_y
    );
}

//-----------------------------------------------------------

test_simple_type_ok: [a: Dyn, a: Eq, a: ToString] String -> a -> (DT -> Bool) ->
    (a -> DV) -> (DV -> Bool) -> (DV -> Result ErrMsg a) -> TestCase;
test_simple_type_ok = |type_name, a, is_dt, dv_a, is_dv, from_dv| (
    let testname = "test_simple_type_ok (" + type_name + ")";
    make_test(testname) $ |_|
    let dt = get_dt (|_| a);
    let _ = *assert_true("is_dt", is_dt(dt));
    let dv = to_dv (a);
    let _ = *assert_true("is_dv", is_dv(dv));
    //let _ = *assert_equal("as_dv", a, as_dv(dv));
    let _ = *assert_equal("to_dt", dt, to_dt(dv));
    let res = from_dv (dv);
    //let _ = |_| res.as_ok == a;     // to infer the type of `res` to be `Result e a`
    let _ = *assert_true("res.is_ok", res.is_ok);
    let _ = *assert_equal("res.as_ok", a, res.as_ok);
    pure()
);

test_simple_type: TestCase;
test_simple_type = (
    [
        test_simple_type_ok ("dt", dt_unit(), is_dt_dt, dv_dt, is_dv_dt, from_dv),
        //test_simple_type_ok ("dv", dv_unit(), is_dt_dv, dv_dv, is_dv_dv, from_dv), // DV does not impl Eq
        test_simple_type_ok ("i8", 0_I8, is_dt_i8, dv_i8, is_dv_i8, from_dv),
        test_simple_type_ok ("i16", 0_I16, is_dt_i16, dv_i16, is_dv_i16, from_dv),
        test_simple_type_ok ("i32", 0_I32, is_dt_i32, dv_i32, is_dv_i32, from_dv),
        test_simple_type_ok ("i64", 0_I64, is_dt_i64, dv_i64, is_dv_i64, from_dv),
        test_simple_type_ok ("u8", 0_U8, is_dt_u8, dv_u8, is_dv_u8, from_dv),
        test_simple_type_ok ("u16", 0_U16, is_dt_u16, dv_u16, is_dv_u16, from_dv),
        test_simple_type_ok ("u32", 0_U32, is_dt_u32, dv_u32, is_dv_u32, from_dv),
        test_simple_type_ok ("u64", 0_U64, is_dt_u64, dv_u64, is_dv_u64, from_dv),
        test_simple_type_ok ("f32", 0.0_F32, is_dt_f32, dv_f32, is_dv_f32, from_dv),
        test_simple_type_ok ("f64", 0.0_F64, is_dt_f64, dv_f64, is_dv_f64, from_dv),
        test_simple_type_ok ("bool", false, is_dt_bool, dv_bool, is_dv_bool, from_dv),
        test_simple_type_ok ("string", "", is_dt_string, dv_string, is_dv_string, from_dv),
        test_simple_type_ok ("unit", (), is_dt_unit, dv_unit, is_dv_unit, from_dv),
        TestCase::empty
    ]
    .run_tests
);

test_tuple_ok: [a: Dyn, a: Eq, a: ToString] String -> a -> (DT -> Bool) -> (DV -> Bool) -> TestCase;
test_tuple_ok = |type_name, a, is_dt, is_dv| (
    let testname = "test_simple_type_ok (" + type_name + ")";
    make_test(testname) $ |_|
    let dt = get_dt (|_| a);
    let _ = *assert_true("is_dt", is_dt(dt));
    let dv = to_dv (a);
    let _ = *assert_true("is_dv", is_dv(dv));
    let _ = *assert_equal("to_dt", dt, to_dt(dv));
    let res = from_dv (dv);
    let _ = *assert_true("res.is_ok", res.is_ok);
    let _ = *assert_equal("res.as_ok", a, res.as_ok);
    pure()
);

test_tuple: TestCase;
test_tuple = (
    [
        test_tuple_ok ("tuple2", (1, 2.2), is_dt_tuple2, is_dv_tuple2),
        test_tuple_ok ("tuple3", (1, 2.2, "a"), is_dt_tuple3, is_dv_tuple3),
        test_tuple_ok ("tuple4", (1, 2.2, "a", ()), is_dt_tuple4, is_dv_tuple4),
        TestCase::empty
    ]
    .run_tests
);

test_main: IO ();
test_main = (
    [
        test_simple_type,
        test_tuple,
        TestCase::empty
    ]
    .run_test_driver
);

// helper for debugging
lprintln: [a: ToString] String -> a -> IOFail ();
lprintln = |name, x| println(name + ": " + x.to_string).lift;

main1: IO ();
main1 = (
    do {
        let i64 = 42;
        let str = "abc";
        let array: Array I64 = [1,2,3];
        let func_i64_i64: I64 -> I64 = |i| i + 1;
        let _ = *lprintln("i64 dt", get_dt(|_| i64));
        let _ = *lprintln("string dt", get_dt(|_| str));
        let _ = *lprintln("array dt", get_dt(|_| array));
        let _ = *lprintln("func_i64_i64 dt", get_dt(|_| func_i64_i64));
        let dv1: DV = to_dv(i64);
        let dv2: DV = to_dv(str);
        let dv3: DV = to_dv(array);
        let dv4: DV = to_dv(func_i64_i64);
        let _ = *lprintln("dv1", dv1);
        let _ = *lprintln("dv2", dv2);
        let _ = *lprintln("dv3", dv3);
        let _ = *lprintln("dv4", dv4);
        let i64: I64 = *from_dv(dv1).from_result;
        let str: String = *from_dv(dv2).from_result;
        let array: Array I64 = *from_dv(dv3).from_result;
        let func_i64_i64: I64 -> I64 = *from_dv(dv4).from_result;
        let _ = *lprintln("i64",i64);
        let _ = *lprintln("str",str);
        let _ = *lprintln("array",array);
        let _ = *lprintln("func_i64_i64(42)", func_i64_i64(42));
        let _ = *lprintln("dv_apply(dv4,dv1)", dv_apply(dv4,dv1));
        let _ = *lprintln("dv_apply(dv4,dv2)", dv_apply(dv4,dv2));
        pure()
    }
    .try(|err| eprintln(err))
);

main: IO ();
main = (
    let _ = *test_main;
    //let _ = *main1;
    pure()
);

