// Type definitions for mathematical concepts.
module Minilib.Math.Types;

// [Monoid](https://en.wikipedia.org/wiki/Monoid)
trait Monoid = Zero + Add;

// [Additive group](https://en.wikipedia.org/wiki/Additive_group)
trait AdditiveGroup = Eq + Zero + Neg + Add + Sub;

// Multiplicative unit
trait a: One {
    one: a;
}

// [Ring](https://en.wikipedia.org/wiki/Ring_(mathematics))
trait Ring = AdditiveGroup + One + Mul;

// [Euclidean domain](https://en.wikipedia.org/wiki/Euclidean_domain)
// Requirement: forall a b, a = a / b * b + a % b
trait Euclid = Ring + Div + Rem;

// [Field](https://en.wikipedia.org/wiki/Field_(mathematics))
// Requirement: forall a b, a = a / b * b
trait Field = Ring + Div;

// [Total order](https://en.wikipedia.org/wiki/Total_order)
trait Ordered = Eq + LessThan + LessThanOrEq;

// [Ordered field](https://en.wikipedia.org/wiki/Ordered_field)
trait OrderedField = Field + LessThan + LessThanOrEq;

impl I64: One {
    one = 1;
}

impl F64: One {
    one = 1.0;
}