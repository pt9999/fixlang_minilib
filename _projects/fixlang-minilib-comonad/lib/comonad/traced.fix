// Traced comonad. (a.k.a CoWriter comonad)
//
// For details, see [blog post: The Reader and Writer Monads and Comonads](https://www.olivierverdier.com/posts/2014/12/31/reader-writer-monad-comonad/).
module Minilib.Comonad.Traced;

import Minilib.Comonad.IdentityC;
import Minilib.Trait.Monoid;
import Minilib.Trait.Semigroup;
import Minilib.Trait.Comonad;

// Traced comonad.
// `e` is a type of an environment.
// `w` is a type of an underlyind comonad.
// `a` is a type of a value.
type [w: * -> *] TracedT e w a = unbox struct {
    data: w (e -> a)
};

type Traced e a = TracedT e IdentityC a;

namespace Traced {
    // Creates a generic traced comonad from a function.
    traced_t: [w: Comonad] w (e -> a) -> TracedT e w a;
    traced_t = |f| TracedT { data: f };

    // Creates a traced comonad from a function.
    traced: (e -> a) -> Traced e a;
    traced = |f| traced_t $ IdentityC::make $ f;

    // Runs a generic traced commonad with the supplied environment.
    run_traced_t: [w: Comonad] TracedT e w a -> w (e -> a);
    run_traced_t = @data;

    // Runs a traced commonad with the supplied environment.
    run_traced: e -> Traced e a -> a;
    run_traced = |e, wa| (wa.run_traced_t.extract)(e);
}

impl [w: Comonad] TracedT e w: Functor {
    map = |f, wa| (
        traced_t $ wa.run_traced_t.extend(|runner| runner.extract >> f)
    );
}

impl [e: Monoid, w: Comonad] TracedT e w: Comonad {
    extract = |wa| (wa.run_traced_t.extract)(mempty);
    extend = |f, wb| (      // wb: TracedT w e b, f: TracedT w e b -> a
        //let data = wb.run_traced_t;     // w (e -> b)
        let inner2 = |c| wb.run_traced_t.extend(
            |_, c2| (wb.run_traced_t.extract)(c.sappend(c2))
        );  // e -> w (e -> a)
        let inner1 = wb.run_traced_t.extend(
            |_, c| f (traced_t $ inner2(c))
        );  // w (e -> a)
        traced_t $ inner1
    );
}
