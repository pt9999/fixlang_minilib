// This program generates probable primes of 128 bit to 1024 bit.
module Main;

import Debug;
import Random;

import Minilib.Math.BigInt;
import Minilib.Math.BigIntPrime;
import Minilib.Text.StringEx;
import Minilib.Testing.Timeit;

main: IO ();
main = (
    let _ = *pure();
    let _ = CALL_C[() setbuf(Ptr, Ptr), IO::stdout._file_ptr, nullptr];
    let begin_bits = 128;
    let step_bits = 128;
    let end_bits = 1024;
    let _ = *println((begin_bits, end_bits).format("This program generates probable primes of {} bit to {} bit."));
    let _ = *println("It may take several minutes. Please be patient.");
    let _ = *println("");
    let time = CALL_C[I32 time(Ptr), nullptr];
    let random = Random::init_by_seed(time.to_U64);
    let prime_gen = *PrimeGen::make(random, false);
    loop_m(
        begin_bits, |bit_length|
        if bit_length > end_bits { break_m $ () };
        let _ = *println("Searching a probable prime of " + bit_length.to_string + " bits...");
        let (n, time) = *consumed_realtime_while_io(
            prime_gen.probable_prime(bit_length)
        );
        let _ = *println(n.to_string);
        let _ = *println("time="+time.to_string);
        continue_m $ bit_length + step_bits
    )
);