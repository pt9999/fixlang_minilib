// Writer Monad. (a.k.a Env, CoReader Comonad)
//
// cf. https://www.olivierverdier.com/posts/2014/12/31/reader-writer-monad-comonad/
module Minilib.Monad.Writer;

import Minilib.Trait.Monoid;
import Minilib.Trait.Comonad;

type Writer e a = unbox struct {
    data: (e, a)
};

namespace Writer {
    writer: e -> a -> Writer e a;
    writer = |e, a| Writer { data: (e, a) };

    run_writer: Writer e a -> (e, a);
    run_writer = @data;

    write: [e: Monoid] e -> Writer e ();
    write = |e| writer(e, ());

    _get_env: Writer e a -> e;
    _get_env = |ma| ma.@data.@0;

    _get_value: Writer e a -> a;
    _get_value = |ma| ma.@data.@1;
}

type Env e a = Writer e a;

namespace Env {
    env: e -> a -> Env e a;
    env = Writer::writer;

    get_env: Env e a -> e;
    get_env = Writer::_get_env;
}

impl Writer e: Functor {
    map = |f, ma| writer $ (ma._get_env, f(ma._get_value));
}

impl [e: Monoid] Writer e: Monad {
    pure = |a| writer(mempty, a);
    bind = |f, ma| (
        let mb = f(ma._get_value);
        let env = ma._get_env.mconcat(mb._get_env);
        writer(env, mb._get_value)
    );
}

impl Writer e: Comonad {
    extract = _get_value;
    extend = |f, wb| writer(wb._get_env, f(wb));
}