module Main;

trait [p: * -> * -> *] p: Profunctor {
    dimap: (a -> b) -> (c -> d) -> p b c -> p a d;
}

impl Arrow: Profunctor {
    dimap = |f, g, arr| f >> arr >> g;
}

main: IO ();
main = (
    let arr: Arrow I64 String = |i| i.to_string;
    let arr = arr.dimap(|i| i * 2, |s| "s=" + s);
    println(arr(42))
);

