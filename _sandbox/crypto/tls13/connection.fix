module Minilib.Crypto.Tls13.Connection;

import Debug;

import Minilib.Monad.State;
import Minilib.Monad.Trans;
import Minilib.Net.Tcp;
import Minilib.Text.Hex;

trait TLSConnection = Functor + Monad + TLSConnectionIF;

trait [m: * -> *] m: TLSConnectionIF {
    send_bytes: Array U8 -> m ();
    recv_n_bytes: I64 -> m (Array U8);
}

trait a: GetSocket {
    get_socket: a -> Socket;
}

impl [s: GetSocket] StateT s IOFail: TLSConnectionIF {
    send_bytes = |bytes| (
        let socket = *get_state.map(get_socket);
        let size = *socket.send(bytes).lift_t;  // TODO check size
        eval debug_eprintln("sent:" + size.to_string + " bytes: " + bytes.to_string_hex);
        pure()
    );

    recv_n_bytes = |length| (
        let socket = *get_state.map(get_socket);
        socket.recv(length).lift_t
    );
}

