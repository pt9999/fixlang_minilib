module Main;

_sqlite3_open: String -> IOFail Ptr;
_sqlite3_open = |filepath| (
    let pdb : Array Ptr = Array::fill(1, nullptr);
    let res = pdb.borrow_ptr(|p_pdb|
        filepath.borrow_c_str(|p_filepath|
            CALL_C[I32 sqlite3_open(Ptr, Ptr), p_filepath, p_pdb]
        )
    );
    if res != 0_I32 {
        throw $ "sqlite3_open failed: res = " + res.to_string
    };
    let ptr = pdb.@(0);
    pure $ ptr
);

/*
type Sqlite = unbox struct {
    ptr: Destructor Ptr
};

namespace Sqlite {
    
}
*/

main: IO ();
main = (
    do {
        let ptr = *_sqlite3_open("a.db");
        pure()
    }
    .try(|err| eprintln(err))
);