// https://en.wikipedia.org/wiki/ASN.1
// https://en.wikipedia.org/wiki/X.690
module Minilib.Crypto.Cert.Asn1Der;

import Debug;

import Minilib.Crypto.Cert.Asn1;
import Minilib.Encoding.Binary;
import Minilib.Math.Types;
import Minilib.Math.BigNat;
import Minilib.Math.BigInt;
import Minilib.Monad.State;
import Minilib.Monad.Error;
import Minilib.Monad.Trans;
import Minilib.Monad.FunctorM;
import Minilib.Text.StringEx;
import Minilib.Text.Hex;
import Minilib.Text.Unicode;

trait MonadReadByte = Functor + Monad + MonadErrorIF + MonadReadByteIF;

trait [m: * -> *] m: MonadReadByteIF {
    // Reads a byte. If the end-of-stream is reached, it reports an error.
    read_byte: m U8;
    // Checks whether the end-of-stream is reached.
    is_eos: m Bool;
    // Runs the inner monad with the inner contents.
    // The inner contents is created from current position to the position advanced by the specified length,
    run_inner: I64 -> m a -> m a;

    // get the position of the stream.
    get_pos: m I64;

    // set the position of the stream.
    set_pos: I64 -> m ();
}

__Err_EndOfStream: ErrMsg;
__Err_EndOfStream = "End of stream";

impl [m: MonadError] StateT ByteBuffer m: MonadReadByteIF {
    read_byte = make_state_t_monad $ |buf| (
        if buf.get_position >= buf.get_size {
            error $ __Err_EndOfStream
        };
        let res: Result ErrMsg (U8, ByteBuffer) = buf.unmarshal;
        if res.is_err {
            error $ res.as_err
        };
        pure $ res.as_ok
    );
    is_eos = (
        let buf = *get_state;
        pure $ buf.get_position >= buf.get_size
    );
    run_inner = |length, inner_monad| (
        let buf = *get_state;
        let inner_array = buf.@array.subarray(
            0,
            min(buf.@position + length, buf.get_size)
        );
        let inner_buf = ByteBuffer::make(inner_array, big_endian());
        let inner_buf = inner_buf.set_position(buf.@position);
        let (a, inner_buf) = *inner_monad.run_state_t(inner_buf).lift_t;
        eval *put_state(buf.set_position(buf.@position + length));
        pure $ a
    );

    get_pos = (
        let buf = *get_state;
        pure $ buf.get_position
    );

    set_pos = |pos| (
        mod_state(set_position(pos))
    );
}

// A type that represents the ASN.1 Identifier octets.
type Identifier = unbox struct {
    tag_class: TagClass,    // tag class
    constructed: Bool,      // true: constructed, false: primitive
    tag: Tag                // tag number
};

namespace Identifier {
    // `Identifier::make(tag_class, constructed, tag)` creates an identifier.
    make: TagClass -> Bool -> Tag -> Identifier;
    make = |tag_class, constructed, tag| Identifier {
        tag_class: tag_class,
        constructed: constructed,
        tag: tag
    };

    // `identifier.assert_tag_class(tag_class)` checks whether the tag class is correct.
    assert_tag_class: [m: MonadError] TagClass -> Identifier -> m ();
    assert_tag_class = |tag_class, identifier| (
        if identifier.@tag_class != tag_class {
            error $ (tag_class, identifier.@tag_class).format("tag_class mismatch: expected={} actual={}")
        };
        pure $ ()
    );

    // `identifier.assert_primitive` checks whether the encoding is primitive.
    assert_primitive: [m: MonadError] Identifier -> m ();
    assert_primitive = |identifier| (
        if identifier.@constructed {
            error $ "not a primitive"
        };
        pure $ ()
    );

    // `identifier.assert_primitive` checks whether the encoding is constructed.
    assert_constructed: [m: MonadError] Identifier -> m ();
    assert_constructed = |identifier| (
        if !identifier.@constructed {
            error $ "not a constructed"
        };
        pure $ ()
    );

    // `identifier.assert_tag(tag)` checks whether the tag is correct.
    assert_tag: [m: MonadError] Tag -> Identifier -> m ();
    assert_tag = |tag, identifier| (
        if identifier.@tag != tag {
            error $ [tag, identifier.@tag].format("tag mismatch: expected={} actual={}")
        };
        pure $ ()
    );
}

impl Identifier: Eq {
    eq = |a, b| (
        a.@tag_class == b.@tag_class &&
        a.@constructed == b.@constructed &&
        a.@tag == b.@tag
    );
}

impl Identifier: ToString {
    to_string = |obj| (
        "Identifier {" +
        " tag_class=" + obj.@tag_class.to_string +
        " constructed=" + obj.@constructed.to_string +
        " tag=" + obj.@tag.to_string +
        " }"
    );
}

// A monad that decodes the ASN.1 identifier octets.
decode_identifier: [m: MonadReadByte] m Identifier;
decode_identifier = (
    let pos = *get_pos;
    let u8 = *read_byte;
    let tag_class = u8.shift_right(6_U8).bit_and(3_U8);
    let constructed = (u8.bit_and(0x20_U8) != 0_U8);
    let tag_type = u8.bit_and(31_U8);
    let tag_type = *(
        if tag_type < 31_U8 { pure $ tag_type };
        loop_m(
            0_U8, |tag_type|
            let u8 = *read_byte;
            let tag_type = tag_type.shift_left(7_U8).bit_or(u8.bit_and(0x7F_U8));
            if u8.bit_and(0x80_U8) == 0_U8 { break_m $ tag_type };
            continue_m $ tag_type
        )
    );
    let identifier = Identifier {
        tag_class: tag_class,
        constructed: constructed,
        tag: tag_type
    };
    //eval debug_eprintln((pos, identifier).format("pos={} identifier={}"));
    pure $ identifier
);

// A monad that decodes the ASN.1 length octets.
decode_length: [m: MonadReadByte] m I64;
decode_length = (
    let u8 = *read_byte;
    if u8.bit_and(0x80_U8) == 0_U8 {
        pure $ u8.to_I64
    };
    let n = u8.bit_and(0x7F_U8).to_I64;
    if n == 0 {
        error $ "der does not allow indefinite length"
    };
    if n == 127 {
        error $ "der does not allow reserved length"
    };
    loop_m(
        (0, 0), |(length, i)|
        if i >= n { break_m $ length };
        let u8 = *read_byte;
        let length = length.shift_left(8).bit_or(u8.to_I64);
        continue_m $ (length, i + 1)
    )
);

// A monad that decodes the ASN.1 contents octets.
decode_contents: [m: MonadReadByte] I64 -> m (Array U8);
decode_contents = |length| (
    Array::fill(length, read_byte).map_m(|x| x)
);

decode_primitive: [m: MonadReadByte] m (Identifier, Array U8);
decode_primitive = (
    let identifier = *decode_identifier;
    eval *identifier.assert_tag_class(tc_universal);
    eval *identifier.assert_primitive;
    let length = *decode_length;
    let contents = *decode_contents(length);
    pure $ (identifier, contents)
);

// `decode_constructed(tag, inner_monad)` reads the identifier and the length,
// then checks whether the identifier matches the `tag`,
// then runs `inner_monad` in the inner contents.
decode_constructed: [m: MonadReadByte] TagClass -> Tag -> m a -> m a;
decode_constructed = |tag_class, tag, inner_monad| (
    let identifier = *decode_identifier;
    eval *identifier.assert_tag_class(tag_class);
    eval *identifier.assert_constructed;
    eval *assert_tag(tag, identifier);
    let length = *decode_length;
    run_inner(length, inner_monad)
);

// `repeat(inner_monad)` is a monad that repeatedly runs `inner_monad` until it reaches the end-of-stream.
repeat: [m: MonadReadByte] m a -> m (Array a);
repeat = |inner_monad| (
    loop_m(
        [], |arr|
        if *is_eos { break_m $ arr };
        let a = *inner_monad;
        continue_m $ arr.push_back(a)
    )
);

// `inner_monad.if_exists` is a monad that runs `inner_monad` as an optional value.
if_exists: [m: MonadReadByte] m a -> m (Option a);
if_exists = |inner_monad| (
    inner_monad.map(some).catch(|errmsg| pure $ none())
);

// `decode_sequence(inner_monad)` reads the identifier and the length,
// then checks whether the identifier matches `tag_sequence` and the tag class is `tc_universal`,
// then runs `inner_monad` in the inner contents.
decode_sequence: [m: MonadReadByte] m a -> m a;
decode_sequence = |inner_monad| (
    decode_constructed(tc_universal, tag_sequence, inner_monad)
);

decode_sequence_of: [m: MonadReadByte] m a -> m (Array a);
decode_sequence_of = |inner_monad| (
    decode_constructed(tc_universal, tag_sequence, repeat $ inner_monad)
);

decode_set_of: [m: MonadReadByte] m a -> m (Array a);
decode_set_of = |inner_monad| (
    decode_constructed(tc_universal, tag_set, repeat $ inner_monad)
);

// `with_context(tag, inner_monad)`reads the identifier and the length,
// then checks whether the identifier matches `tag` and the tag class is `tc_context_specific`,
// then runs `inner_monad` in the inner contents.
with_context: [m: MonadReadByte] I64 -> m a -> m a;
with_context = |tag, inner_monad| (
    decode_constructed(tc_context_specific, tag.to_U8, inner_monad)
);

choice: [m: MonadError] Array (m a) -> m a;
choice = |monads| (
    let inner = fix $ |inner, i| (
        if i >= monads.get_size - 1 { monads.@(i) };
        monads.@(i).catch(|err| inner(i + 1))
    );
    inner(0)
);

decode_der_from_bytes: [a: DecodeDer] Array U8 -> Result ErrMsg a;
decode_der_from_bytes = |bytes| (
    let buf = ByteBuffer::make(bytes, big_endian());
    decode_obj.run_state_t(buf).map(@0)
);


trait a: DecodeDer {
    decode_obj: [m: MonadReadByte] m a;
}

impl Asn1::Boolean: DecodeDer {
    decode_obj = (
        let (identifier, contents) = *decode_primitive;
        eval *assert_tag(tag_boolean, identifier);
        if contents.get_size != 1 { error $ "InvalidLength" };
        pure $ contents.@(0) != 0_U8
    );
}

decode_integer: [m: MonadReadByte] m Asn1::Integer;
decode_integer = (
    let (identifier, contents) = *decode_primitive;
    eval *assert_tag(tag_integer, identifier);
    if contents.get_size == 0 {
        pure $ 0
    };
    if contents.get_size > 8 {
        error $ "OutOfRange"
    };
    let sign = if contents.@(0).bit_and(0x80_U8) != 0_U8 { -1 } else { 1 };
    let bytes = if sign >= 0 { contents }
    else { contents.map(bit_xor(0xff_U8)) };    // reverse bits
    let u64: U64 = bytes.to_iter.fold(
        0_U64, |u64, u8|
        u64.shift_left(8_U64).bit_or(u8.to_U64)
    );
    if u64 >= I64::maximum.to_U64 { error $ "OutOfRange" };
    let i64: I64 = if sign >= 0 {
        u64.to_I64
    } else {
        -((u64 + 1_U64).to_I64)
    };
    pure $ i64
);

impl Asn1::Integer: DecodeDer {
    decode_obj = decode_integer;
}

decode_bigint: [m: MonadReadByte] m BigInt;
decode_bigint = (
    let (identifier, contents) = *decode_primitive;
    eval *assert_tag(tag_integer, identifier);
    if contents.get_size == 0 {
        pure $ Zero::zero
    };
    let sign = if contents.@(0).bit_and(0x80_U8) != 0_U8 { -1 } else { 1 };
    let bytes = if sign >= 0 { contents }
    else { contents.map(bit_xor(0xff_U8)) };    // reverse bits

    let bigint_positive: BigInt = (
        let u8_len = bytes.get_size;
        if u8_len == 0 { zero };
        let u32_len = (u8_len + 3) / 4;
        let bytes = if 4 * u32_len == u8_len { bytes }
        else { Array::fill(4 * u32_len - u8_len, 0_U8).append(bytes) };
        let nat = Array::from_map(u32_len, |i|
            bytes.get_u32_be(4 * (u32_len - 1 - i))     // big endian
        );
        BigInt::make(1, nat)
    );

    if sign >= 0 {
        pure $ bigint_positive
    } else {    // if negative, add one and negate the result (because of two's complement)
        pure $ -(bigint_positive + one)
    }
);

impl BigInt: DecodeDer {
    decode_obj = decode_bigint;
}

decode_string: [m: MonadReadByte] m String;
decode_string = (
    let (identifier, contents) = *decode_primitive;
    let tag = identifier.@tag;
    if tag == tag_utf8_string
    {
        pure $ contents._unsafe_to_string
    };
    if tag == tag_ia5_string
    {
        // ISO 646 (IA5) characters are almost identical to ASCII character set.
        pure $ contents._unsafe_to_string
    };
    if tag == tag_printable_string
    {
        // PrintableString is restricted subset of ASCII character set.
        pure $ contents._unsafe_to_string
    };
    if tag == tag_t61_string
    {
        let _8bit_chars = contents.to_iter.filter(|c| c >= 0x80_U8).to_array;
        eval if _8bit_chars.get_size > 0 {
            debug_eprintln("Warning: Found T61String that contain 8bit chars: hex=" + _8bit_chars.to_string_hex)
        } else { () };
        pure $ contents._unsafe_to_string // OK?
    };
    if tag == tag_universal_string
    {
        eval debug_eprintln("Warning: Found tag_universal_string: contents=" + contents.to_string_hex);
        // implemented but not tested
        let u32array = Array::from_map(contents.get_size / 4, |i| contents.get_u32_be(i * 4));
        let u8array = utf32_to_utf8(u32array, Array::empty(u32array.get_size * 4));
        pure $ u8array._unsafe_to_string
    };
    if tag == tag_bmp_string
    {
        eval debug_eprintln("Warning: Found tag_bmp_string: contents=" + contents.to_string_hex);
        // implemented but not tested
        let u16array = Array::from_map(contents.get_size / 2, |i| contents.get_u16_be(i * 2));
        let u32array = utf16_to_utf32(u16array, Array::empty(u16array.get_size / 2));
        let u8array = utf32_to_utf8(u32array, Array::empty(u32array.get_size * 4));
        pure $ u8array._unsafe_to_string
    };
    error $ [tag].format("tag mismatch: expected=(string) actual={}")
);

impl String: DecodeDer {
    decode_obj = decode_string;
}

impl Asn1::BitString: DecodeDer {
    decode_obj = (
        let (identifier, contents) = *decode_primitive;
        // TODO: support constructed
        eval *assert_tag(tag_bit_string, identifier);
        if contents.get_size <= 0 { error $ "invalid bitstring" };
        let number_of_unused_bits = contents.@(0);
        let data = contents.subarray(1, contents.get_size);
        pure $ BitString {
            number_of_unused_bits: number_of_unused_bits,
            data: data
        }
    );
}

impl Asn1::OctetString: DecodeDer {
    decode_obj = (
        let (identifier, contents) = *decode_primitive;
        eval *assert_tag(tag_octet_string, identifier);
        pure $ OctetString {
            data: contents
        }
    );
}


// T-REC-X.690-202102
// 8.19 Encoding of an object identifier value
impl Asn1::ObjectIdentifier: DecodeDer {
    decode_obj = (
        let (identifier, contents) = *decode_primitive;
        eval *assert_tag(tag_object_identifier, identifier);
        if contents.get_size <= 0 { error $ "invalid object identifier" };
        let n = contents.get_size;
        let subidentifiers: Array I64 = loop(
            ([], 0, 0), |(subidentifiers, value, i)|
            if i >= n { break $ subidentifiers };
            let u8: U8 = contents.@(i);
            let value: I64 = value.shift_left(7).bit_or(u8.bit_and(0x7F_U8).to_I64);
            if u8.bit_and(0x80_U8) == 0_U8 {
                continue $ (subidentifiers.push_back(value), 0, i + 1)
            };
            continue $ (subidentifiers, value, i + 1)
        );
        let first = max(0, min(2, subidentifiers.@(0) / 40));
        let second = subidentifiers.@(0) - first * 40;
        let components = [first, second].append(subidentifiers.subarray(1, subidentifiers.get_size));
        let data = components.to_iter.map(to_string).join(".");
        pure $ ObjectIdentifier { data: data }
    );
}

