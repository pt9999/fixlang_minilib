module Main;

import Subprocess;

import Minilib.Terminal.Ncurses;

test1: IO ();
test1 = do {
    Ncurses::run $ |win| (
        let selected = 10;
        init_color_pair(selected, white, blue);;
        win.clear;;
        win.set_color(selected, normal);;
        win.move_add_str(10, 10, "Hello world");;
        win.set_color(green, bold);;
        win.move_add_str(10, 11, "Hello world");;
        let attr = make_attr(white, reverse);
        win.set_attr(attr);;
        let (w, h) = *win.get_window_size;
        win.move_add_str(10, 12, "Hello world " + (w, h).to_string);;
        let c = *win.getch;
        pure()
    )
}.try(eprintln);

list_dir: String -> IOFail (Array String);
list_dir = |dirpath| (
    let ((stdout, stderr), exit_status) = *Subprocess::run_string("/usr/bin/env", ["/usr/bin/env", "LANG=C", "ls", "-l", dirpath], "");
    if !(exit_status.is_exit && exit_status.as_exit == 0_U8) {
        throw $ "ls command failed"
    };
    pure $ stdout.split("\n").to_array
);

show_files: Window -> IOFail ();
show_files = |win| (
    let dirpath = ".";
    let files = *list_dir(dirpath);
    let (w, h) = *win.get_window_size;
    win.set_color(white, normal);;
    loop_m(
        0, |y|
        if y >= h - 2 || y >= files.get_size { break_m $ () };
        win.move_add_str(1, y + 1, files.@(y));;
        continue_m $ y + 1
    );;
    win.set_color(green, normal);;
    win.box;;
    pure()
);

test2: IO ();
test2 = do {
    Ncurses::run $ |win| (
        let selected = 10;
        init_color_pair(selected, white, blue);;
        win.clear;;
        win.set_color(white, normal);;
        show_files(win);;
        let c = *win.getch;
        pure()
    )
}.try(eprintln);


main: IO ();
main = test2;

