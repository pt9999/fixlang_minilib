module Main;

import AsyncTask;
import Random;

//import Minilib.Collection.Deque;
import Minilib.Thread.Channel;
import Minilib.Thread.Future;
import Minilib.Thread.TaskPool;
import Minilib.Trait.Traversable;
import Minilib.Text.StringEx;


//---------------------------------------------------

parallel_map_m: TaskPool -> (a -> IO b) -> Array a -> IOFail (Array b);
parallel_map_m = |pool, f, arr| (
    let futures = *arr.map_m(
        |a| Future::make(pool, pure(a).bind(f))
    );
    futures.map_m(
        |future| future.get
    )
);

_usleep: I64 -> ();
_usleep = |usec| (
    let res = FFI_CALL[I32 usleep(U32), usec.to_U32].to_I64;
    if res != 0 {
        debug_eprintln("usleep failed: res=" + res.to_string)
    } else {
        ()
    }
);

sleep_random: Var Random -> IO ();
sleep_random = |rand_var| (
    let u64 = *rand_var.lock(|rand|
        let (rand, u64) = rand.generate_U64;
        let _ = *rand_var.Var::set(rand);
        pure $ u64
    );
    eval _usleep((u64 % 5000000_U64).to_I64);
    pure()
);

// This function makes IOHandle to unbuffered mode. See `man 3 setbuf`.
// NOTE: When `fix run` is invoked `fixautolink`, it is invoked by `run_with_stream()`.
// Then the stdout and stderr is not a tty, but a file stream.
// So the stdout becomes block-buffered. The stderr also seems to be block-buffered.
set_unbuffered_mode: IOHandle -> IO ();
set_unbuffered_mode = |handle| (
    let _ = *pure();
    eval FFI_CALL[() setbuf(Ptr, Ptr), handle._file_ptr, nullptr];
    pure()
);

test1: IO ();
test1 = (
    do {
        let _ = *eprintln("start").lift;
        let rand_var: Var Random = *Var::make(Random::init_by_seed(123_U64)).lift;
        let pool = *TaskPool::make(3).lift;
        let arr: Array I64 = Iterator::range(0, 30).to_array;
        let f = |i| (
            let _ = *pure();
            let thr = FFI_CALL[U32 pthread_self()];
            let _ = *eprintln(thr.to_string + ": " + i.to_string + ": start");
            let _ = *sleep_random(rand_var);
            let _ = *eprintln(thr.to_string + ": " + i.to_string + ": end");
            pure()
        );
        let futures = *arr.map_m(
            |a| Future::make(pool, f(a))
        );
        //let _ = *arr.parallel_map_m(pool, f);
        let pool = *pool.shutdown.lift;
        let _ = *futures.map_m(
            |future| future.get
        );
        let _ = *eprintln("end").lift;
        pure()
    }.try(eprintln)
);

main: IO ();
main = (
    let _ = *set_unbuffered_mode(IO::stdout);
    let _ = *set_unbuffered_mode(IO::stderr);
    test1
);
